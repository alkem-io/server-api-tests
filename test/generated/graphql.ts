/* eslint-disable @typescript-eslint/no-explicit-any */
import * as SchemaTypes from './alkemio-schema';

import {
  GraphQLResolveInfo,
  GraphQLScalarType,
  GraphQLScalarTypeConfig,
} from 'graphql';
import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
import { print } from 'graphql';
import gql from 'graphql-tag';
export type Maybe<T> = T | undefined;
export type InputMaybe<T> = T | undefined;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]: Maybe<T[SubKey]> };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type RequireFields<T, K extends keyof T> = Omit<T, K> &
  { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  CID: any;
  DID: string;
  DateTime: Date;
  Emoji: any;
  JSON: string;
  LifecycleDefinition: any;
  Markdown: any;
  MessageID: any;
  NameID: string;
  UUID: string;
  UUID_NAMEID: string;
  UUID_NAMEID_EMAIL: string;
  Upload: import('graphql-upload').FileUpload;
  WhiteboardContent: any;
};

export type Apm = {
  /** Endpoint where events are sent. */
  endpoint: Scalars['String'];
  /** Flag indicating if real user monitoring is enabled. */
  rumEnabled: Scalars['Boolean'];
};

export type Account = {
  /** The "highest" subscription active for this Account. */
  activeSubscription?: Maybe<AccountSubscription>;
  /** The Agent representing this Account. */
  agent: Agent;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The defaults in use by this Account */
  defaults?: Maybe<SpaceDefaults>;
  /** The Account host. */
  host?: Maybe<Contributor>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The Library in use by this Account */
  library?: Maybe<TemplatesSet>;
  /** The License governing platform functionality in use by this Account */
  license: License;
  /** The privileges granted based on the License credentials held by this Account. */
  licensePrivileges?: Maybe<Array<LicensePrivilege>>;
  /** The ID for the root space for the Account . */
  spaceID: Scalars['String'];
  /** The subscriptions active for this Account. */
  subscriptions: Array<AccountSubscription>;
  /** The virtual contributors for this Account. */
  virtualContributors: Array<VirtualContributor>;
};

export type AccountAuthorizationResetInput = {
  /** The identifier of the Account whose Authorization Policy should be reset. */
  accountID: Scalars['UUID_NAMEID'];
};

export type AccountSubscription = {
  /** The expiry date of this subscription, null if it does never expire. */
  expires?: Maybe<Scalars['DateTime']>;
  /** The name of the Subscription. */
  name: LicenseCredential;
};

export type ActivityCreatedSubscriptionInput = {
  /** The collaboration on which to subscribe for new activity */
  collaborationID: Scalars['UUID'];
  /** Include activities happened on child Collaborations. */
  includeChild?: InputMaybe<Scalars['Boolean']>;
  /** Which activity types to include in the results. Returns all by default. */
  types?: InputMaybe<Array<ActivityEventType>>;
};

export type ActivityCreatedSubscriptionResult = {
  /** The newly created activity */
  activity: ActivityLogEntry;
};

export enum ActivityEventType {
  CalendarEventCreated = 'CALENDAR_EVENT_CREATED',
  CalloutLinkCreated = 'CALLOUT_LINK_CREATED',
  CalloutPostComment = 'CALLOUT_POST_COMMENT',
  CalloutPostCreated = 'CALLOUT_POST_CREATED',
  CalloutPublished = 'CALLOUT_PUBLISHED',
  CalloutWhiteboardContentModified = 'CALLOUT_WHITEBOARD_CONTENT_MODIFIED',
  CalloutWhiteboardCreated = 'CALLOUT_WHITEBOARD_CREATED',
  ChallengeCreated = 'CHALLENGE_CREATED',
  DiscussionComment = 'DISCUSSION_COMMENT',
  MemberJoined = 'MEMBER_JOINED',
  OpportunityCreated = 'OPPORTUNITY_CREATED',
  UpdateSent = 'UPDATE_SENT',
}

export type ActivityFeed = {
  activityFeed: Array<ActivityLogEntry>;
  pageInfo: PageInfo;
  total: Scalars['Float'];
};

export type ActivityFeedGroupedQueryArgs = {
  /** What events to exclude. */
  excludeTypes?: InputMaybe<Array<ActivityEventType>>;
  /** Number of activities to return. */
  limit?: InputMaybe<Scalars['Float']>;
  /** Returns only events that the current user triggered; Includes all by default. */
  myActivity?: InputMaybe<Scalars['Boolean']>;
  /** Activity from which Spaces to include; Includes all by default. */
  roles?: InputMaybe<Array<ActivityFeedRoles>>;
  /** Activity from which Spaces to include; Includes all by default. */
  spaceIds?: InputMaybe<Array<Scalars['UUID']>>;
  /** What events to include; Includes all by default. */
  types?: InputMaybe<Array<ActivityEventType>>;
};

export type ActivityFeedQueryArgs = {
  /** What events to exclude. */
  excludeTypes?: InputMaybe<Array<ActivityEventType>>;
  /** Returns only events that the current user triggered; Includes all by default. */
  myActivity?: InputMaybe<Scalars['Boolean']>;
  /** Activity from which Spaces to include; Includes all by default. */
  roles?: InputMaybe<Array<ActivityFeedRoles>>;
  /** Activity from which Spaces to include; Includes all by default. */
  spaceIds?: InputMaybe<Array<Scalars['UUID']>>;
  /** What events to include; Includes all by default. */
  types?: InputMaybe<Array<ActivityEventType>>;
};

export enum ActivityFeedRoles {
  Admin = 'ADMIN',
  Lead = 'LEAD',
  Member = 'MEMBER',
}

export type ActivityLogEntry = {
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime'];
  /** The text details for this Activity. */
  description: Scalars['String'];
  id: Scalars['UUID'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String'];
  /** The nameID of the parent */
  parentNameID: Scalars['NameID'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
};

export type ActivityLogEntryCalendarEventCreated = ActivityLogEntry & {
  /** The Calendar in which the CalendarEvent was created. */
  calendar: Calendar;
  /** The CalendarEvent that was created. */
  calendarEvent: CalendarEvent;
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime'];
  /** The text details for this Activity. */
  description: Scalars['String'];
  id: Scalars['UUID'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String'];
  /** The nameID of the parent */
  parentNameID: Scalars['NameID'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
};

export type ActivityLogEntryCalloutDiscussionComment = ActivityLogEntry & {
  /** The Callout in which the comment was added. */
  callout: Callout;
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime'];
  /** The text details for this Activity. */
  description: Scalars['String'];
  id: Scalars['UUID'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String'];
  /** The nameID of the parent */
  parentNameID: Scalars['NameID'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
};

export type ActivityLogEntryCalloutLinkCreated = ActivityLogEntry & {
  /** The Callout in which the Link was created. */
  callout: Callout;
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime'];
  /** The text details for this Activity. */
  description: Scalars['String'];
  id: Scalars['UUID'];
  /** The Link that was created. */
  link: Link;
  /** The display name of the parent */
  parentDisplayName: Scalars['String'];
  /** The nameID of the parent */
  parentNameID: Scalars['NameID'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
};

export type ActivityLogEntryCalloutPostComment = ActivityLogEntry & {
  /** The Callout in which the Post was commented. */
  callout: Callout;
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime'];
  /** The text details for this Activity. */
  description: Scalars['String'];
  id: Scalars['UUID'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String'];
  /** The nameID of the parent */
  parentNameID: Scalars['NameID'];
  /** The Post that was commented on. */
  post: Post;
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
};

export type ActivityLogEntryCalloutPostCreated = ActivityLogEntry & {
  /** The Callout in which the Post was created. */
  callout: Callout;
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime'];
  /** The text details for this Activity. */
  description: Scalars['String'];
  id: Scalars['UUID'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String'];
  /** The nameID of the parent */
  parentNameID: Scalars['NameID'];
  /** The Post that was created. */
  post: Post;
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
};

export type ActivityLogEntryCalloutPublished = ActivityLogEntry & {
  /** The Callout that was published. */
  callout: Callout;
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime'];
  /** The text details for this Activity. */
  description: Scalars['String'];
  id: Scalars['UUID'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String'];
  /** The nameID of the parent */
  parentNameID: Scalars['NameID'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
};

export type ActivityLogEntryCalloutWhiteboardContentModified = ActivityLogEntry & {
  /** The Callout in which the Whiteboard was updated. */
  callout: Callout;
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime'];
  /** The text details for this Activity. */
  description: Scalars['String'];
  id: Scalars['UUID'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String'];
  /** The nameID of the parent */
  parentNameID: Scalars['NameID'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
  /** The Whiteboard that was updated. */
  whiteboard: Whiteboard;
};

export type ActivityLogEntryCalloutWhiteboardCreated = ActivityLogEntry & {
  /** The Callout in which the Whiteboard was created. */
  callout: Callout;
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime'];
  /** The text details for this Activity. */
  description: Scalars['String'];
  id: Scalars['UUID'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String'];
  /** The nameID of the parent */
  parentNameID: Scalars['NameID'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
  /** The Whiteboard that was created. */
  whiteboard: Whiteboard;
};

export type ActivityLogEntryChallengeCreated = ActivityLogEntry & {
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime'];
  /** The text details for this Activity. */
  description: Scalars['String'];
  id: Scalars['UUID'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String'];
  /** The nameID of the parent */
  parentNameID: Scalars['NameID'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The Subspace that was created. */
  subspace: Space;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
};

export type ActivityLogEntryMemberJoined = ActivityLogEntry & {
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID'];
  /** The community that was joined. */
  community: Community;
  /** The type of the the Community. */
  communityType: Scalars['String'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime'];
  /** The text details for this Activity. */
  description: Scalars['String'];
  id: Scalars['UUID'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String'];
  /** The nameID of the parent */
  parentNameID: Scalars['NameID'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
  /** The User that joined the Community. */
  user: User;
};

export type ActivityLogEntryOpportunityCreated = ActivityLogEntry & {
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime'];
  /** The text details for this Activity. */
  description: Scalars['String'];
  id: Scalars['UUID'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String'];
  /** The nameID of the parent */
  parentNameID: Scalars['NameID'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The Subsubspace that was created. */
  subsubspace: Space;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
};

export type ActivityLogEntryUpdateSent = ActivityLogEntry & {
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime'];
  /** The text details for this Activity. */
  description: Scalars['String'];
  id: Scalars['UUID'];
  /** The url to the Journey. */
  journeyUrl: Scalars['String'];
  /** The Message that been sent to this Community. */
  message: Scalars['String'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String'];
  /** The nameID of the parent */
  parentNameID: Scalars['NameID'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
  /** The Updates for this Community. */
  updates: Room;
};

export type ActivityLogInput = {
  /** Display the activityLog results for the specified Collaboration. */
  collaborationID: Scalars['UUID'];
  /** Include entries happened on child Collaborations. */
  includeChild?: InputMaybe<Scalars['Boolean']>;
  /** The number of ActivityLog entries to return; if omitted return all. */
  limit?: InputMaybe<Scalars['Float']>;
  /** Which activity types to include in the results. Returns all by default. */
  types?: InputMaybe<Array<ActivityEventType>>;
};

export type Actor = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** A description of this actor */
  description?: Maybe<Scalars['String']>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The change / effort required of this actor */
  impact?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  /** A value derived by this actor */
  value?: Maybe<Scalars['String']>;
};

export type ActorGroup = {
  /** The set of actors in this actor group */
  actors?: Maybe<Array<Actor>>;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** A description of this group of actors */
  description?: Maybe<Scalars['String']>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  name: Scalars['String'];
};

export type Agent = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The Credentials held by this Agent. */
  credentials?: Maybe<Array<Credential>>;
  /** The Decentralized Identifier (DID) for this Agent. */
  did?: Maybe<Scalars['DID']>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The Verfied Credentials for this Agent. */
  verifiedCredentials?: Maybe<Array<VerifiedCredential>>;
};

export type AgentBeginVerifiedCredentialOfferOutput = {
  /** The token containing the information about issuer, callback endpoint and the credentials offered */
  jwt: Scalars['String'];
  /** The QR Code Image to be offered on the client for scanning by a mobile wallet */
  qrCodeImg: Scalars['String'];
};

export type AgentBeginVerifiedCredentialRequestOutput = {
  /** The token containing the information about issuer, callback endpoint and the credentials offered */
  jwt: Scalars['String'];
  /** The QR Code Image to be offered on the client for scanning by a mobile wallet */
  qrCodeImg: Scalars['String'];
};

export type AiPersona = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** A overview of knowledge provided by this AI Persona. */
  bodyOfKnowledge: Scalars['Markdown'];
  /** The body of knowledge ID used for the AI Persona. */
  bodyOfKnowledgeID?: Maybe<Scalars['String']>;
  /** The body of knowledge type used for the AI Persona. */
  bodyOfKnowledgeType?: Maybe<AiPersonaBodyOfKnowledgeType>;
  /** The type of context sharing that are supported by this AI Persona when used. */
  dataAccessMode: AiPersonaDataAccessMode;
  /** The description for this AI Persona. */
  description: Scalars['Markdown'];
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The type of interactions that are supported by this AI Persona when used. */
  interactionModes: Array<AiPersonaInteractionMode>;
};

export enum AiPersonaBodyOfKnowledgeType {
  AlkemioSpace = 'ALKEMIO_SPACE',
  Other = 'OTHER',
}

export enum AiPersonaDataAccessMode {
  None = 'NONE',
  SpaceProfile = 'SPACE_PROFILE',
  SpaceProfileAndContents = 'SPACE_PROFILE_AND_CONTENTS',
}

export enum AiPersonaEngine {
  CommunityManager = 'COMMUNITY_MANAGER',
  Expert = 'EXPERT',
  Guidance = 'GUIDANCE',
}

export enum AiPersonaInteractionMode {
  DiscussionTagging = 'DISCUSSION_TAGGING',
}

export type AiPersonaService = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The body of knowledge ID used for the AI Persona Service */
  bodyOfKnowledgeID?: Maybe<Scalars['UUID']>;
  /** The body of knowledge type used for the AI Persona Service */
  bodyOfKnowledgeType?: Maybe<AiPersonaBodyOfKnowledgeType>;
  /** The required data access by the Virtual Persona */
  dataAccessMode: AiPersonaDataAccessMode;
  /** The AI Persona Engine being used by this AI Persona. */
  engine: AiPersonaEngine;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The prompt used by this Virtual Persona */
  prompt: Scalars['String'];
};

export type AiPersonaServiceIngestInput = {
  aiPersonaServiceID: Scalars['UUID'];
};

export type AiPersonaServiceQuestionInput = {
  /** Virtual Persona Type. */
  aiPersonaServiceID: Scalars['UUID'];
  /** The question that is being asked. */
  question: Scalars['String'];
};

export type AiServer = {
  /** A particular AiPersonaService */
  aiPersonaService: AiPersonaService;
  /** The AiPersonaServices on this aiServer */
  aiPersonaServices: Array<AiPersonaService>;
  /** Ask the virtual persona engine for guidance. */
  askAiPersonaServiceQuestion: MessageAnswerQuestion;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The default AiPersonaService in use on the aiServer. */
  defaultAiPersonaService: AiPersonaService;
  /** The ID of the entity */
  id: Scalars['UUID'];
};

export type AiServerAiPersonaServiceArgs = {
  ID: Scalars['UUID'];
};

export type AiServerAskAiPersonaServiceQuestionArgs = {
  chatData: AiPersonaServiceQuestionInput;
};

export type AnyInvitation = Invitation | InvitationExternal;

export type Application = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The User for this Application. */
  contributor: Contributor;
  createdDate: Scalars['DateTime'];
  /** The ID of the entity */
  id: Scalars['UUID'];
  lifecycle: Lifecycle;
  /** The Questions for this application. */
  questions: Array<Question>;
  updatedDate: Scalars['DateTime'];
};

export type ApplicationEventInput = {
  applicationID: Scalars['UUID'];
  eventName: Scalars['String'];
};

export type AssignCommunityRoleToOrganizationInput = {
  communityID: Scalars['UUID'];
  organizationID: Scalars['UUID_NAMEID'];
  role: CommunityRole;
};

export type AssignCommunityRoleToUserInput = {
  communityID: Scalars['UUID'];
  role: CommunityRole;
  userID: Scalars['UUID_NAMEID_EMAIL'];
};

export type AssignCommunityRoleToVirtualInput = {
  communityID: Scalars['UUID'];
  role: CommunityRole;
  virtualContributorID: Scalars['UUID_NAMEID'];
};

export type AssignLicensePlanToAccount = {
  /** The ID of the Account to assign the LicensePlan to. */
  accountID: Scalars['UUID'];
  /** The ID of the LicensePlan to assign. */
  licensePlanID: Scalars['UUID'];
  /** The ID of the Licensing to use. */
  licensingID?: InputMaybe<Scalars['UUID']>;
};

export type AssignOrganizationRoleToUserInput = {
  organizationID: Scalars['UUID_NAMEID'];
  role: OrganizationRole;
  userID: Scalars['UUID_NAMEID_EMAIL'];
};

export type AssignPlatformRoleToUserInput = {
  role: PlatformRole;
  userID: Scalars['UUID_NAMEID_EMAIL'];
};

export type AssignUserGroupMemberInput = {
  groupID: Scalars['UUID'];
  userID: Scalars['UUID_NAMEID_EMAIL'];
};

export type AuthenticationConfig = {
  /** Alkemio Authentication Providers Config. */
  providers: Array<AuthenticationProviderConfig>;
};

export type AuthenticationProviderConfig = {
  /** Configuration of the authenticaiton provider */
  config: AuthenticationProviderConfigUnion;
  /** Is the authentication provider enabled? */
  enabled: Scalars['Boolean'];
  /** CDN location of an icon of the authentication provider login button. */
  icon: Scalars['String'];
  /** Label of the authentication provider. */
  label: Scalars['String'];
  /** Name of the authentication provider. */
  name: Scalars['String'];
};

export type AuthenticationProviderConfigUnion = OryConfig;

export type Authorization = {
  anonymousReadAccess: Scalars['Boolean'];
  /** The set of credential rules that are contained by this Authorization Policy. */
  credentialRules?: Maybe<Array<AuthorizationPolicyRuleCredential>>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The privileges granted to the current user based on this Authorization Policy. */
  myPrivileges?: Maybe<Array<AuthorizationPrivilege>>;
  /** The set of privilege rules that are contained by this Authorization Policy. */
  privilegeRules?: Maybe<Array<AuthorizationPolicyRulePrivilege>>;
  /** The set of verified credential rules that are contained by this Authorization Policy. */
  verifiedCredentialRules?: Maybe<
    Array<AuthorizationPolicyRuleVerifiedCredential>
  >;
};

export enum AuthorizationCredential {
  AccountHost = 'ACCOUNT_HOST',
  BetaTester = 'BETA_TESTER',
  GlobalAdmin = 'GLOBAL_ADMIN',
  GlobalCommunityRead = 'GLOBAL_COMMUNITY_READ',
  GlobalLicenseManager = 'GLOBAL_LICENSE_MANAGER',
  GlobalRegistered = 'GLOBAL_REGISTERED',
  GlobalSpacesReader = 'GLOBAL_SPACES_READER',
  GlobalSupport = 'GLOBAL_SUPPORT',
  InnovationPackProvider = 'INNOVATION_PACK_PROVIDER',
  OrganizationAdmin = 'ORGANIZATION_ADMIN',
  OrganizationAssociate = 'ORGANIZATION_ASSOCIATE',
  OrganizationOwner = 'ORGANIZATION_OWNER',
  SpaceAdmin = 'SPACE_ADMIN',
  SpaceLead = 'SPACE_LEAD',
  SpaceMember = 'SPACE_MEMBER',
  SpaceSubspaceAdmin = 'SPACE_SUBSPACE_ADMIN',
  UserGroupMember = 'USER_GROUP_MEMBER',
  UserSelfManagement = 'USER_SELF_MANAGEMENT',
}

export type AuthorizationPolicyRuleCredential = {
  cascade: Scalars['Boolean'];
  criterias: Array<CredentialDefinition>;
  grantedPrivileges: Array<AuthorizationPrivilege>;
  name?: Maybe<Scalars['String']>;
};

export type AuthorizationPolicyRulePrivilege = {
  grantedPrivileges: Array<AuthorizationPrivilege>;
  name?: Maybe<Scalars['String']>;
  sourcePrivilege: AuthorizationPrivilege;
};

export type AuthorizationPolicyRuleVerifiedCredential = {
  claimRule: Scalars['String'];
  credentialName: Scalars['String'];
  grantedPrivileges: Array<AuthorizationPrivilege>;
};

export enum AuthorizationPrivilege {
  AccessDashboardRefresh = 'ACCESS_DASHBOARD_REFRESH',
  AccessInteractiveGuidance = 'ACCESS_INTERACTIVE_GUIDANCE',
  AccessVirtualContributor = 'ACCESS_VIRTUAL_CONTRIBUTOR',
  AuthorizationReset = 'AUTHORIZATION_RESET',
  CommunityAddMember = 'COMMUNITY_ADD_MEMBER',
  CommunityAddMemberVcFromAccount = 'COMMUNITY_ADD_MEMBER_VC_FROM_ACCOUNT',
  CommunityApply = 'COMMUNITY_APPLY',
  CommunityInvite = 'COMMUNITY_INVITE',
  CommunityInviteAccept = 'COMMUNITY_INVITE_ACCEPT',
  CommunityJoin = 'COMMUNITY_JOIN',
  Contribute = 'CONTRIBUTE',
  Create = 'CREATE',
  CreateCallout = 'CREATE_CALLOUT',
  CreateDiscussion = 'CREATE_DISCUSSION',
  CreateMessage = 'CREATE_MESSAGE',
  CreateMessageReaction = 'CREATE_MESSAGE_REACTION',
  CreateMessageReply = 'CREATE_MESSAGE_REPLY',
  CreateOrganization = 'CREATE_ORGANIZATION',
  CreatePost = 'CREATE_POST',
  CreateSpace = 'CREATE_SPACE',
  CreateSubspace = 'CREATE_SUBSPACE',
  CreateVirtualContributor = 'CREATE_VIRTUAL_CONTRIBUTOR',
  CreateWhiteboard = 'CREATE_WHITEBOARD',
  CreateWhiteboardRt = 'CREATE_WHITEBOARD_RT',
  Delete = 'DELETE',
  FileDelete = 'FILE_DELETE',
  FileUpload = 'FILE_UPLOAD',
  Grant = 'GRANT',
  GrantGlobalAdmins = 'GRANT_GLOBAL_ADMINS',
  MoveContribution = 'MOVE_CONTRIBUTION',
  MovePost = 'MOVE_POST',
  PlatformAdmin = 'PLATFORM_ADMIN',
  Read = 'READ',
  ReadUsers = 'READ_USERS',
  ReadUserPii = 'READ_USER_PII',
  ReadUserSettings = 'READ_USER_SETTINGS',
  SaveAsTemplate = 'SAVE_AS_TEMPLATE',
  Update = 'UPDATE',
  UpdateCalloutPublisher = 'UPDATE_CALLOUT_PUBLISHER',
  UpdateContent = 'UPDATE_CONTENT',
  UpdateInnovationFlow = 'UPDATE_INNOVATION_FLOW',
  UpdateWhiteboard = 'UPDATE_WHITEBOARD',
}

export type Calendar = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** A single CalendarEvent */
  event?: Maybe<CalendarEvent>;
  /** The list of CalendarEvents for this Calendar. */
  events?: Maybe<Array<CalendarEvent>>;
  /** The ID of the entity */
  id: Scalars['UUID'];
};

export type CalendarEventArgs = {
  ID: Scalars['UUID_NAMEID'];
};

export type CalendarEventsArgs = {
  IDs?: InputMaybe<Array<Scalars['UUID_NAMEID']>>;
  limit?: InputMaybe<Scalars['Float']>;
};

export type CalendarEvent = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The comments for this CalendarEvent */
  comments: Room;
  /** The user that created this CalendarEvent */
  createdBy?: Maybe<User>;
  createdDate: Scalars['DateTime'];
  /** The length of the event in days. */
  durationDays?: Maybe<Scalars['Float']>;
  /** The length of the event in minutes. */
  durationMinutes: Scalars['Float'];
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** Flag to indicate if this event is for multiple days. */
  multipleDays: Scalars['Boolean'];
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID'];
  /** The Profile for this Post. */
  profile: Profile;
  /** The start time for this CalendarEvent. */
  startDate?: Maybe<Scalars['DateTime']>;
  /** The event type, e.g. webinar, meetup etc. */
  type: CalendarEventType;
  /** Flag to indicate if this event is for a whole day. */
  wholeDay: Scalars['Boolean'];
};

export enum CalendarEventType {
  Event = 'EVENT',
  Milestone = 'MILESTONE',
  Other = 'OTHER',
  Training = 'TRAINING',
}

export type Callout = {
  /** The activity for this Callout. */
  activity: Scalars['Float'];
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The comments for this Callout. */
  comments?: Maybe<Room>;
  /** The Contribution Defaults for this Callout. */
  contributionDefaults: CalloutContributionDefaults;
  /** The ContributionPolicy for this Callout. */
  contributionPolicy: CalloutContributionPolicy;
  /** The Contributions that have been made to this Callout. */
  contributions: Array<CalloutContribution>;
  /** The user that created this Callout */
  createdBy?: Maybe<User>;
  /** The Callout Framing associated with this Callout. */
  framing: CalloutFraming;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID'];
  /** The Posts associated with this Callout. */
  posts?: Maybe<Array<Post>>;
  /** The user that published this Callout */
  publishedBy?: Maybe<User>;
  /** The timestamp for the publishing of this Callout. */
  publishedDate?: Maybe<Scalars['Float']>;
  /** The sorting order for this Callout. */
  sortOrder: Scalars['Float'];
  /** The Callout type, e.g. Post, Whiteboard, Discussion */
  type: CalloutType;
  /** Visibility of the Callout. */
  visibility: CalloutVisibility;
};

export type CalloutContributionsArgs = {
  IDs?: InputMaybe<Array<Scalars['UUID_NAMEID']>>;
  filter?: InputMaybe<CalloutContributionFilterArgs>;
  limit?: InputMaybe<Scalars['Float']>;
  shuffle?: InputMaybe<Scalars['Boolean']>;
};

export type CalloutContribution = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The user that created this Document */
  createdBy?: Maybe<User>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The Link that was contributed. */
  link?: Maybe<Link>;
  /** The Post that was contributed. */
  post?: Maybe<Post>;
  /** The Whiteboard that was contributed. */
  whiteboard?: Maybe<Whiteboard>;
};

export type CalloutContributionDefaults = {
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The default description to use for new contributions. */
  postDescription?: Maybe<Scalars['Markdown']>;
  /** The default whiteboard content for whiteboard responses. */
  whiteboardContent?: Maybe<Scalars['WhiteboardContent']>;
};

export type CalloutContributionFilterArgs = {
  /** Include Contributions with Link ids of contributions to include. */
  linkIDs?: InputMaybe<Array<Scalars['UUID']>>;
  /** Include Contributions with Post ids/nameIds. */
  postIDs?: InputMaybe<Array<Scalars['UUID_NAMEID']>>;
  /** Include Contributions with Whiteboard ids/nameIds. */
  whiteboardIDs?: InputMaybe<Array<Scalars['UUID_NAMEID']>>;
};

export type CalloutContributionPolicy = {
  /** The allowed contribution types for this callout. */
  allowedContributionTypes: Array<CalloutContributionType>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** State of the Callout. */
  state: CalloutState;
};

export enum CalloutContributionType {
  Link = 'LINK',
  Post = 'POST',
  Whiteboard = 'WHITEBOARD',
}

export type CalloutFraming = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The Profile for framing the associated Callout. */
  profile: Profile;
  /** The Whiteboard for framing the associated Callout. */
  whiteboard?: Maybe<Whiteboard>;
};

export type CalloutGroup = {
  /** The explation text to clarify the Group. */
  description: Scalars['Markdown'];
  /** The display name for the Group */
  displayName: CalloutGroupName;
};

export enum CalloutGroupName {
  Community = 'COMMUNITY',
  Contribute = 'CONTRIBUTE',
  Home = 'HOME',
  Knowledge = 'KNOWLEDGE',
  Subspaces = 'SUBSPACES',
}

export type CalloutPostCreated = {
  /** The identifier for the Callout on which the post was created. */
  calloutID: Scalars['String'];
  /** The post that has been created. */
  post: Post;
};

export enum CalloutState {
  Archived = 'ARCHIVED',
  Closed = 'CLOSED',
  Open = 'OPEN',
}

export type CalloutTemplate = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The defaults to use for Callouts created from this template.   */
  contributionDefaults: CalloutContributionDefaults;
  /** The response policy to use for Callouts created from this template.   */
  contributionPolicy: CalloutContributionPolicy;
  /** The framing for callouts created from this template. */
  framing: CalloutFraming;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The Profile for this template. */
  profile: Profile;
  /** The Callout type, e.g. Post, Whiteboard, Discussion */
  type: CalloutType;
};

export enum CalloutType {
  LinkCollection = 'LINK_COLLECTION',
  Post = 'POST',
  PostCollection = 'POST_COLLECTION',
  Whiteboard = 'WHITEBOARD',
  WhiteboardCollection = 'WHITEBOARD_COLLECTION',
}

export enum CalloutVisibility {
  Draft = 'DRAFT',
  Published = 'PUBLISHED',
}

export type ChatGuidanceAnswerRelevanceInput = {
  /** The answer id. */
  id: Scalars['UUID'];
  /** Is the answer relevant or not. */
  relevant: Scalars['Boolean'];
};

export type ChatGuidanceInput = {
  /** The language of the answer. */
  language?: InputMaybe<Scalars['String']>;
  /** The question that is being asked. */
  question: Scalars['String'];
};

export type Collaboration = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The list of Callouts for this Collaboration object. */
  callouts: Array<Callout>;
  /** The set of CalloutGroups in use in this Collaboration. */
  groups: Array<CalloutGroup>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The InnovationFlow for the Collaboration. */
  innovationFlow: InnovationFlow;
  /** List of relations */
  relations?: Maybe<Array<Relation>>;
  /** The tagset templates on this Collaboration. */
  tagsetTemplates?: Maybe<Array<TagsetTemplate>>;
  /** The timeline with events in use by this Space */
  timeline: Timeline;
};

export type CollaborationCalloutsArgs = {
  IDs?: InputMaybe<Array<Scalars['UUID_NAMEID']>>;
  groups?: InputMaybe<Array<Scalars['String']>>;
  limit?: InputMaybe<Scalars['Float']>;
  shuffle?: InputMaybe<Scalars['Boolean']>;
  sortByActivity?: InputMaybe<Scalars['Boolean']>;
  tagsets?: InputMaybe<Array<TagsetArgs>>;
};

export type Communication = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The updates on this Communication. */
  updates: Room;
};

export type CommunicationAdminEnsureAccessInput = {
  communityID: Scalars['UUID'];
};

export type CommunicationAdminMembershipInput = {
  communityID: Scalars['UUID'];
};

export type CommunicationAdminMembershipResult = {
  /** Display name of the result */
  displayName: Scalars['String'];
  /** A unique identifier for this comunication room membership result. */
  id: Scalars['String'];
  /** Rooms in this Communication */
  rooms: Array<CommunicationAdminRoomMembershipResult>;
};

export type CommunicationAdminOrphanedUsageResult = {
  /** Rooms in the Communication platform that are not used */
  rooms: Array<CommunicationAdminRoomResult>;
};

export type CommunicationAdminRemoveOrphanedRoomInput = {
  roomID: Scalars['String'];
};

export type CommunicationAdminRoomMembershipResult = {
  /** Display name of the entity */
  displayName: Scalars['String'];
  /** Members of the room that are not members of the Community. */
  extraMembers: Array<Scalars['String']>;
  /** A unique identifier for this membership result. */
  id: Scalars['String'];
  /** The access mode for the room. */
  joinRule: Scalars['String'];
  /** Name of the room */
  members: Array<Scalars['String']>;
  /** Members of the community that are missing from the room */
  missingMembers: Array<Scalars['String']>;
  /** The matrix room ID */
  roomID: Scalars['String'];
};

export type CommunicationAdminRoomResult = {
  /** Display name of the result */
  displayName: Scalars['String'];
  /** The identifier for the orphaned room. */
  id: Scalars['String'];
  /** The members of the orphaned room */
  members: Array<Scalars['String']>;
};

export type CommunicationAdminUpdateRoomsJoinRuleInput = {
  isPublic: Scalars['Boolean'];
};

export type CommunicationRoom = {
  /** The display name of the room */
  displayName: Scalars['String'];
  /** The identifier of the room */
  id: Scalars['String'];
  /** The messages that have been sent to the Room. */
  messages: Array<Message>;
};

export type CommunicationSendMessageToCommunityLeadsInput = {
  /** The Community the message is being sent to */
  communityId: Scalars['UUID'];
  /** The message being sent */
  message: Scalars['String'];
};

export type CommunicationSendMessageToOrganizationInput = {
  /** The message being sent */
  message: Scalars['String'];
  /** The Organization the message is being sent to */
  organizationId: Scalars['UUID'];
};

export type CommunicationSendMessageToUserInput = {
  /** The message being sent */
  message: Scalars['String'];
  /** All Users the message is being sent to */
  receiverIds: Array<Scalars['UUID']>;
};

export type Community = Groupable & {
  /** The Form used for Applications to this community. */
  applicationForm: Form;
  /** Applications available for this community. */
  applications: Array<Application>;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** All member users excluding the current lead users in this Community. */
  availableLeadUsers: PaginatedUsers;
  /** All available users that are potential Community members. */
  availableMemberUsers: PaginatedUsers;
  /** The Communications for this Community. */
  communication: Communication;
  /** The user group with the specified id anywhere in the space */
  group: UserGroup;
  /** Groups of users related to a Community. */
  groups: Array<UserGroup>;
  /** The guidelines for members of this Community. */
  guidelines: CommunityGuidelines;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** Invitations for this community. */
  invitations: Array<Invitation>;
  /** Invitations to join this Community for users not yet on the Alkemio platform. */
  invitationsExternal: Array<InvitationExternal>;
  /** All users that are contributing to this Community. */
  memberUsers: Array<User>;
  /** The membership status of the currently logged in user. */
  myMembershipStatus?: Maybe<CommunityMembershipStatus>;
  /** The roles on this community for the currently logged in user. */
  myRoles: Array<CommunityRole>;
  /** The implicit roles on this community for the currently logged in user. */
  myRolesImplicit: Array<CommunityRoleImplicit>;
  /** All Organizations that have the specified Role in this Community. */
  organizationsInRole: Array<Organization>;
  /** The policy that defines the roles for this Community. */
  policy: CommunityPolicy;
  /** All users that have the specified Role in this Community. */
  usersInRole: Array<User>;
  /** All virtuals that have the specified Role in this Community. */
  virtualContributorsInRole: Array<VirtualContributor>;
};

export type CommunityAvailableLeadUsersArgs = {
  after?: InputMaybe<Scalars['UUID']>;
  before?: InputMaybe<Scalars['UUID']>;
  filter?: InputMaybe<UserFilterInput>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type CommunityAvailableMemberUsersArgs = {
  after?: InputMaybe<Scalars['UUID']>;
  before?: InputMaybe<Scalars['UUID']>;
  filter?: InputMaybe<UserFilterInput>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type CommunityGroupArgs = {
  ID: Scalars['UUID'];
};

export type CommunityMemberUsersArgs = {
  limit?: InputMaybe<Scalars['Float']>;
};

export type CommunityOrganizationsInRoleArgs = {
  role: CommunityRole;
};

export type CommunityUsersInRoleArgs = {
  role: CommunityRole;
};

export type CommunityVirtualContributorsInRoleArgs = {
  role: CommunityRole;
};

export type CommunityApplicationForRoleResult = {
  /** ID for the community */
  communityID: Scalars['UUID'];
  /** Date of creation */
  createdDate: Scalars['DateTime'];
  /** Display name of the community */
  displayName: Scalars['String'];
  /** ID for the application */
  id: Scalars['UUID'];
  /** ID for the ultimate containing Space */
  spaceID: Scalars['UUID'];
  /** Nesting level of the Space */
  spaceLevel: Scalars['Float'];
  /** The current state of the application. */
  state: Scalars['String'];
  /** Date of last update */
  updatedDate: Scalars['DateTime'];
};

export type CommunityApplicationResult = {
  /** The application itself */
  application: Application;
  /** ID for the pending membership */
  id: Scalars['UUID'];
  /** The space that the application is for */
  space: Space;
};

export type CommunityApplyInput = {
  communityID: Scalars['UUID'];
  questions: Array<CreateNvpInput>;
};

export enum CommunityContributorType {
  Organization = 'ORGANIZATION',
  User = 'USER',
  Virtual = 'VIRTUAL',
}

export type CommunityGuidelines = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The details of the guidelilnes */
  profile: Profile;
};

export type CommunityGuidelinesTemplate = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The community guidelines. */
  guidelines: CommunityGuidelines;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The Profile for this template. */
  profile: Profile;
};

export type CommunityInvitationForRoleResult = {
  /** ID for the community */
  communityID: Scalars['UUID'];
  /** ID for Contrbutor that is being invited to a community */
  contributorID: Scalars['UUID'];
  /** The Type of the Contrbutor that is being invited to a community */
  contributorType: CommunityContributorType;
  /** ID for the user that created the invitation. */
  createdBy: Scalars['UUID'];
  /** Date of creation */
  createdDate: Scalars['DateTime'];
  /** Display name of the community */
  displayName: Scalars['String'];
  /** ID for the Invitation */
  id: Scalars['UUID'];
  /** ID for the ultimate containing Space */
  spaceID: Scalars['UUID'];
  /** Nesting level of the Space */
  spaceLevel: Scalars['Float'];
  /** The current state of the invitation. */
  state: Scalars['String'];
  /** Date of last update */
  updatedDate: Scalars['DateTime'];
  /** The welcome message of the invitation */
  welcomeMessage?: Maybe<Scalars['UUID']>;
};

export type CommunityInvitationResult = {
  /** ID for the pending membership */
  id: Scalars['UUID'];
  /** The invitation itself */
  invitation: Invitation;
  /** The space that the application is for */
  space: Space;
};

export type CommunityJoinInput = {
  communityID: Scalars['UUID'];
};

export enum CommunityMembershipPolicy {
  Applications = 'APPLICATIONS',
  Invitations = 'INVITATIONS',
  Open = 'OPEN',
}

export enum CommunityMembershipStatus {
  ApplicationPending = 'APPLICATION_PENDING',
  InvitationPending = 'INVITATION_PENDING',
  Member = 'MEMBER',
  NotMember = 'NOT_MEMBER',
}

export type CommunityPolicy = {
  /** The role policy that defines the Admins for this Community. */
  admin: CommunityRolePolicy;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The role policy that defines the leads for this Community. */
  lead: CommunityRolePolicy;
  /** The role policy that defines the members for this Community. */
  member: CommunityRolePolicy;
};

export enum CommunityRole {
  Admin = 'ADMIN',
  Lead = 'LEAD',
  Member = 'MEMBER',
}

export enum CommunityRoleImplicit {
  SubspaceAdmin = 'SUBSPACE_ADMIN',
}

export type CommunityRolePolicy = {
  /** The CredentialDefinition that is associated with this role */
  credential: CredentialDefinition;
  /** Is this role enabled for this Community */
  enabled: Scalars['Boolean'];
  /** Maximum number of Organizations in this role */
  maxOrg: Scalars['Float'];
  /** Maximum number of Users in this role */
  maxUser: Scalars['Float'];
  /** Minimun number of Organizations in this role */
  minOrg: Scalars['Float'];
  /** Minimum number of Users in this role */
  minUser: Scalars['Float'];
  /** The CredentialDefinitions associated with this role in parent communities */
  parentCredentials: Array<CredentialDefinition>;
};

export type Config = {
  /** Elastic APM (RUM & performance monitoring) related configuration. */
  apm: Apm;
  /** Authentication configuration. */
  authentication: AuthenticationConfig;
  /** The feature flags for the platform */
  featureFlags: Array<PlatformFeatureFlag>;
  /** Integration with a 3rd party Geo information service */
  geo: Geo;
  /** Platform related locations. */
  locations: PlatformLocations;
  /** Sentry (client monitoring) related configuration. */
  sentry: Sentry;
  /** Configuration for storage providers, e.g. file */
  storage: StorageConfig;
};

export enum ContentUpdatePolicy {
  Admins = 'ADMINS',
  Contributors = 'CONTRIBUTORS',
  Owner = 'OWNER',
}

export type Context = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** What is the potential impact? */
  impact?: Maybe<Scalars['Markdown']>;
  /** The goal that is being pursued */
  vision?: Maybe<Scalars['Markdown']>;
  /** Who should get involved in this challenge */
  who?: Maybe<Scalars['Markdown']>;
};

export type Contributor = {
  /** The Agent for the Contributor. */
  agent: Agent;
  /** The authorization rules for the Contributor */
  authorization?: Maybe<Authorization>;
  /** The ID of the Contributor */
  id: Scalars['UUID'];
  /** A name identifier of the Contributor, unique within a given scope. */
  nameID: Scalars['NameID'];
  /** The profile for the Contributor. */
  profile: Profile;
};

export type ContributorFilterInput = {
  /** Return contributors with credentials in the provided list */
  credentials?: InputMaybe<Array<AuthorizationCredential>>;
};

export type ContributorRoles = {
  /** The applications for the specified user; only accessible for platform admins */
  applications: Array<CommunityApplicationForRoleResult>;
  id: Scalars['UUID'];
  /** The invitations for the specified user; only accessible for platform admins */
  invitations: Array<CommunityInvitationForRoleResult>;
  /** Details of the roles the contributor has in Organizations */
  organizations: Array<RolesResultOrganization>;
  /** Details of Spaces the User or Organization is a member of, with child memberships - if Space is accessible for the current user. */
  spaces: Array<RolesResultSpace>;
};

export type ContributorRolesApplicationsArgs = {
  states?: InputMaybe<Array<Scalars['String']>>;
};

export type ContributorRolesInvitationsArgs = {
  states?: InputMaybe<Array<Scalars['String']>>;
};

export type ConvertSubspaceToSpaceInput = {
  /** The subspace to be promoted to be a new Space. Note: the original Subspace will no longer exist after the conversion.  */
  subspaceID: Scalars['UUID_NAMEID'];
};

export type ConvertSubsubspaceToSubspaceInput = {
  /** The subsubspace to be promoted. Note: the original Opportunity will no longer exist after the conversion.  */
  subsubspaceID: Scalars['UUID_NAMEID'];
};

export type CreateAccountInput = {
  /** The host Organization or User for the account */
  hostID: Scalars['UUID_NAMEID'];
  /** The license plan selected for the account */
  licensePlanID?: InputMaybe<Scalars['UUID']>;
  /** The root Space to be created. */
  spaceData: CreateSpaceInput;
};

export type CreateActorGroupInput = {
  description?: InputMaybe<Scalars['String']>;
  ecosystemModelID: Scalars['UUID'];
  name: Scalars['String'];
};

export type CreateActorInput = {
  actorGroupID: Scalars['UUID'];
  description?: InputMaybe<Scalars['String']>;
  impact?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  value?: InputMaybe<Scalars['String']>;
};

export type CreateAiPersonaInput = {
  aiPersonaService?: InputMaybe<CreateAiPersonaServiceInput>;
  aiPersonaServiceID?: InputMaybe<Scalars['UUID']>;
  bodyOfKnowledge?: InputMaybe<Scalars['Markdown']>;
  description?: InputMaybe<Scalars['Markdown']>;
};

export type CreateAiPersonaServiceInput = {
  bodyOfKnowledgeID?: InputMaybe<Scalars['UUID']>;
  bodyOfKnowledgeType?: InputMaybe<AiPersonaBodyOfKnowledgeType>;
  dataAccessMode?: InputMaybe<AiPersonaDataAccessMode>;
  engine?: InputMaybe<AiPersonaEngine>;
  prompt?: InputMaybe<Scalars['JSON']>;
};

export type CreateCalendarEventOnCalendarInput = {
  calendarID: Scalars['UUID'];
  /** The length of the event in days. */
  durationDays?: InputMaybe<Scalars['Float']>;
  /** The length of the event in minutes. */
  durationMinutes: Scalars['Float'];
  /** Flag to indicate if this event is for multiple days. */
  multipleDays: Scalars['Boolean'];
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']>;
  profileData: CreateProfileInput;
  /** The start date for the event. */
  startDate: Scalars['DateTime'];
  tags?: InputMaybe<Array<Scalars['String']>>;
  type: CalendarEventType;
  /** Flag to indicate if this event is for a whole day. */
  wholeDay: Scalars['Boolean'];
};

export type CreateCalloutContributionDefaultsInput = {
  /** The default description to use for new Post contributions. */
  postDescription?: InputMaybe<Scalars['Markdown']>;
  whiteboardContent?: InputMaybe<Scalars['WhiteboardContent']>;
};

export type CreateCalloutContributionPolicyInput = {
  /** State of the callout. */
  state?: InputMaybe<CalloutState>;
};

export type CreateCalloutFramingInput = {
  profile: CreateProfileInput;
  tags?: InputMaybe<Array<Scalars['String']>>;
  whiteboard?: InputMaybe<CreateWhiteboardInput>;
};

export type CreateCalloutOnCollaborationInput = {
  collaborationID: Scalars['UUID'];
  contributionDefaults?: InputMaybe<CreateCalloutContributionDefaultsInput>;
  contributionPolicy?: InputMaybe<CreateCalloutContributionPolicyInput>;
  framing: CreateCalloutFramingInput;
  /** Set Callout Group for this Callout. */
  groupName?: InputMaybe<Scalars['String']>;
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']>;
  /** Send notification if this flag is true and visibility is PUBLISHED. Defaults to false. */
  sendNotification?: InputMaybe<Scalars['Boolean']>;
  /** The sort order to assign to this Callout. */
  sortOrder?: InputMaybe<Scalars['Float']>;
  /** Callout type. */
  type: CalloutType;
  /** Visibility of the Callout. Defaults to DRAFT. */
  visibility?: InputMaybe<CalloutVisibility>;
};

export type CreateCalloutTemplateOnTemplatesSetInput = {
  contributionDefaults: CreateCalloutContributionDefaultsInput;
  contributionPolicy: CreateCalloutContributionPolicyInput;
  framing: CreateCalloutFramingInput;
  /** The profile of the template. */
  profile: CreateProfileInput;
  tags?: InputMaybe<Array<Scalars['String']>>;
  templatesSetID: Scalars['UUID'];
  /** Callout type. */
  type: CalloutType;
  visualUri?: InputMaybe<Scalars['String']>;
};

export type CreateCollaborationInput = {
  /** Add default callouts to the Collaboration; defaults to true. */
  addDefaultCallouts?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the Collaboration to use for setting up the collaboration of the Collaboration. */
  collaborationTemplateID?: InputMaybe<Scalars['UUID']>;
  /** The Innovation Flow template to use for the Collaboration. */
  innovationFlowTemplateID?: InputMaybe<Scalars['UUID']>;
};

export type CreateCommunityGuidelinesInput = {
  profile: CreateProfileInput;
};

export type CreateCommunityGuidelinesTemplateOnTemplatesSetInput = {
  /** The Community guidelines to associate with this template. */
  communityGuidelines?: InputMaybe<CreateCommunityGuidelinesInput>;
  /** The ID of the Community guidelines to associate with this template. */
  communityGuidelinesID?: InputMaybe<Scalars['String']>;
  /** The profile of the template. */
  profile: CreateProfileInput;
  tags?: InputMaybe<Array<Scalars['String']>>;
  templatesSetID: Scalars['UUID'];
  visualUri?: InputMaybe<Scalars['String']>;
};

export type CreateContextInput = {
  impact?: InputMaybe<Scalars['Markdown']>;
  vision?: InputMaybe<Scalars['Markdown']>;
  who?: InputMaybe<Scalars['Markdown']>;
};

export type CreateContributionOnCalloutInput = {
  calloutID: Scalars['UUID'];
  link?: InputMaybe<CreateLinkInput>;
  post?: InputMaybe<CreatePostInput>;
  whiteboard?: InputMaybe<CreateWhiteboardInput>;
};

export type CreateInnovationFlowTemplateOnTemplatesSetInput = {
  /** The profile of the template. */
  profile: CreateProfileInput;
  states?: InputMaybe<Array<UpdateInnovationFlowStateInput>>;
  tags?: InputMaybe<Array<Scalars['String']>>;
  templatesSetID: Scalars['UUID'];
  visualUri?: InputMaybe<Scalars['String']>;
};

export type CreateInnovationHubInput = {
  /** Account ID, associated with the Innovation Hub. */
  accountID?: InputMaybe<Scalars['UUID']>;
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']>;
  profileData: CreateProfileInput;
  /** A list of Spaces to include in this Innovation Hub. Only valid when type 'list' is used. */
  spaceListFilter?: InputMaybe<Array<Scalars['UUID']>>;
  /** Spaces with which visibility this Innovation Hub will display. Only valid when type 'visibility' is used. */
  spaceVisibilityFilter?: InputMaybe<SpaceVisibility>;
  /** The subdomain to associate the Innovation Hub with. */
  subdomain: Scalars['String'];
  /** The type of Innovation Hub. */
  type: InnovationHubType;
};

export type CreateInnovationPackOnLibraryInput = {
  /** A readable identifier, unique within the containing scope. */
  nameID: Scalars['NameID'];
  profileData: CreateProfileInput;
  /** The provider Organization for the InnovationPack */
  providerID: Scalars['UUID_NAMEID'];
  tags?: InputMaybe<Array<Scalars['String']>>;
};

export type CreateInvitationForContributorsOnCommunityInput = {
  communityID: Scalars['UUID'];
  /** The identifiers for the contributors being invited. */
  invitedContributors: Array<Scalars['UUID']>;
  welcomeMessage?: InputMaybe<Scalars['String']>;
};

export type CreateInvitationUserByEmailOnCommunityInput = {
  communityID: Scalars['UUID'];
  email: Scalars['String'];
  firstName?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  welcomeMessage?: InputMaybe<Scalars['String']>;
};

export type CreateLicensePlanOnLicensingInput = {
  /** Assign this plan to all new Organization accounts */
  assignToNewOrganizationAccounts: Scalars['Boolean'];
  /** Assign this plan to all new User accounts */
  assignToNewUserAccounts: Scalars['Boolean'];
  /** Is this plan enabled? */
  enabled: Scalars['Boolean'];
  /** Is this plan free? */
  isFree: Scalars['Boolean'];
  /** The credential to represent this plan */
  licenseCredential: LicenseCredential;
  licensingID: Scalars['UUID'];
  /** The name of the License Plan */
  name: Scalars['String'];
  /** The price per month of this plan. */
  pricePerMonth?: InputMaybe<Scalars['Float']>;
  /** Does this plan require contact support */
  requiresContactSupport: Scalars['Boolean'];
  /** Does this plan require a payment method? */
  requiresPaymentMethod: Scalars['Boolean'];
  /** The sorting order for this Plan. */
  sortOrder: Scalars['Float'];
  /** Is there a trial period enabled */
  trialEnabled: Scalars['Boolean'];
  /** The type of this License Plan. */
  type: LicensePlanType;
};

export type CreateLinkInput = {
  profile: CreateProfileInput;
  uri?: InputMaybe<Scalars['String']>;
};

export type CreateLocationInput = {
  addressLine1?: InputMaybe<Scalars['String']>;
  addressLine2?: InputMaybe<Scalars['String']>;
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  stateOrProvince?: InputMaybe<Scalars['String']>;
};

export type CreateNvpInput = {
  name: Scalars['String'];
  sortOrder: Scalars['Float'];
  value: Scalars['String'];
};

export type CreateOrganizationInput = {
  contactEmail?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  legalEntityName?: InputMaybe<Scalars['String']>;
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']>;
  profileData: CreateProfileInput;
  website?: InputMaybe<Scalars['String']>;
};

export type CreatePostInput = {
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']>;
  profileData: CreateProfileInput;
  tags?: InputMaybe<Array<Scalars['String']>>;
  type: Scalars['String'];
  visualUri?: InputMaybe<Scalars['String']>;
};

export type CreatePostTemplateOnTemplatesSetInput = {
  /** The default description to be pre-filled when users create Posts based on this template. */
  defaultDescription?: InputMaybe<Scalars['Markdown']>;
  /** The profile of the template. */
  profile: CreateProfileInput;
  tags?: InputMaybe<Array<Scalars['String']>>;
  templatesSetID: Scalars['UUID'];
  /** The type of Posts created from this Template. */
  type: Scalars['String'];
  visualUri?: InputMaybe<Scalars['String']>;
};

export type CreateProfileInput = {
  /** The URL of the avatar of the user */
  avatarURL?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['Markdown']>;
  /** The display name for the entity. */
  displayName: Scalars['String'];
  location?: InputMaybe<CreateLocationInput>;
  referencesData?: InputMaybe<Array<CreateReferenceInput>>;
  /** A memorable short description for this entity. */
  tagline?: InputMaybe<Scalars['String']>;
  tagsets?: InputMaybe<Array<CreateTagsetInput>>;
};

export type CreateReferenceInput = {
  description?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  uri?: InputMaybe<Scalars['String']>;
};

export type CreateReferenceOnProfileInput = {
  description?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  profileID: Scalars['UUID'];
  uri?: InputMaybe<Scalars['String']>;
};

export type CreateRelationOnCollaborationInput = {
  actorName: Scalars['String'];
  actorRole?: InputMaybe<Scalars['String']>;
  actorType?: InputMaybe<Scalars['String']>;
  collaborationID: Scalars['UUID'];
  description?: InputMaybe<Scalars['String']>;
  type: Scalars['String'];
};

export type CreateSpaceInput = {
  collaborationData?: InputMaybe<CreateCollaborationInput>;
  context?: InputMaybe<CreateContextInput>;
  /** A readable identifier, unique within the containing Account. */
  nameID?: InputMaybe<Scalars['NameID']>;
  profileData: CreateProfileInput;
  tags?: InputMaybe<Array<Scalars['String']>>;
  type?: InputMaybe<SpaceType>;
};

export type CreateSubspaceInput = {
  collaborationData?: InputMaybe<CreateCollaborationInput>;
  context?: InputMaybe<CreateContextInput>;
  /** A readable identifier, unique within the containing Account. */
  nameID?: InputMaybe<Scalars['NameID']>;
  profileData: CreateProfileInput;
  spaceID: Scalars['UUID_NAMEID'];
  tags?: InputMaybe<Array<Scalars['String']>>;
  type?: InputMaybe<SpaceType>;
};

export type CreateTagsetInput = {
  name: Scalars['String'];
  tags?: InputMaybe<Array<Scalars['String']>>;
  type?: InputMaybe<TagsetType>;
};

export type CreateTagsetOnProfileInput = {
  name: Scalars['String'];
  profileID?: InputMaybe<Scalars['UUID']>;
  tags?: InputMaybe<Array<Scalars['String']>>;
  type?: InputMaybe<TagsetType>;
};

export type CreateUserGroupInput = {
  parentID: Scalars['UUID'];
  profile: CreateProfileInput;
};

export type CreateUserInput = {
  accountUpn?: InputMaybe<Scalars['String']>;
  email: Scalars['String'];
  firstName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']>;
  phone?: InputMaybe<Scalars['String']>;
  profileData: CreateProfileInput;
};

export type CreateVirtualContributorOnAccountInput = {
  accountID: Scalars['UUID'];
  /** Data used to create the AI Persona */
  aiPersona: CreateAiPersonaInput;
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']>;
  profileData: CreateProfileInput;
};

export type CreateWhiteboardInput = {
  content?: InputMaybe<Scalars['WhiteboardContent']>;
  /** A readable identifier, unique within the containing scope. If not provided it will be generated based on the displayName. */
  nameID?: InputMaybe<Scalars['NameID']>;
  profileData: CreateProfileInput;
};

export type CreateWhiteboardTemplateOnTemplatesSetInput = {
  content?: InputMaybe<Scalars['WhiteboardContent']>;
  /** The profile of the template. */
  profile: CreateProfileInput;
  tags?: InputMaybe<Array<Scalars['String']>>;
  templatesSetID: Scalars['UUID'];
  visualUri?: InputMaybe<Scalars['String']>;
  /** Use the specified Whiteboard as the initial value for this WhiteboardTemplate */
  whiteboardID?: InputMaybe<Scalars['UUID']>;
};

export type Credential = {
  /** The timestamp for the expiry of this credential. */
  expires?: Maybe<Scalars['Float']>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The User issuing the credential */
  issuer?: Maybe<Scalars['UUID']>;
  resourceID: Scalars['String'];
  type: CredentialType;
};

export type CredentialDefinition = {
  /** The resourceID for this CredentialDefinition */
  resourceID: Scalars['String'];
  /** The type for this CredentialDefinition */
  type: Scalars['String'];
};

export type CredentialMetadataOutput = {
  /** A json description of what the claim contains and schema validation definition */
  context: Scalars['String'];
  /** The purpose of the credential */
  description: Scalars['String'];
  /** The display name of the credential */
  name: Scalars['String'];
  /** The schema that the credential will be validated against */
  schema: Scalars['String'];
  /** The credential types that are associated with this credential */
  types: Array<Scalars['String']>;
  /** System recognized unique type for the credential */
  uniqueType: Scalars['String'];
};

export enum CredentialType {
  AccountHost = 'ACCOUNT_HOST',
  BetaTester = 'BETA_TESTER',
  FeatureCalloutToCalloutTemplate = 'FEATURE_CALLOUT_TO_CALLOUT_TEMPLATE',
  FeatureVirtualContributors = 'FEATURE_VIRTUAL_CONTRIBUTORS',
  FeatureWhiteboardMultiUser = 'FEATURE_WHITEBOARD_MULTI_USER',
  GlobalAdmin = 'GLOBAL_ADMIN',
  GlobalCommunityRead = 'GLOBAL_COMMUNITY_READ',
  GlobalLicenseManager = 'GLOBAL_LICENSE_MANAGER',
  GlobalRegistered = 'GLOBAL_REGISTERED',
  GlobalSpacesReader = 'GLOBAL_SPACES_READER',
  GlobalSupport = 'GLOBAL_SUPPORT',
  InnovationPackProvider = 'INNOVATION_PACK_PROVIDER',
  LicenseSpaceEnterprise = 'LICENSE_SPACE_ENTERPRISE',
  LicenseSpaceFree = 'LICENSE_SPACE_FREE',
  LicenseSpacePlus = 'LICENSE_SPACE_PLUS',
  LicenseSpacePremium = 'LICENSE_SPACE_PREMIUM',
  OrganizationAdmin = 'ORGANIZATION_ADMIN',
  OrganizationAssociate = 'ORGANIZATION_ASSOCIATE',
  OrganizationOwner = 'ORGANIZATION_OWNER',
  SpaceAdmin = 'SPACE_ADMIN',
  SpaceLead = 'SPACE_LEAD',
  SpaceMember = 'SPACE_MEMBER',
  SpaceSubspaceAdmin = 'SPACE_SUBSPACE_ADMIN',
  UserGroupMember = 'USER_GROUP_MEMBER',
  UserSelfManagement = 'USER_SELF_MANAGEMENT',
}

export type DeleteActorGroupInput = {
  ID: Scalars['UUID'];
};

export type DeleteActorInput = {
  ID: Scalars['UUID'];
};

export type DeleteAiPersonaServiceInput = {
  ID: Scalars['UUID'];
};

export type DeleteApplicationInput = {
  ID: Scalars['UUID'];
};

export type DeleteCalendarEventInput = {
  ID: Scalars['UUID'];
};

export type DeleteCalloutInput = {
  ID: Scalars['UUID'];
};

export type DeleteCalloutTemplateInput = {
  ID: Scalars['UUID'];
};

export type DeleteCollaborationInput = {
  ID: Scalars['UUID'];
};

export type DeleteCommunityGuidelinesTemplateInput = {
  ID: Scalars['UUID'];
};

export type DeleteDiscussionInput = {
  ID: Scalars['UUID'];
};

export type DeleteDocumentInput = {
  ID: Scalars['UUID'];
};

export type DeleteInnovationFlowTemplateInput = {
  ID: Scalars['UUID'];
};

export type DeleteInnovationHubInput = {
  ID: Scalars['UUID'];
};

export type DeleteInnovationPackInput = {
  ID: Scalars['UUID_NAMEID'];
};

export type DeleteInvitationExternalInput = {
  ID: Scalars['UUID'];
};

export type DeleteInvitationInput = {
  ID: Scalars['UUID'];
};

export type DeleteLicensePlanInput = {
  ID: Scalars['UUID'];
};

export type DeleteLinkInput = {
  ID: Scalars['UUID'];
};

export type DeleteOrganizationInput = {
  ID: Scalars['UUID_NAMEID'];
};

export type DeletePostInput = {
  ID: Scalars['UUID'];
};

export type DeletePostTemplateInput = {
  ID: Scalars['UUID'];
};

export type DeleteReferenceInput = {
  ID: Scalars['UUID'];
};

export type DeleteRelationInput = {
  ID: Scalars['String'];
};

export type DeleteSpaceInput = {
  ID: Scalars['UUID_NAMEID'];
};

export type DeleteStorageBuckeetInput = {
  ID: Scalars['UUID'];
};

export type DeleteUserGroupInput = {
  ID: Scalars['UUID'];
};

export type DeleteUserInput = {
  ID: Scalars['UUID_NAMEID_EMAIL'];
};

export type DeleteVirtualContributorInput = {
  ID: Scalars['UUID_NAMEID'];
};

export type DeleteWhiteboardInput = {
  ID: Scalars['UUID'];
};

export type DeleteWhiteboardTemplateInput = {
  ID: Scalars['UUID'];
};

export type DirectRoom = {
  /** The display name of the room */
  displayName: Scalars['String'];
  /** The identifier of the direct room */
  id: Scalars['String'];
  /** The messages that have been sent to the Direct Room. */
  messages: Array<Message>;
  /** The recepient userID */
  receiverID?: Maybe<Scalars['String']>;
};

export type Discussion = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The category assigned to this Discussion. */
  category: ForumDiscussionCategory;
  /** The comments for this Discussion. */
  comments: Room;
  /** The id of the user that created this discussion */
  createdBy?: Maybe<Scalars['UUID']>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID'];
  /** Privacy mode for the Discussion. Note: this is not yet implemented in the authorization policy. */
  privacy: ForumDiscussionPrivacy;
  /** The Profile for this Discussion. */
  profile: Profile;
  /** The timestamp for the creation of this Discussion. */
  timestamp?: Maybe<Scalars['Float']>;
};

export type DiscussionsInput = {
  /** The number of Discussion entries to return; if omitted return all Discussions. */
  limit?: InputMaybe<Scalars['Float']>;
  /** The sort order of the Discussions to return. */
  orderBy?: InputMaybe<DiscussionsOrderBy>;
};

export enum DiscussionsOrderBy {
  DiscussionsCreatedateAsc = 'DISCUSSIONS_CREATEDATE_ASC',
  DiscussionsCreatedateDesc = 'DISCUSSIONS_CREATEDATE_DESC',
}

export type Document = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The user that created this Document */
  createdBy?: Maybe<User>;
  /** The display name. */
  displayName: Scalars['String'];
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** Mime type for this Document. */
  mimeType: MimeType;
  /** Size of the Document. */
  size: Scalars['Float'];
  /** The tagset in use on this Document. */
  tagset: Tagset;
  /** The uploaded date of this Document */
  uploadedDate: Scalars['DateTime'];
  /** The URL to be used to retrieve the Document */
  url: Scalars['String'];
};

export type EcosystemModel = {
  /** A list of ActorGroups */
  actorGroups?: Maybe<Array<ActorGroup>>;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** Overview of this ecosystem model. */
  description?: Maybe<Scalars['String']>;
  /** The ID of the entity */
  id: Scalars['UUID'];
};

export type FileStorageConfig = {
  /** Max file size, in bytes. */
  maxFileSize: Scalars['Float'];
  /** Allowed mime types for file upload, separated by a coma. */
  mimeTypes: Array<Scalars['String']>;
};

export type Form = {
  /** A description of the purpose of this Form. */
  description?: Maybe<Scalars['Markdown']>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The set of Questions in this Form. */
  questions: Array<FormQuestion>;
};

export type FormQuestion = {
  /** The explation text to clarify the question. */
  explanation: Scalars['String'];
  /** The maxiumum length of the answer, in characters, up to a limit of 512. */
  maxLength: Scalars['Float'];
  /** The question to be answered */
  question: Scalars['String'];
  /** Whether this Question requires an answer or not. */
  required: Scalars['Boolean'];
  /** The sort order of this question in a wider set of questions. */
  sortOrder: Scalars['Float'];
};

export type Forum = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** A particular Discussions active in this Forum. */
  discussion?: Maybe<Discussion>;
  discussionCategories: Array<ForumDiscussionCategory>;
  /** The Discussions active in this Forum. */
  discussions?: Maybe<Array<Discussion>>;
  /** The ID of the entity */
  id: Scalars['UUID'];
};

export type ForumDiscussionArgs = {
  ID: Scalars['String'];
};

export type ForumDiscussionsArgs = {
  queryData?: InputMaybe<DiscussionsInput>;
};

export type ForumCreateDiscussionInput = {
  /** The category for the Discussion */
  category: ForumDiscussionCategory;
  /** The identifier for the Forum entity the Discussion is being created on. */
  forumID: Scalars['UUID'];
  profile: CreateProfileInput;
  tags?: InputMaybe<Array<Scalars['String']>>;
};

export enum ForumDiscussionCategory {
  ChallengeCentric = 'CHALLENGE_CENTRIC',
  CommunityBuilding = 'COMMUNITY_BUILDING',
  Help = 'HELP',
  Other = 'OTHER',
  PlatformFunctionalities = 'PLATFORM_FUNCTIONALITIES',
  Releases = 'RELEASES',
}

export enum ForumDiscussionPrivacy {
  Authenticated = 'AUTHENTICATED',
  Author = 'AUTHOR',
  Public = 'PUBLIC',
}

export type Geo = {
  /** Endpoint where geo information is consumed from. */
  endpoint: Scalars['String'];
};

export type GrantAuthorizationCredentialInput = {
  /** The resource to which this credential is tied. */
  resourceID?: InputMaybe<Scalars['UUID']>;
  type: AuthorizationCredential;
  /** The user to whom the credential is being granted. */
  userID: Scalars['UUID_NAMEID_EMAIL'];
};

export type GrantOrganizationAuthorizationCredentialInput = {
  /** The Organization to whom the credential is being granted. */
  organizationID: Scalars['UUID'];
  /** The resource to which this credential is tied. */
  resourceID?: InputMaybe<Scalars['UUID']>;
  type: AuthorizationCredential;
};

export type Groupable = {
  /** The groups contained by this entity. */
  groups?: Maybe<Array<UserGroup>>;
};

export type ISearchResults = {
  /** The search results for Callouts. */
  calloutResults: Array<SearchResult>;
  /** The total number of results for Callouts. */
  calloutResultsCount: Scalars['Float'];
  /** The search results for contributions (Posts, Whiteboards etc). */
  contributionResults: Array<SearchResult>;
  /** The total number of search results for contributions (Posts, Whiteboards etc). */
  contributionResultsCount: Scalars['Float'];
  /** The search results for contributors (Users, Organizations). */
  contributorResults: Array<SearchResult>;
  /** The total number of search results for contributors (Users, Organizations). */
  contributorResultsCount: Scalars['Float'];
  /** The search results for Groups. */
  groupResults: Array<SearchResult>;
  /** The search results for Spaces / Subspaces. */
  journeyResults: Array<SearchResult>;
  /** The total number of results for Spaces / Subspaces. */
  journeyResultsCount: Scalars['Float'];
};

export type IngestSpaceInput = {
  /** The purpose of the ingestions - either knowledge or context. */
  purpose: SpaceIngestionPurpose;
  /** The identifier for the Space to be ingested. */
  spaceID: Scalars['UUID'];
};

export type InnovationFlow = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The currently selected state for this Flow. */
  currentState: InnovationFlowState;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The Profile for this InnovationFlow. */
  profile: Profile;
  /** The set of States in use in this Flow. */
  states: Array<InnovationFlowState>;
};

export type InnovationFlowState = {
  /** The explation text to clarify the state. */
  description: Scalars['Markdown'];
  /** The display name for the State */
  displayName: Scalars['String'];
};

export type InnovationFlowTemplate = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The Profile for this template. */
  profile: Profile;
  /** The set of States in use in this Flow. */
  states: Array<InnovationFlowState>;
};

export type InnovationHub = {
  /** The Innovation Hub account. */
  account: Account;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID'];
  /** The Innovation Hub profile. */
  profile: Profile;
  spaceListFilter?: Maybe<Array<Space>>;
  /** If defined, what type of visibility to filter the Spaces on. You can have only one type of filter active at any given time. */
  spaceVisibilityFilter?: Maybe<SpaceVisibility>;
  /** The subdomain associated with this Innovation Hub. */
  subdomain: Scalars['String'];
  /** Type of Innovation Hub */
  type: InnovationHubType;
};

export enum InnovationHubType {
  List = 'LIST',
  Visibility = 'VISIBILITY',
}

export type InnovationPack = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID'];
  /** The Profile for this InnovationPack. */
  profile: Profile;
  /** The InnovationPack provider. */
  provider?: Maybe<Organization>;
  /** The templates in use by this InnovationPack */
  templates?: Maybe<TemplatesSet>;
};

export type InnovationPacksInput = {
  /** The number of Discussion entries to return; if omitted return all InnovationPacks. */
  limit?: InputMaybe<Scalars['Float']>;
  /** The sort order of the InnovationPacks to return. Defaults to number of templates Descending. */
  orderBy?: InputMaybe<InnovationPacksOrderBy>;
};

export enum InnovationPacksOrderBy {
  NumberOfTemplatesAsc = 'NUMBER_OF_TEMPLATES_ASC',
  NumberOfTemplatesDesc = 'NUMBER_OF_TEMPLATES_DESC',
  Random = 'RANDOM',
}

export type Invitation = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The Contributor who is invited. */
  contributor: Contributor;
  /** The type of contributor that is invited. */
  contributorType: CommunityContributorType;
  /** The User who triggered the invitation. */
  createdBy: User;
  createdDate: Scalars['DateTime'];
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** Whether to also add the invited contributor to the parent community. */
  invitedToParent: Scalars['Boolean'];
  lifecycle: Lifecycle;
  updatedDate: Scalars['DateTime'];
  welcomeMessage?: Maybe<Scalars['String']>;
};

export type InvitationEventInput = {
  eventName: Scalars['String'];
  invitationID: Scalars['UUID'];
};

export type InvitationExternal = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The User who triggered the invitationExternal. */
  createdBy: User;
  createdDate: Scalars['DateTime'];
  /** The email address of the external user being invited */
  email: Scalars['String'];
  firstName: Scalars['String'];
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** Whether to also add the invited user to the parent community. */
  invitedToParent: Scalars['Boolean'];
  lastName: Scalars['String'];
  /** Whether a new user profile has been created. */
  profileCreated: Scalars['Boolean'];
  welcomeMessage?: Maybe<Scalars['String']>;
};

export type LatestReleaseDiscussion = {
  /** Id of the latest release discussion. */
  id: Scalars['String'];
  /** NameID of the latest release discussion. */
  nameID: Scalars['String'];
};

export type Library = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** A single Innovation Pack */
  innovationPack?: Maybe<InnovationPack>;
  /** The Innovation Packs in the platform Innovation Library. */
  innovationPacks: Array<InnovationPack>;
  /** The StorageAggregator for storage used by this Library */
  storageAggregator?: Maybe<StorageAggregator>;
  /** The VirtualContributors listed on this platform */
  virtualContributors: Array<VirtualContributor>;
};

export type LibraryInnovationPackArgs = {
  ID: Scalars['UUID_NAMEID'];
};

export type LibraryInnovationPacksArgs = {
  queryData?: InputMaybe<InnovationPacksInput>;
};

export type License = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** Visibility of the Space. */
  visibility: SpaceVisibility;
};

export enum LicenseCredential {
  FeatureCalloutToCalloutTemplate = 'FEATURE_CALLOUT_TO_CALLOUT_TEMPLATE',
  FeatureVirtualContributors = 'FEATURE_VIRTUAL_CONTRIBUTORS',
  FeatureWhiteboardMultiUser = 'FEATURE_WHITEBOARD_MULTI_USER',
  LicenseSpaceEnterprise = 'LICENSE_SPACE_ENTERPRISE',
  LicenseSpaceFree = 'LICENSE_SPACE_FREE',
  LicenseSpacePlus = 'LICENSE_SPACE_PLUS',
  LicenseSpacePremium = 'LICENSE_SPACE_PREMIUM',
}

export type LicensePlan = {
  /** Assign this plan to all new Organization accounts */
  assignToNewOrganizationAccounts: Scalars['Boolean'];
  /** Assign this plan to all new User accounts */
  assignToNewUserAccounts: Scalars['Boolean'];
  /** Is this plan enabled? */
  enabled: Scalars['Boolean'];
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** Is this plan free? */
  isFree: Scalars['Boolean'];
  /** The credential to represent this plan */
  licenseCredential: LicenseCredential;
  /** The name of the License Plan */
  name: Scalars['String'];
  /** The price per month of this plan. */
  pricePerMonth?: Maybe<Scalars['Float']>;
  /** Does this plan require contact support */
  requiresContactSupport: Scalars['Boolean'];
  /** Does this plan require a payment method? */
  requiresPaymentMethod: Scalars['Boolean'];
  /** The sorting order for this Plan. */
  sortOrder: Scalars['Float'];
  /** Is there a trial period enabled */
  trialEnabled: Scalars['Boolean'];
  /** The type of this License Plan. */
  type: LicensePlanType;
};

export enum LicensePlanType {
  SpaceFeatureFlag = 'SPACE_FEATURE_FLAG',
  SpacePlan = 'SPACE_PLAN',
}

export type LicensePolicy = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The set of credential rules that are contained by this License Policy. */
  credentialRules: Array<LicensePolicyCredentialRule>;
  /** The ID of the entity */
  id: Scalars['UUID'];
};

export type LicensePolicyCredentialRule = {
  credentialType: LicenseCredential;
  grantedPrivileges: Array<LicensePrivilege>;
  name?: Maybe<Scalars['String']>;
};

export enum LicensePrivilege {
  CalloutSaveAsTemplate = 'CALLOUT_SAVE_AS_TEMPLATE',
  VirtualContributorAccess = 'VIRTUAL_CONTRIBUTOR_ACCESS',
  WhiteboardMultiUser = 'WHITEBOARD_MULTI_USER',
}

export type Licensing = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The License Plans in use on the platform. */
  plans: Array<LicensePlan>;
  /** The LicensePolicy in use by the Licensing setup. */
  policy: LicensePolicy;
};

export type Lifecycle = {
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The machine definition, describing the states, transitions etc for this Lifeycle. */
  machineDef: Scalars['LifecycleDefinition'];
  /** The next events of this Lifecycle. */
  nextEvents?: Maybe<Array<Scalars['String']>>;
  /** The current state of this Lifecycle. */
  state?: Maybe<Scalars['String']>;
  /** Is this lifecycle in a final state (done). */
  stateIsFinal: Scalars['Boolean'];
  /** The Lifecycle template name. */
  templateName?: Maybe<Scalars['String']>;
};

export type Link = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The Profile for framing the associated Link Contribution. */
  profile: Profile;
  /** URI of the Link */
  uri: Scalars['String'];
};

export type Location = {
  addressLine1: Scalars['String'];
  addressLine2: Scalars['String'];
  city: Scalars['String'];
  country: Scalars['String'];
  /** The ID of the entity */
  id: Scalars['UUID'];
  postalCode: Scalars['String'];
  stateOrProvince: Scalars['String'];
};

export type LookupQueryResults = {
  /** Lookup the specified Application */
  application?: Maybe<Application>;
  /** Lookup the specified Authorization Policy */
  authorizationPolicy?: Maybe<Authorization>;
  /** The privileges granted to the specified user based on this Authorization Policy. */
  authorizationPrivilegesForUser?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup the specified Calendar */
  calendar?: Maybe<Calendar>;
  /** Lookup the specified CalendarEvent */
  calendarEvent?: Maybe<CalendarEvent>;
  /** Lookup the specified Callout */
  callout?: Maybe<Callout>;
  /** Lookup the specified Callout Template */
  calloutTemplate?: Maybe<CalloutTemplate>;
  /** Lookup the specified Collaboration */
  collaboration?: Maybe<Collaboration>;
  /** Lookup the specified Community */
  community?: Maybe<Community>;
  /** Lookup the specified Community guidelines */
  communityGuidelines?: Maybe<CommunityGuidelines>;
  /** Lookup the specified InnovationFlow Template */
  communityGuidelinesTemplate?: Maybe<CommunityGuidelinesTemplate>;
  /** Lookup the specified Context */
  context?: Maybe<Context>;
  /** Lookup the specified Document */
  document?: Maybe<Document>;
  /** Lookup the specified InnovationFlow */
  innovationFlow?: Maybe<InnovationFlow>;
  /** Lookup the specified InnovationFlow Template */
  innovationFlowTemplate?: Maybe<InnovationFlowTemplate>;
  /** Lookup the specified Invitation */
  invitation?: Maybe<Invitation>;
  /** Lookup the specified Post */
  post?: Maybe<Post>;
  /** Lookup the specified Profile */
  profile?: Maybe<Profile>;
  /** Lookup the specified Room */
  room?: Maybe<Room>;
  /** Lookup the specified Space */
  space?: Maybe<Space>;
  /** Lookup the specified StorageAggregator */
  storageAggregator?: Maybe<StorageAggregator>;
  /** A particular VirtualContributor */
  virtualContributor?: Maybe<VirtualContributor>;
  /** Lookup the specified Whiteboard */
  whiteboard?: Maybe<Whiteboard>;
  /** Lookup the specified Whiteboard Template */
  whiteboardTemplate?: Maybe<WhiteboardTemplate>;
};

export type LookupQueryResultsApplicationArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsAuthorizationPolicyArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsAuthorizationPrivilegesForUserArgs = {
  authorizationID: Scalars['UUID'];
  userID: Scalars['UUID'];
};

export type LookupQueryResultsCalendarArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsCalendarEventArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsCalloutArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsCalloutTemplateArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsCollaborationArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsCommunityArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsCommunityGuidelinesArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsCommunityGuidelinesTemplateArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsContextArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsDocumentArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsInnovationFlowArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsInnovationFlowTemplateArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsInvitationArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsPostArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsProfileArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsRoomArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsSpaceArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsStorageAggregatorArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsVirtualContributorArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsWhiteboardArgs = {
  ID: Scalars['UUID'];
};

export type LookupQueryResultsWhiteboardTemplateArgs = {
  ID: Scalars['UUID'];
};

export type MeQueryResults = {
  /** Can I create a free space? */
  canCreateFreeSpace: Scalars['Boolean'];
  /** The community applications current authenticated user can act on. */
  communityApplications: Array<CommunityApplicationResult>;
  /** The invitations the current authenticated user can act on. */
  communityInvitations: Array<CommunityInvitationResult>;
  /** The query id */
  id: Scalars['String'];
  /** The Spaces I am contributing to */
  mySpaces: Array<MySpaceResults>;
  /** The applications of the current authenticated user */
  spaceMemberships: Array<Space>;
  /** The current authenticated User;  null if not yet registered on the platform */
  user?: Maybe<User>;
};

export type MeQueryResultsCommunityApplicationsArgs = {
  states?: InputMaybe<Array<Scalars['String']>>;
};

export type MeQueryResultsCommunityInvitationsArgs = {
  states?: InputMaybe<Array<Scalars['String']>>;
};

export type MeQueryResultsMySpacesArgs = {
  limit?: InputMaybe<Scalars['Float']>;
  showOnlyMyCreatedSpaces?: InputMaybe<Scalars['Boolean']>;
};

export type MeQueryResultsSpaceMembershipsArgs = {
  visibilities?: InputMaybe<Array<SpaceVisibility>>;
};

/** A message that was sent either as an Update or as part of a Discussion. */
export type Message = {
  /** The id for the message event. */
  id: Scalars['MessageID'];
  /** The message being sent */
  message: Scalars['Markdown'];
  /** Reactions on this message */
  reactions: Array<Reaction>;
  /** The User or Virtual Contributor that created this Message */
  sender?: Maybe<Contributor>;
  /** The message being replied to */
  threadID?: Maybe<Scalars['String']>;
  /** The server timestamp in UTC */
  timestamp: Scalars['Float'];
};

/** A detailed answer to a question, typically from an AI service. */
export type MessageAnswerQuestion = {
  /** The answer to the question */
  answer: Scalars['String'];
  /** The id of the answer; null if an error was returned */
  id?: Maybe<Scalars['String']>;
  /** The original question */
  question: Scalars['String'];
  /** The sources used to answer the question */
  sources?: Maybe<Array<MessageAnswerToQuestionSource>>;
};

/** A source used in a detailed answer to a question. */
export type MessageAnswerToQuestionSource = {
  /** The title of the source */
  title?: Maybe<Scalars['String']>;
  /** The URI of the source */
  uri?: Maybe<Scalars['String']>;
};

export type Metadata = {
  /** Collection of metadata about Alkemio services. */
  services: Array<ServiceMetadata>;
};

export type MigrateEmbeddings = {
  /** Result from the mutation execution. */
  success: Scalars['Boolean'];
};

export enum MimeType {
  Avif = 'AVIF',
  Bmp = 'BMP',
  Doc = 'DOC',
  Docx = 'DOCX',
  Gif = 'GIF',
  Jpeg = 'JPEG',
  Jpg = 'JPG',
  Ods = 'ODS',
  Odt = 'ODT',
  Pdf = 'PDF',
  Png = 'PNG',
  Svg = 'SVG',
  Webp = 'WEBP',
  Xls = 'XLS',
  Xlsx = 'XLSX',
  Xpng = 'XPNG',
}

export type MoveCalloutContributionInput = {
  /** ID of the Callout to move the Contribution to. */
  calloutID: Scalars['UUID'];
  /** ID of the Contribution to move. */
  contributionID: Scalars['UUID'];
};

export type Mutation = {
  /** Add a reaction to a message from the specified Room. */
  addReactionToMessageInRoom: Reaction;
  /** Ensure all community members are registered for communications. */
  adminCommunicationEnsureAccessToCommunications: Scalars['Boolean'];
  /** Remove an orphaned room from messaging platform. */
  adminCommunicationRemoveOrphanedRoom: Scalars['Boolean'];
  /** Allow updating the rule for joining rooms: public or invite. */
  adminCommunicationUpdateRoomsJoinRule: Scalars['Boolean'];
  /** Ingests new data into Elasticsearch from scratch. This will delete all existing data and ingest new data from the source. This is an admin only operation. */
  adminSearchIngestFromScratch: Scalars['String'];
  /** Reset the Authorization Policy on the specified AiServer. */
  aiServerAuthorizationPolicyReset: AiServer;
  /** Creates a new AiPersonaService on the aiServer. */
  aiServerCreateAiPersonaService: AiPersonaService;
  /** Deletes the specified AiPersonaService. */
  aiServerDeleteAiPersonaService: AiPersonaService;
  /** Trigger an ingesting of data on the remove AI Persona Service. */
  aiServerPersonaServiceIngest: Scalars['Boolean'];
  /** Updates the specified AI Persona. */
  aiServerUpdateAiPersonaService: AiPersonaService;
  /** Apply to join the specified Community as a member. */
  applyForCommunityMembership: Application;
  /** Assigns an Organization a Role in the specified Community. */
  assignCommunityRoleToOrganization: Organization;
  /** Assigns a User to a role in the specified Community. */
  assignCommunityRoleToUser: User;
  /** Assigns a Virtual Contributor to a role in the specified Community. */
  assignCommunityRoleToVirtual: VirtualContributor;
  /** Assign the specified LicensePlan to an Account. */
  assignLicensePlanToAccount: Account;
  /** Assigns an Organization Role to user. */
  assignOrganizationRoleToUser: User;
  /** Assigns a platform role to a User. */
  assignPlatformRoleToUser: User;
  /** Assigns a User as a member of the specified User Group. */
  assignUserToGroup: UserGroup;
  /** Reset the Authorization Policy on all entities */
  authorizationPolicyResetAll: Scalars['String'];
  /** Reset the Authorization Policy on the specified Account. */
  authorizationPolicyResetOnAccount: Account;
  /** Reset the Authorization Policy on the specified Organization. */
  authorizationPolicyResetOnOrganization: Organization;
  /** Reset the Authorization Policy on the specified Platform. */
  authorizationPolicyResetOnPlatform: Platform;
  /** Reset the Authorization policy on the specified User. */
  authorizationPolicyResetOnUser: User;
  /** Reset the specified Authorization Policy to global admin privileges */
  authorizationPolicyResetToGlobalAdminsAccess: Authorization;
  /** Generate Alkemio user credential offer */
  beginAlkemioUserVerifiedCredentialOfferInteraction: AgentBeginVerifiedCredentialOfferOutput;
  /** Generate community member credential offer */
  beginCommunityMemberVerifiedCredentialOfferInteraction: AgentBeginVerifiedCredentialOfferOutput;
  /** Generate verified credential share request */
  beginVerifiedCredentialRequestInteraction: AgentBeginVerifiedCredentialRequestOutput;
  /** Deletes collections nameID-... */
  cleanupCollections: MigrateEmbeddings;
  /** Creates a new Space by converting an existing Challenge. */
  convertChallengeToSpace: Space;
  /** Creates a new Challenge by converting an existing Opportunity. */
  convertOpportunityToChallenge: Space;
  /** Copies collections nameID-... into UUID-... */
  copyCollections: MigrateEmbeddings;
  /** Creates a new Account with a single root Space. */
  createAccount: Account;
  /** Creates a new Actor in the specified ActorGroup. */
  createActor: Actor;
  /** Create a new Actor Group on the EcosystemModel. */
  createActorGroup: ActorGroup;
  /** Create a new Callout on the Collaboration. */
  createCalloutOnCollaboration: Callout;
  /** Creates a new CalloutTemplate on the specified TemplatesSet. */
  createCalloutTemplate: CalloutTemplate;
  /** Creates a new CommunityGuidelinesTemplate on the specified TemplatesSet. */
  createCommunityGuidelinesTemplate: CommunityGuidelinesTemplate;
  /** Create a new Contribution on the Callout. */
  createContributionOnCallout: CalloutContribution;
  /** Creates a new Discussion as part of this Forum. */
  createDiscussion: Discussion;
  /** Create a new CalendarEvent on the Calendar. */
  createEventOnCalendar: CalendarEvent;
  /** Creates a new User Group in the specified Community. */
  createGroupOnCommunity: UserGroup;
  /** Creates a new User Group for the specified Organization. */
  createGroupOnOrganization: UserGroup;
  /** Creates a new InnovationFlowTemplate on the specified TemplatesSet. */
  createInnovationFlowTemplate: InnovationFlowTemplate;
  /** Create Innovation Hub. */
  createInnovationHub: InnovationHub;
  /** Create a new InnovatonPack on the Library. */
  createInnovationPackOnLibrary: InnovationPack;
  /** Create a new LicensePlan on the Licensing. */
  createLicensePlan: LicensePlan;
  /** Creates a new Organization on the platform. */
  createOrganization: Organization;
  /** Creates a new PostTemplate on the specified TemplatesSet. */
  createPostTemplate: PostTemplate;
  /** Creates a new Reference on the specified Profile. */
  createReferenceOnProfile: Reference;
  /** Create a new Relation on the Collaboration. */
  createRelationOnCollaboration: Relation;
  /** Creates a new Subspace within the specified Space. */
  createSubspace: Space;
  /** Creates a new Tagset on the specified Profile */
  createTagsetOnProfile: Tagset;
  /** Creates a new User on the platform. */
  createUser: User;
  /** Creates a new User profile on the platform for a user that has a valid Authentication session. */
  createUserNewRegistration: User;
  /** Creates a new VirtualContributor on an Account. */
  createVirtualContributor: VirtualContributor;
  /** Creates a new WhiteboardTemplate on the specified TemplatesSet. */
  createWhiteboardTemplate: WhiteboardTemplate;
  /** Deletes the specified Actor. */
  deleteActor: Actor;
  /** Deletes the specified Actor Group, including contained Actors. */
  deleteActorGroup: ActorGroup;
  /** Deletes the specified CalendarEvent. */
  deleteCalendarEvent: CalendarEvent;
  /** Delete a Callout. */
  deleteCallout: Callout;
  /** Deletes the specified CalloutTemplate. */
  deleteCalloutTemplate: CalloutTemplate;
  /** Delete Collaboration. */
  deleteCollaboration: Collaboration;
  /** Deletes the specified CommunityGuidelines Template. */
  deleteCommunityGuidelinesTemplate: CommunityGuidelinesTemplate;
  /** Deletes the specified Discussion. */
  deleteDiscussion: Discussion;
  /** Deletes the specified Document. */
  deleteDocument: Document;
  /** Deletes the specified InnovationFlowTemplate. */
  deleteInnovationFlowTemplate: InnovationFlowTemplate;
  /** Delete Innovation Hub. */
  deleteInnovationHub: InnovationHub;
  /** Deletes the specified InnovationPack. */
  deleteInnovationPack: InnovationPack;
  /** Removes the specified User invitation. */
  deleteInvitation: Invitation;
  /** Removes the specified User invitationExternal. */
  deleteInvitationExternal: InvitationExternal;
  /** Deletes the specified LicensePlan. */
  deleteLicensePlan: LicensePlan;
  /** Deletes the specified Link. */
  deleteLink: Link;
  /** Deletes the specified Organization. */
  deleteOrganization: Organization;
  /** Deletes the specified Post. */
  deletePost: Post;
  /** Deletes the specified PostTemplate. */
  deletePostTemplate: PostTemplate;
  /** Deletes the specified Reference. */
  deleteReference: Reference;
  /** Deletes the specified Relation. */
  deleteRelation: Relation;
  /** Deletes the specified Space. */
  deleteSpace: Space;
  /** Deletes a Storage Bucket */
  deleteStorageBucket: StorageBucket;
  /** Deletes the specified User. */
  deleteUser: User;
  /** Removes the specified User Application. */
  deleteUserApplication: Application;
  /** Deletes the specified User Group. */
  deleteUserGroup: UserGroup;
  /** Deletes the specified VirtualContributor. */
  deleteVirtualContributor: VirtualContributor;
  /** Deletes the specified Whiteboard. */
  deleteWhiteboard: Whiteboard;
  /** Deletes the specified WhiteboardTemplate. */
  deleteWhiteboardTemplate: WhiteboardTemplate;
  /** Trigger an event on the Application. */
  eventOnApplication: Application;
  /** Trigger an event on the Invitation. */
  eventOnCommunityInvitation: Invitation;
  /** Trigger an event on the Organization Verification. */
  eventOnOrganizationVerification: OrganizationVerification;
  /** Grants an authorization credential to an Organization. */
  grantCredentialToOrganization: Organization;
  /** Grants an authorization credential to a User. */
  grantCredentialToUser: User;
  /** Resets the interaction with the chat engine. */
  ingest: Scalars['Boolean'];
  /** Triggers space ingestion. */
  ingestSpace: Space;
  /** Invite an existing Contriburor to join the specified Community as a member. */
  inviteContributorsForCommunityMembership: Array<Invitation>;
  /** Invite an external User to join the specified Community as a member. */
  inviteForCommunityMembershipByEmail: AnyInvitation;
  /** Join the specified Community as a member, without going through an approval process. */
  joinCommunity: Community;
  /** Sends a message on the specified User`s behalf and returns the room id */
  messageUser: Scalars['String'];
  /** Moves the specified Contribution to another Callout. */
  moveContributionToCallout: CalloutContribution;
  /** Triggers a request to the backing AI Service to refresh the knowledge that is available to it. */
  refreshVirtualContributorBodyOfKnowledge: Scalars['Boolean'];
  /** Removes an Organization from a Role in the specified Community. */
  removeCommunityRoleFromOrganization: Organization;
  /** Removes a User from a Role in the specified Community. */
  removeCommunityRoleFromUser: User;
  /** Removes a Virtual from a Role in the specified Community. */
  removeCommunityRoleFromVirtual: VirtualContributor;
  /** Removes a message. */
  removeMessageOnRoom: Scalars['MessageID'];
  /** Removes Organization Role from user. */
  removeOrganizationRoleFromUser: User;
  /** Removes a User from a platform role. */
  removePlatformRoleFromUser: User;
  /** Remove a reaction on a message from the specified Room. */
  removeReactionToMessageInRoom: Scalars['Boolean'];
  /** Removes the specified User from specified user group */
  removeUserFromGroup: UserGroup;
  /** Resets the interaction with the chat engine. */
  resetChatGuidance: Scalars['Boolean'];
  /** Removes an authorization credential from an Organization. */
  revokeCredentialFromOrganization: Organization;
  /** Removes an authorization credential from a User. */
  revokeCredentialFromUser: User;
  /** Revokes the specified LicensePlan on an Account. */
  revokeLicensePlanFromAccount: Account;
  /** Sends a reply to a message from the specified Room. */
  sendMessageReplyToRoom: Message;
  /** Send message to Community Leads. */
  sendMessageToCommunityLeads: Scalars['Boolean'];
  /** Send message to an Organization. */
  sendMessageToOrganization: Scalars['Boolean'];
  /** Sends an comment message. Returns the id of the new Update message. */
  sendMessageToRoom: Message;
  /** Send message to a User. */
  sendMessageToUser: Scalars['Boolean'];
  /** Update the platform settings, such as license, of the specified Account. */
  updateAccountPlatformSettings: Account;
  /** Updates the specified Actor. */
  updateActor: Actor;
  /** Updates the specified AiPersona. */
  updateAiPersona: AiPersona;
  /** User vote if a specific answer is relevant. */
  updateAnswerRelevance: Scalars['Boolean'];
  /** Updates the specified CalendarEvent. */
  updateCalendarEvent: CalendarEvent;
  /** Update a Callout. */
  updateCallout: Callout;
  /** Update the information describing the publishing of the specified Callout. */
  updateCalloutPublishInfo: Callout;
  /** Updates the specified CalloutTemplate. */
  updateCalloutTemplate: CalloutTemplate;
  /** Update the visibility of the specified Callout. */
  updateCalloutVisibility: Callout;
  /** Update the sortOrder field of the supplied Callouts to increase as per the order that they are provided in. */
  updateCalloutsSortOrder: Array<Callout>;
  /** Update the Application Form used by this Community. */
  updateCommunityApplicationForm: Community;
  /** Updates the CommunityGuidelines. */
  updateCommunityGuidelines: CommunityGuidelines;
  /** Updates the specified CommunityGuidelinesTemplate. */
  updateCommunityGuidelinesTemplate: CommunityGuidelinesTemplate;
  /** Updates the specified Discussion. */
  updateDiscussion: Discussion;
  /** Updates the specified Document. */
  updateDocument: Document;
  /** Updates the specified EcosystemModel. */
  updateEcosystemModel: EcosystemModel;
  /** Updates the InnovationFlow. */
  updateInnovationFlow: InnovationFlow;
  /** Updates the InnovationFlow. */
  updateInnovationFlowSelectedState: InnovationFlow;
  /** Updates the specified InnovationFlowState. */
  updateInnovationFlowSingleState: InnovationFlow;
  /** Updates the InnovationFlow states from the specified template. */
  updateInnovationFlowStatesFromTemplate: InnovationFlow;
  /** Updates the specified InnovationFlowTemplate. */
  updateInnovationFlowTemplate: InnovationFlowTemplate;
  /** Update Innovation Hub. */
  updateInnovationHub: InnovationHub;
  /** Update Innovation Hub Settings. */
  updateInnovationHubPlatformSettings: InnovationHub;
  /** Updates the InnovationPack. */
  updateInnovationPack: InnovationPack;
  /** Updates the LicensePlan. */
  updateLicensePlan: LicensePlan;
  /** Updates the specified Link. */
  updateLink: Link;
  /** Updates the specified Organization. */
  updateOrganization: Organization;
  /** Updates the specified Organization platform settings. */
  updateOrganizationPlatformSettings: Organization;
  /** Updates the specified Post. */
  updatePost: Post;
  /** Updates the specified PostTemplate. */
  updatePostTemplate: PostTemplate;
  /** Updates one of the Preferences on an Organization */
  updatePreferenceOnOrganization: Preference;
  /** Updates one of the Preferences on a Space */
  updatePreferenceOnUser: Preference;
  /** Updates the specified Profile. */
  updateProfile: Profile;
  /** Updates the specified Reference. */
  updateReference: Reference;
  /** Updates the Space. */
  updateSpace: Space;
  /** Updates the specified SpaceDefaults. */
  updateSpaceDefaults: SpaceDefaults;
  /** Update the platform settings, such as nameID, of the specified Space. */
  updateSpacePlatformSettings: Space;
  /** Updates one of the Setting on a Space */
  updateSpaceSettings: Space;
  /** Updates the specified Tagset. */
  updateTagset: Tagset;
  /** Updates the User. */
  updateUser: User;
  /** Updates the specified User Group. */
  updateUserGroup: UserGroup;
  /** Update the platform settings, such as nameID, email, for the specified User. */
  updateUserPlatformSettings: User;
  /** Updates the specified VirtualContributor. */
  updateVirtualContributor: VirtualContributor;
  /** Update VirtualContributor Platform Settings. */
  updateVirtualContributorPlatformSettings: VirtualContributor;
  /** Updates the image URI for the specified Visual. */
  updateVisual: Visual;
  /** Updates the specified Whiteboard. */
  updateWhiteboard: Whiteboard;
  /** Updates the specified Whiteboard content. */
  updateWhiteboardContent: Whiteboard;
  /** Updates the specified WhiteboardTemplate. */
  updateWhiteboardTemplate: WhiteboardTemplate;
  /** Create a new Document on the Storage and return the value as part of the returned Link. */
  uploadFileOnLink: Link;
  /** Create a new Document on the Storage and return the value as part of the returned Reference. */
  uploadFileOnReference: Reference;
  /** Create a new Document on the Storage and return the public Url. */
  uploadFileOnStorageBucket: Scalars['String'];
  /** Uploads and sets an image for the specified Visual. */
  uploadImageOnVisual: Visual;
};

export type MutationAddReactionToMessageInRoomArgs = {
  reactionData: RoomAddReactionToMessageInput;
};

export type MutationAdminCommunicationEnsureAccessToCommunicationsArgs = {
  communicationData: CommunicationAdminEnsureAccessInput;
};

export type MutationAdminCommunicationRemoveOrphanedRoomArgs = {
  orphanedRoomData: CommunicationAdminRemoveOrphanedRoomInput;
};

export type MutationAdminCommunicationUpdateRoomsJoinRuleArgs = {
  changeRoomAccessData: CommunicationAdminUpdateRoomsJoinRuleInput;
};

export type MutationAiServerCreateAiPersonaServiceArgs = {
  aiPersonaServiceData: CreateAiPersonaServiceInput;
};

export type MutationAiServerDeleteAiPersonaServiceArgs = {
  deleteData: DeleteAiPersonaServiceInput;
};

export type MutationAiServerPersonaServiceIngestArgs = {
  ingestData: AiPersonaServiceIngestInput;
};

export type MutationAiServerUpdateAiPersonaServiceArgs = {
  aiPersonaServiceData: UpdateAiPersonaServiceInput;
};

export type MutationApplyForCommunityMembershipArgs = {
  applicationData: CommunityApplyInput;
};

export type MutationAssignCommunityRoleToOrganizationArgs = {
  roleData: AssignCommunityRoleToOrganizationInput;
};

export type MutationAssignCommunityRoleToUserArgs = {
  roleData: AssignCommunityRoleToUserInput;
};

export type MutationAssignCommunityRoleToVirtualArgs = {
  roleData: AssignCommunityRoleToVirtualInput;
};

export type MutationAssignLicensePlanToAccountArgs = {
  planData: AssignLicensePlanToAccount;
};

export type MutationAssignOrganizationRoleToUserArgs = {
  membershipData: AssignOrganizationRoleToUserInput;
};

export type MutationAssignPlatformRoleToUserArgs = {
  membershipData: AssignPlatformRoleToUserInput;
};

export type MutationAssignUserToGroupArgs = {
  membershipData: AssignUserGroupMemberInput;
};

export type MutationAuthorizationPolicyResetOnAccountArgs = {
  authorizationResetData: AccountAuthorizationResetInput;
};

export type MutationAuthorizationPolicyResetOnOrganizationArgs = {
  authorizationResetData: OrganizationAuthorizationResetInput;
};

export type MutationAuthorizationPolicyResetOnUserArgs = {
  authorizationResetData: UserAuthorizationResetInput;
};

export type MutationAuthorizationPolicyResetToGlobalAdminsAccessArgs = {
  authorizationID: Scalars['String'];
};

export type MutationBeginCommunityMemberVerifiedCredentialOfferInteractionArgs = {
  communityID: Scalars['String'];
};

export type MutationBeginVerifiedCredentialRequestInteractionArgs = {
  types: Array<Scalars['String']>;
};

export type MutationConvertChallengeToSpaceArgs = {
  convertData: ConvertSubspaceToSpaceInput;
};

export type MutationConvertOpportunityToChallengeArgs = {
  convertData: ConvertSubsubspaceToSubspaceInput;
};

export type MutationCreateAccountArgs = {
  accountData: CreateAccountInput;
};

export type MutationCreateActorArgs = {
  actorData: CreateActorInput;
};

export type MutationCreateActorGroupArgs = {
  actorGroupData: CreateActorGroupInput;
};

export type MutationCreateCalloutOnCollaborationArgs = {
  calloutData: CreateCalloutOnCollaborationInput;
};

export type MutationCreateCalloutTemplateArgs = {
  calloutTemplateInput: CreateCalloutTemplateOnTemplatesSetInput;
};

export type MutationCreateCommunityGuidelinesTemplateArgs = {
  communityGuidelinesTemplateInput: CreateCommunityGuidelinesTemplateOnTemplatesSetInput;
};

export type MutationCreateContributionOnCalloutArgs = {
  contributionData: CreateContributionOnCalloutInput;
};

export type MutationCreateDiscussionArgs = {
  createData: ForumCreateDiscussionInput;
};

export type MutationCreateEventOnCalendarArgs = {
  eventData: CreateCalendarEventOnCalendarInput;
};

export type MutationCreateGroupOnCommunityArgs = {
  groupData: CreateUserGroupInput;
};

export type MutationCreateGroupOnOrganizationArgs = {
  groupData: CreateUserGroupInput;
};

export type MutationCreateInnovationFlowTemplateArgs = {
  innovationFlowTemplateInput: CreateInnovationFlowTemplateOnTemplatesSetInput;
};

export type MutationCreateInnovationHubArgs = {
  createData: CreateInnovationHubInput;
};

export type MutationCreateInnovationPackOnLibraryArgs = {
  packData: CreateInnovationPackOnLibraryInput;
};

export type MutationCreateLicensePlanArgs = {
  planData: CreateLicensePlanOnLicensingInput;
};

export type MutationCreateOrganizationArgs = {
  organizationData: CreateOrganizationInput;
};

export type MutationCreatePostTemplateArgs = {
  postTemplateInput: CreatePostTemplateOnTemplatesSetInput;
};

export type MutationCreateReferenceOnProfileArgs = {
  referenceInput: CreateReferenceOnProfileInput;
};

export type MutationCreateRelationOnCollaborationArgs = {
  relationData: CreateRelationOnCollaborationInput;
};

export type MutationCreateSubspaceArgs = {
  subspaceData: CreateSubspaceInput;
};

export type MutationCreateTagsetOnProfileArgs = {
  tagsetData: CreateTagsetOnProfileInput;
};

export type MutationCreateUserArgs = {
  userData: CreateUserInput;
};

export type MutationCreateVirtualContributorArgs = {
  virtualContributorData: CreateVirtualContributorOnAccountInput;
};

export type MutationCreateWhiteboardTemplateArgs = {
  whiteboardTemplateInput: CreateWhiteboardTemplateOnTemplatesSetInput;
};

export type MutationDeleteActorArgs = {
  deleteData: DeleteActorInput;
};

export type MutationDeleteActorGroupArgs = {
  deleteData: DeleteActorGroupInput;
};

export type MutationDeleteCalendarEventArgs = {
  deleteData: DeleteCalendarEventInput;
};

export type MutationDeleteCalloutArgs = {
  deleteData: DeleteCalloutInput;
};

export type MutationDeleteCalloutTemplateArgs = {
  deleteData: DeleteCalloutTemplateInput;
};

export type MutationDeleteCollaborationArgs = {
  deleteData: DeleteCollaborationInput;
};

export type MutationDeleteCommunityGuidelinesTemplateArgs = {
  deleteData: DeleteCommunityGuidelinesTemplateInput;
};

export type MutationDeleteDiscussionArgs = {
  deleteData: DeleteDiscussionInput;
};

export type MutationDeleteDocumentArgs = {
  deleteData: DeleteDocumentInput;
};

export type MutationDeleteInnovationFlowTemplateArgs = {
  deleteData: DeleteInnovationFlowTemplateInput;
};

export type MutationDeleteInnovationHubArgs = {
  deleteData: DeleteInnovationHubInput;
};

export type MutationDeleteInnovationPackArgs = {
  deleteData: DeleteInnovationPackInput;
};

export type MutationDeleteInvitationArgs = {
  deleteData: DeleteInvitationInput;
};

export type MutationDeleteInvitationExternalArgs = {
  deleteData: DeleteInvitationExternalInput;
};

export type MutationDeleteLicensePlanArgs = {
  deleteData: DeleteLicensePlanInput;
};

export type MutationDeleteLinkArgs = {
  deleteData: DeleteLinkInput;
};

export type MutationDeleteOrganizationArgs = {
  deleteData: DeleteOrganizationInput;
};

export type MutationDeletePostArgs = {
  deleteData: DeletePostInput;
};

export type MutationDeletePostTemplateArgs = {
  deleteData: DeletePostTemplateInput;
};

export type MutationDeleteReferenceArgs = {
  deleteData: DeleteReferenceInput;
};

export type MutationDeleteRelationArgs = {
  deleteData: DeleteRelationInput;
};

export type MutationDeleteSpaceArgs = {
  deleteData: DeleteSpaceInput;
};

export type MutationDeleteStorageBucketArgs = {
  deleteData: DeleteStorageBuckeetInput;
};

export type MutationDeleteUserArgs = {
  deleteData: DeleteUserInput;
};

export type MutationDeleteUserApplicationArgs = {
  deleteData: DeleteApplicationInput;
};

export type MutationDeleteUserGroupArgs = {
  deleteData: DeleteUserGroupInput;
};

export type MutationDeleteVirtualContributorArgs = {
  deleteData: DeleteVirtualContributorInput;
};

export type MutationDeleteWhiteboardArgs = {
  whiteboardData: DeleteWhiteboardInput;
};

export type MutationDeleteWhiteboardTemplateArgs = {
  deleteData: DeleteWhiteboardTemplateInput;
};

export type MutationEventOnApplicationArgs = {
  applicationEventData: ApplicationEventInput;
};

export type MutationEventOnCommunityInvitationArgs = {
  invitationEventData: InvitationEventInput;
};

export type MutationEventOnOrganizationVerificationArgs = {
  organizationVerificationEventData: OrganizationVerificationEventInput;
};

export type MutationGrantCredentialToOrganizationArgs = {
  grantCredentialData: GrantOrganizationAuthorizationCredentialInput;
};

export type MutationGrantCredentialToUserArgs = {
  grantCredentialData: GrantAuthorizationCredentialInput;
};

export type MutationIngestSpaceArgs = {
  ingestSpaceData: IngestSpaceInput;
};

export type MutationInviteContributorsForCommunityMembershipArgs = {
  invitationData: CreateInvitationForContributorsOnCommunityInput;
};

export type MutationInviteForCommunityMembershipByEmailArgs = {
  invitationData: CreateInvitationUserByEmailOnCommunityInput;
};

export type MutationJoinCommunityArgs = {
  joinCommunityData: CommunityJoinInput;
};

export type MutationMessageUserArgs = {
  messageData: UserSendMessageInput;
};

export type MutationMoveContributionToCalloutArgs = {
  moveContributionData: MoveCalloutContributionInput;
};

export type MutationRefreshVirtualContributorBodyOfKnowledgeArgs = {
  deleteData: RefreshVirtualContributorBodyOfKnowledgeInput;
};

export type MutationRemoveCommunityRoleFromOrganizationArgs = {
  roleData: RemoveCommunityRoleFromOrganizationInput;
};

export type MutationRemoveCommunityRoleFromUserArgs = {
  roleData: RemoveCommunityRoleFromUserInput;
};

export type MutationRemoveCommunityRoleFromVirtualArgs = {
  roleData: RemoveCommunityRoleFromVirtualInput;
};

export type MutationRemoveMessageOnRoomArgs = {
  messageData: RoomRemoveMessageInput;
};

export type MutationRemoveOrganizationRoleFromUserArgs = {
  membershipData: RemoveOrganizationRoleFromUserInput;
};

export type MutationRemovePlatformRoleFromUserArgs = {
  membershipData: RemovePlatformRoleFromUserInput;
};

export type MutationRemoveReactionToMessageInRoomArgs = {
  reactionData: RoomRemoveReactionToMessageInput;
};

export type MutationRemoveUserFromGroupArgs = {
  membershipData: RemoveUserGroupMemberInput;
};

export type MutationRevokeCredentialFromOrganizationArgs = {
  revokeCredentialData: RevokeOrganizationAuthorizationCredentialInput;
};

export type MutationRevokeCredentialFromUserArgs = {
  revokeCredentialData: RevokeAuthorizationCredentialInput;
};

export type MutationRevokeLicensePlanFromAccountArgs = {
  planData: RevokeLicensePlanFromAccount;
};

export type MutationSendMessageReplyToRoomArgs = {
  messageData: RoomSendMessageReplyInput;
};

export type MutationSendMessageToCommunityLeadsArgs = {
  messageData: CommunicationSendMessageToCommunityLeadsInput;
};

export type MutationSendMessageToOrganizationArgs = {
  messageData: CommunicationSendMessageToOrganizationInput;
};

export type MutationSendMessageToRoomArgs = {
  messageData: RoomSendMessageInput;
};

export type MutationSendMessageToUserArgs = {
  messageData: CommunicationSendMessageToUserInput;
};

export type MutationUpdateAccountPlatformSettingsArgs = {
  updateData: UpdateAccountPlatformSettingsInput;
};

export type MutationUpdateActorArgs = {
  actorData: UpdateActorInput;
};

export type MutationUpdateAiPersonaArgs = {
  aiPersonaData: UpdateAiPersonaInput;
};

export type MutationUpdateAnswerRelevanceArgs = {
  input: ChatGuidanceAnswerRelevanceInput;
};

export type MutationUpdateCalendarEventArgs = {
  eventData: UpdateCalendarEventInput;
};

export type MutationUpdateCalloutArgs = {
  calloutData: UpdateCalloutInput;
};

export type MutationUpdateCalloutPublishInfoArgs = {
  calloutData: UpdateCalloutPublishInfoInput;
};

export type MutationUpdateCalloutTemplateArgs = {
  calloutTemplateInput: UpdateCalloutTemplateInput;
};

export type MutationUpdateCalloutVisibilityArgs = {
  calloutData: UpdateCalloutVisibilityInput;
};

export type MutationUpdateCalloutsSortOrderArgs = {
  sortOrderData: UpdateCollaborationCalloutsSortOrderInput;
};

export type MutationUpdateCommunityApplicationFormArgs = {
  applicationFormData: UpdateCommunityApplicationFormInput;
};

export type MutationUpdateCommunityGuidelinesArgs = {
  communityGuidelinesData: UpdateCommunityGuidelinesInput;
};

export type MutationUpdateCommunityGuidelinesTemplateArgs = {
  communityGuidelinesTemplateInput: UpdateCommunityGuidelinesTemplateInput;
};

export type MutationUpdateDiscussionArgs = {
  updateData: UpdateDiscussionInput;
};

export type MutationUpdateDocumentArgs = {
  documentData: UpdateDocumentInput;
};

export type MutationUpdateEcosystemModelArgs = {
  ecosystemModelData: UpdateEcosystemModelInput;
};

export type MutationUpdateInnovationFlowArgs = {
  innovationFlowData: UpdateInnovationFlowInput;
};

export type MutationUpdateInnovationFlowSelectedStateArgs = {
  innovationFlowStateData: UpdateInnovationFlowSelectedStateInput;
};

export type MutationUpdateInnovationFlowSingleStateArgs = {
  innovationFlowStateData: UpdateInnovationFlowSingleStateInput;
};

export type MutationUpdateInnovationFlowStatesFromTemplateArgs = {
  innovationFlowData: UpdateInnovationFlowFromTemplateInput;
};

export type MutationUpdateInnovationFlowTemplateArgs = {
  innovationFlowTemplateInput: UpdateInnovationFlowTemplateInput;
};

export type MutationUpdateInnovationHubArgs = {
  updateData: UpdateInnovationHubInput;
};

export type MutationUpdateInnovationHubPlatformSettingsArgs = {
  updateData: UpdateInnovationHubPlatformSettingsInput;
};

export type MutationUpdateInnovationPackArgs = {
  innovationPackData: UpdateInnovationPackInput;
};

export type MutationUpdateLicensePlanArgs = {
  updateData: UpdateLicensePlanInput;
};

export type MutationUpdateLinkArgs = {
  linkData: UpdateLinkInput;
};

export type MutationUpdateOrganizationArgs = {
  organizationData: UpdateOrganizationInput;
};

export type MutationUpdateOrganizationPlatformSettingsArgs = {
  organizationData: UpdateOrganizationPlatformSettingsInput;
};

export type MutationUpdatePostArgs = {
  postData: UpdatePostInput;
};

export type MutationUpdatePostTemplateArgs = {
  postTemplateInput: UpdatePostTemplateInput;
};

export type MutationUpdatePreferenceOnOrganizationArgs = {
  preferenceData: UpdateOrganizationPreferenceInput;
};

export type MutationUpdatePreferenceOnUserArgs = {
  preferenceData: UpdateUserPreferenceInput;
};

export type MutationUpdateProfileArgs = {
  profileData: UpdateProfileDirectInput;
};

export type MutationUpdateReferenceArgs = {
  referenceData: UpdateReferenceInput;
};

export type MutationUpdateSpaceArgs = {
  spaceData: UpdateSpaceInput;
};

export type MutationUpdateSpaceDefaultsArgs = {
  spaceDefaultsData: UpdateSpaceDefaultsInput;
};

export type MutationUpdateSpacePlatformSettingsArgs = {
  updateData: UpdateSpacePlatformSettingsInput;
};

export type MutationUpdateSpaceSettingsArgs = {
  settingsData: UpdateSpaceSettingsInput;
};

export type MutationUpdateTagsetArgs = {
  updateData: UpdateTagsetInput;
};

export type MutationUpdateUserArgs = {
  userData: UpdateUserInput;
};

export type MutationUpdateUserGroupArgs = {
  userGroupData: UpdateUserGroupInput;
};

export type MutationUpdateUserPlatformSettingsArgs = {
  updateData: UpdateUserPlatformSettingsInput;
};

export type MutationUpdateVirtualContributorArgs = {
  virtualContributorData: UpdateVirtualContributorInput;
};

export type MutationUpdateVirtualContributorPlatformSettingsArgs = {
  updateData: UpdateVirtualContributorPlatformSettingsInput;
};

export type MutationUpdateVisualArgs = {
  updateData: UpdateVisualInput;
};

export type MutationUpdateWhiteboardArgs = {
  whiteboardData: UpdateWhiteboardInput;
};

export type MutationUpdateWhiteboardContentArgs = {
  whiteboardData: UpdateWhiteboardContentInput;
};

export type MutationUpdateWhiteboardTemplateArgs = {
  whiteboardTemplateInput: UpdateWhiteboardTemplateInput;
};

export type MutationUploadFileOnLinkArgs = {
  file: Scalars['Upload'];
  uploadData: StorageBucketUploadFileOnLinkInput;
};

export type MutationUploadFileOnReferenceArgs = {
  file: Scalars['Upload'];
  uploadData: StorageBucketUploadFileOnReferenceInput;
};

export type MutationUploadFileOnStorageBucketArgs = {
  file: Scalars['Upload'];
  uploadData: StorageBucketUploadFileInput;
};

export type MutationUploadImageOnVisualArgs = {
  file: Scalars['Upload'];
  uploadData: VisualUploadImageInput;
};

export enum MutationType {
  Create = 'CREATE',
  Delete = 'DELETE',
  Update = 'UPDATE',
}

export type MySpaceResults = {
  latestActivity?: Maybe<ActivityLogEntry>;
  space: Space;
};

export type Nvp = {
  /** The ID of the entity */
  id: Scalars['UUID'];
  name: Scalars['String'];
  value: Scalars['String'];
};

export type Organization = Contributor &
  Groupable & {
    /** The accounts hosted by this Organization. */
    accounts: Array<Account>;
    /** All Users that are admins of this Organization. */
    admins?: Maybe<Array<User>>;
    /** The Agent representing this User. */
    agent: Agent;
    /** All Users that are associated with this Organization. */
    associates?: Maybe<Array<User>>;
    /** The authorization rules for the Contributor */
    authorization?: Maybe<Authorization>;
    /** Organization contact email */
    contactEmail?: Maybe<Scalars['String']>;
    /** Domain name; what is verified, eg. alkem.io */
    domain?: Maybe<Scalars['String']>;
    /** Group defined on this organization. */
    group?: Maybe<UserGroup>;
    /** Groups defined on this organization. */
    groups?: Maybe<Array<UserGroup>>;
    /** The ID of the Contributor */
    id: Scalars['UUID'];
    /** Legal name - required if hosting an Space */
    legalEntityName?: Maybe<Scalars['String']>;
    /** Metrics about the activity within this Organization. */
    metrics?: Maybe<Array<Nvp>>;
    /** The roles on this Organization for the currently logged in user. */
    myRoles?: Maybe<Array<OrganizationRole>>;
    /** A name identifier of the Contributor, unique within a given scope. */
    nameID: Scalars['NameID'];
    /** All Users that are owners of this Organization. */
    owners?: Maybe<Array<User>>;
    /** The preferences for this Organization */
    preferences: Array<Preference>;
    /** The profile for this Organization. */
    profile: Profile;
    /** The StorageAggregator for managing storage buckets in use by this Organization */
    storageAggregator?: Maybe<StorageAggregator>;
    verification: OrganizationVerification;
    /** Organization website */
    website?: Maybe<Scalars['String']>;
  };

export type OrganizationGroupArgs = {
  ID: Scalars['UUID'];
};

export type OrganizationAuthorizationResetInput = {
  /** The identifier of the Organization whose Authorization Policy should be reset. */
  organizationID: Scalars['UUID_NAMEID_EMAIL'];
};

export type OrganizationFilterInput = {
  contactEmail?: InputMaybe<Scalars['String']>;
  displayName?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  nameID?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
};

export enum OrganizationPreferenceType {
  AuthorizationOrganizationMatchDomain = 'AUTHORIZATION_ORGANIZATION_MATCH_DOMAIN',
}

export enum OrganizationRole {
  Admin = 'ADMIN',
  Associate = 'ASSOCIATE',
  Owner = 'OWNER',
}

export type OrganizationVerification = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  lifecycle: Lifecycle;
  /** Organization verification type */
  status: OrganizationVerificationEnum;
};

export enum OrganizationVerificationEnum {
  NotVerified = 'NOT_VERIFIED',
  VerifiedManualAttestation = 'VERIFIED_MANUAL_ATTESTATION',
}

export type OrganizationVerificationEventInput = {
  eventName: Scalars['String'];
  organizationVerificationID: Scalars['UUID'];
};

export type OryConfig = {
  /** Ory Issuer. */
  issuer: Scalars['String'];
  /** Ory Kratos Public Base URL. Used by all Kratos Public Clients. */
  kratosPublicBaseURL: Scalars['String'];
};

export type PageInfo = {
  /** The last cursor of the page result */
  endCursor?: Maybe<Scalars['String']>;
  /** Indicate whether more items exist after the returned ones */
  hasNextPage: Scalars['Boolean'];
  /** Indicate whether more items exist before the returned ones */
  hasPreviousPage: Scalars['Boolean'];
  /** The first cursor of the page result */
  startCursor?: Maybe<Scalars['String']>;
};

export type PaginatedOrganization = {
  organization: Array<Organization>;
  pageInfo: PageInfo;
  total: Scalars['Float'];
};

export type PaginatedSpaces = {
  pageInfo: PageInfo;
  spaces: Array<Space>;
  total: Scalars['Float'];
};

export type PaginatedUsers = {
  pageInfo: PageInfo;
  total: Scalars['Float'];
  users: Array<User>;
};

export type Platform = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** Alkemio configuration. Provides configuration to external services in the Alkemio ecosystem. */
  configuration: Config;
  /** The Forum for the platform */
  forum: Forum;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** Details about an Innovation Hubs on the platform. If the arguments are omitted, the current Innovation Hub you are in will be returned. */
  innovationHub?: Maybe<InnovationHub>;
  /** List of Innovation Hubs on the platform */
  innovationHubs: Array<InnovationHub>;
  /** The latest release discussion. */
  latestReleaseDiscussion?: Maybe<LatestReleaseDiscussion>;
  /** The Innovation Library for the platform */
  library: Library;
  /** The Licensing in use by the platform. */
  licensing: Licensing;
  /** Alkemio Services Metadata. */
  metadata: Metadata;
  /** The StorageAggregator with documents in use by Users + Organizations on the Platform. */
  storageAggregator: StorageAggregator;
};

export type PlatformInnovationHubArgs = {
  id?: InputMaybe<Scalars['UUID_NAMEID']>;
  subdomain?: InputMaybe<Scalars['String']>;
};

export type PlatformFeatureFlag = {
  /** Is this feature flag enabled? */
  enabled: Scalars['Boolean'];
  /** The name of the feature flag */
  name: PlatformFeatureFlagName;
};

export enum PlatformFeatureFlagName {
  Communications = 'COMMUNICATIONS',
  CommunicationsDiscussions = 'COMMUNICATIONS_DISCUSSIONS',
  GuidenceEngine = 'GUIDENCE_ENGINE',
  LandingPage = 'LANDING_PAGE',
  Notifications = 'NOTIFICATIONS',
  Ssi = 'SSI',
  Subscriptions = 'SUBSCRIPTIONS',
  Whiteboards = 'WHITEBOARDS',
}

export type PlatformLocations = {
  /** URL to a page about the platform */
  about: Scalars['String'];
  /** URL where users can get tips and tricks */
  aup: Scalars['String'];
  /** URL to the blog of the platform */
  blog: Scalars['String'];
  /** URL where users can see the community forum */
  community: Scalars['String'];
  /** URL for the link Contact in the HomePage and to create a new space with Enterprise plan */
  contactsupport: Scalars['String'];
  /** Main domain of the environment */
  domain: Scalars['String'];
  /** Name of the environment */
  environment: Scalars['String'];
  /** URL to a form for providing feedback */
  feedback: Scalars['String'];
  /** URL to latest forum release discussion where users can get information about the latest release */
  forumreleases: Scalars['String'];
  /** URL for the link Foundation in the HomePage of the application */
  foundation: Scalars['String'];
  /** URL where users can get help */
  help: Scalars['String'];
  /** URL for the link Impact in the HomePage of the application */
  impact: Scalars['String'];
  /** URL to a page about the innovation library */
  innovationLibrary: Scalars['String'];
  /** URL to a page about the collaboration tools */
  inspiration: Scalars['String'];
  /** URL to the landing page of the platform */
  landing: Scalars['String'];
  /** URL where new users can get onboarding help */
  newuser: Scalars['String'];
  /** URL for the link Opensource in the HomePage of the application */
  opensource: Scalars['String'];
  /** URL to the privacy policy for the platform */
  privacy: Scalars['String'];
  /** URL where users can get information about previous releases */
  releases: Scalars['String'];
  /** URL to the security policy for the platform */
  security: Scalars['String'];
  /** URL where users can get support for the platform */
  support: Scalars['String'];
  /** URL for the link Contact in the HomePage to switch between plans */
  switchplan: Scalars['String'];
  /** URL to the terms of usage for the platform */
  terms: Scalars['String'];
  /** URL where users can get tips and tricks */
  tips: Scalars['String'];
};

export enum PlatformRole {
  BetaTester = 'BETA_TESTER',
  CommunityReader = 'COMMUNITY_READER',
  GlobalAdmin = 'GLOBAL_ADMIN',
  LicenseManager = 'LICENSE_MANAGER',
  SpacesReader = 'SPACES_READER',
  Support = 'SUPPORT',
}

export type Post = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The comments on this Post. */
  comments: Room;
  /** The user that created this Post */
  createdBy?: Maybe<User>;
  createdDate: Scalars['DateTime'];
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID'];
  /** The Profile for this Post. */
  profile: Profile;
  /** The Post type, e.g. knowledge, idea, stakeholder persona etc. */
  type: Scalars['String'];
};

export type PostTemplate = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The default description to show to users filling our a new instance. */
  defaultDescription: Scalars['Markdown'];
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The Profile for this template. */
  profile: Profile;
  /** The type for this Post. */
  type: Scalars['String'];
};

export type Preference = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The definition for the Preference */
  definition: PreferenceDefinition;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** Value of the preference */
  value: Scalars['String'];
};

export type PreferenceDefinition = {
  /** Preference description */
  description: Scalars['String'];
  /** The name */
  displayName: Scalars['String'];
  /** The group for the preference within the containing entity type. */
  group: Scalars['String'];
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The type of the Preference, specific to the Entity it is on. */
  type: PreferenceType;
  /** Preference value type */
  valueType: PreferenceValueType;
};

export enum PreferenceType {
  AuthorizationOrganizationMatchDomain = 'AUTHORIZATION_ORGANIZATION_MATCH_DOMAIN',
  NotificationApplicationReceived = 'NOTIFICATION_APPLICATION_RECEIVED',
  NotificationApplicationSubmitted = 'NOTIFICATION_APPLICATION_SUBMITTED',
  NotificationCalloutPublished = 'NOTIFICATION_CALLOUT_PUBLISHED',
  NotificationCommentReply = 'NOTIFICATION_COMMENT_REPLY',
  NotificationCommunicationDiscussionCreated = 'NOTIFICATION_COMMUNICATION_DISCUSSION_CREATED',
  NotificationCommunicationDiscussionCreatedAdmin = 'NOTIFICATION_COMMUNICATION_DISCUSSION_CREATED_ADMIN',
  NotificationCommunicationMention = 'NOTIFICATION_COMMUNICATION_MENTION',
  NotificationCommunicationMessage = 'NOTIFICATION_COMMUNICATION_MESSAGE',
  NotificationCommunicationUpdates = 'NOTIFICATION_COMMUNICATION_UPDATES',
  NotificationCommunicationUpdateSentAdmin = 'NOTIFICATION_COMMUNICATION_UPDATE_SENT_ADMIN',
  NotificationCommunityCollaborationInterestAdmin = 'NOTIFICATION_COMMUNITY_COLLABORATION_INTEREST_ADMIN',
  NotificationCommunityCollaborationInterestUser = 'NOTIFICATION_COMMUNITY_COLLABORATION_INTEREST_USER',
  NotificationCommunityInvitationUser = 'NOTIFICATION_COMMUNITY_INVITATION_USER',
  NotificationCommunityNewMember = 'NOTIFICATION_COMMUNITY_NEW_MEMBER',
  NotificationCommunityNewMemberAdmin = 'NOTIFICATION_COMMUNITY_NEW_MEMBER_ADMIN',
  NotificationCommunityReviewSubmitted = 'NOTIFICATION_COMMUNITY_REVIEW_SUBMITTED',
  NotificationCommunityReviewSubmittedAdmin = 'NOTIFICATION_COMMUNITY_REVIEW_SUBMITTED_ADMIN',
  NotificationDiscussionCommentCreated = 'NOTIFICATION_DISCUSSION_COMMENT_CREATED',
  NotificationForumDiscussionComment = 'NOTIFICATION_FORUM_DISCUSSION_COMMENT',
  NotificationForumDiscussionCreated = 'NOTIFICATION_FORUM_DISCUSSION_CREATED',
  NotificationOrganizationMention = 'NOTIFICATION_ORGANIZATION_MENTION',
  NotificationOrganizationMessage = 'NOTIFICATION_ORGANIZATION_MESSAGE',
  NotificationPostCommentCreated = 'NOTIFICATION_POST_COMMENT_CREATED',
  NotificationPostCreated = 'NOTIFICATION_POST_CREATED',
  NotificationPostCreatedAdmin = 'NOTIFICATION_POST_CREATED_ADMIN',
  NotificationUserRemoved = 'NOTIFICATION_USER_REMOVED',
  NotificationUserSignUp = 'NOTIFICATION_USER_SIGN_UP',
  NotificationWhiteboardCreated = 'NOTIFICATION_WHITEBOARD_CREATED',
}

export enum PreferenceValueType {
  Boolean = 'BOOLEAN',
  Float = 'FLOAT',
  Int = 'INT',
  String = 'STRING',
}

export type Profile = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** A description of the entity associated with this profile. */
  description?: Maybe<Scalars['Markdown']>;
  /** The display name. */
  displayName: Scalars['String'];
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The location for this Profile. */
  location?: Maybe<Location>;
  /** A list of URLs to relevant information. */
  references?: Maybe<Array<Reference>>;
  /** The storage bucket for this Profile. */
  storageBucket: StorageBucket;
  /** The taglie for this entity. */
  tagline: Scalars['String'];
  /** The default or named tagset. */
  tagset?: Maybe<Tagset>;
  /** A list of named tagsets, each of which has a list of tags. */
  tagsets?: Maybe<Array<Tagset>>;
  /** A type of entity that this Profile is being used with. */
  type?: Maybe<ProfileType>;
  /** The URL at which this profile can be viewed. */
  url: Scalars['String'];
  /** A particular type of visual for this Profile. */
  visual?: Maybe<Visual>;
  /** A list of visuals for this Profile. */
  visuals: Array<Visual>;
};

export type ProfileTagsetArgs = {
  tagsetName?: InputMaybe<TagsetReservedName>;
};

export type ProfileVisualArgs = {
  type: VisualType;
};

export type ProfileCredentialVerified = {
  /** The email */
  userEmail: Scalars['String'];
  /** The vc. */
  vc: Scalars['String'];
};

export enum ProfileType {
  CalendarEvent = 'CALENDAR_EVENT',
  CalloutFraming = 'CALLOUT_FRAMING',
  CalloutTemplate = 'CALLOUT_TEMPLATE',
  Challenge = 'CHALLENGE',
  CommunityGuidelines = 'COMMUNITY_GUIDELINES',
  CommunityGuidelinesTemplate = 'COMMUNITY_GUIDELINES_TEMPLATE',
  ContributionLink = 'CONTRIBUTION_LINK',
  Discussion = 'DISCUSSION',
  InnovationFlow = 'INNOVATION_FLOW',
  InnovationFlowTemplate = 'INNOVATION_FLOW_TEMPLATE',
  InnovationHub = 'INNOVATION_HUB',
  InnovationPack = 'INNOVATION_PACK',
  Opportunity = 'OPPORTUNITY',
  Organization = 'ORGANIZATION',
  Post = 'POST',
  PostTemplate = 'POST_TEMPLATE',
  Space = 'SPACE',
  User = 'USER',
  UserGroup = 'USER_GROUP',
  VirtualContributor = 'VIRTUAL_CONTRIBUTOR',
  VirtualPersona = 'VIRTUAL_PERSONA',
  Whiteboard = 'WHITEBOARD',
  WhiteboardTemplate = 'WHITEBOARD_TEMPLATE',
}

export type Query = {
  /** An account. If no ID is specified then the first Account is returned. */
  account: Account;
  /** The Accounts on this platform; If accessed through an Innovation Hub will return ONLY the Accounts defined in it. */
  accounts: Array<Account>;
  /** Activity events related to the current user. */
  activityFeed: ActivityFeed;
  /** Activity events related to the current user grouped by Activity type and resource. */
  activityFeedGrouped: Array<ActivityLogEntry>;
  /** Retrieve the ActivityLog for the specified Collaboration */
  activityLogOnCollaboration: Array<ActivityLogEntry>;
  /** All Users that are members of a given room */
  adminCommunicationMembership: CommunicationAdminMembershipResult;
  /** Usage of the messaging platform that are not tied to the domain model. */
  adminCommunicationOrphanedUsage: CommunicationAdminOrphanedUsageResult;
  /** Alkemio AiServer */
  aiServer: AiServer;
  /** Ask the chat engine for guidance. */
  askChatGuidanceQuestion: MessageAnswerQuestion;
  /** Ask the virtual contributor a question directly. */
  askVirtualContributorQuestion: MessageAnswerQuestion;
  /** Get supported credential metadata */
  getSupportedVerifiedCredentialMetadata: Array<CredentialMetadataOutput>;
  /** Allow direct lookup of entities from the domain model */
  lookup: LookupQueryResults;
  /** Information about the current authenticated user */
  me: MeQueryResults;
  /** A particular Organization */
  organization: Organization;
  /** The Organizations on this platform */
  organizations: Array<Organization>;
  /** The Organizations on this platform in paginated format */
  organizationsPaginated: PaginatedOrganization;
  /** Alkemio Platform */
  platform: Platform;
  /** The roles that the specified Organization has. */
  rolesOrganization: ContributorRoles;
  /** The roles that that the specified User has. */
  rolesUser: ContributorRoles;
  /** The roles that the specified VirtualContributor has. */
  rolesVirtualContributor: ContributorRoles;
  /** Search the platform for terms supplied */
  search: ISearchResults;
  /** Look up a top level Space (i.e. a Space that does not have a parent Space) by the UUID or NameID. */
  space: Space;
  /** The Spaces on this platform; If accessed through an Innovation Hub will return ONLY the Spaces defined in it. */
  spaces: Array<Space>;
  /** The Spaces on this platform */
  spacesPaginated: PaginatedSpaces;
  /** Information about a specific task */
  task: Task;
  /** All tasks with filtering applied */
  tasks: Array<Task>;
  /** A particular user, identified by the ID or by email */
  user: User;
  /** Privileges assigned to a User (based on held credentials) given an Authorization defnition. */
  userAuthorizationPrivileges: Array<AuthorizationPrivilege>;
  /** The users who have profiles on this platform */
  users: Array<User>;
  /** The users who have profiles on this platform */
  usersPaginated: PaginatedUsers;
  /** All Users that hold credentials matching the supplied criteria. */
  usersWithAuthorizationCredential: Array<User>;
  /** A particular VirtualContributor */
  virtualContributor: VirtualContributor;
  /** The VirtualContributors on this platform */
  virtualContributors: Array<VirtualContributor>;
};

export type QueryAccountArgs = {
  ID: Scalars['UUID_NAMEID'];
};

export type QueryActivityFeedArgs = {
  after?: InputMaybe<Scalars['UUID']>;
  args?: InputMaybe<ActivityFeedQueryArgs>;
  before?: InputMaybe<Scalars['UUID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type QueryActivityFeedGroupedArgs = {
  args?: InputMaybe<ActivityFeedGroupedQueryArgs>;
};

export type QueryActivityLogOnCollaborationArgs = {
  queryData: ActivityLogInput;
};

export type QueryAdminCommunicationMembershipArgs = {
  communicationData: CommunicationAdminMembershipInput;
};

export type QueryAskChatGuidanceQuestionArgs = {
  chatData: ChatGuidanceInput;
};

export type QueryAskVirtualContributorQuestionArgs = {
  chatData: VirtualContributorQuestionInput;
};

export type QueryOrganizationArgs = {
  ID: Scalars['UUID_NAMEID'];
};

export type QueryOrganizationsArgs = {
  filter?: InputMaybe<ContributorFilterInput>;
  limit?: InputMaybe<Scalars['Float']>;
  shuffle?: InputMaybe<Scalars['Boolean']>;
};

export type QueryOrganizationsPaginatedArgs = {
  after?: InputMaybe<Scalars['UUID']>;
  before?: InputMaybe<Scalars['UUID']>;
  filter?: InputMaybe<OrganizationFilterInput>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type QueryRolesOrganizationArgs = {
  rolesData: RolesOrganizationInput;
};

export type QueryRolesUserArgs = {
  rolesData: RolesUserInput;
};

export type QueryRolesVirtualContributorArgs = {
  rolesData: RolesVirtualContributorInput;
};

export type QuerySearchArgs = {
  searchData: SearchInput;
};

export type QuerySpaceArgs = {
  ID: Scalars['UUID_NAMEID'];
};

export type QuerySpacesArgs = {
  IDs?: InputMaybe<Array<Scalars['UUID']>>;
  filter?: InputMaybe<SpaceFilterInput>;
};

export type QuerySpacesPaginatedArgs = {
  after?: InputMaybe<Scalars['UUID']>;
  before?: InputMaybe<Scalars['UUID']>;
  filter?: InputMaybe<SpaceFilterInput>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type QueryTaskArgs = {
  id: Scalars['UUID'];
};

export type QueryTasksArgs = {
  status?: InputMaybe<TaskStatus>;
};

export type QueryUserArgs = {
  ID: Scalars['UUID_NAMEID_EMAIL'];
};

export type QueryUserAuthorizationPrivilegesArgs = {
  userAuthorizationPrivilegesData: UserAuthorizationPrivilegesInput;
};

export type QueryUsersArgs = {
  IDs?: InputMaybe<Array<Scalars['UUID']>>;
  filter?: InputMaybe<ContributorFilterInput>;
  limit?: InputMaybe<Scalars['Float']>;
  shuffle?: InputMaybe<Scalars['Boolean']>;
};

export type QueryUsersPaginatedArgs = {
  after?: InputMaybe<Scalars['UUID']>;
  before?: InputMaybe<Scalars['UUID']>;
  filter?: InputMaybe<UserFilterInput>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

export type QueryUsersWithAuthorizationCredentialArgs = {
  credentialsCriteriaData: UsersWithAuthorizationCredentialInput;
};

export type QueryVirtualContributorArgs = {
  ID: Scalars['UUID_NAMEID'];
};

export type QueryVirtualContributorsArgs = {
  filter?: InputMaybe<ContributorFilterInput>;
  limit?: InputMaybe<Scalars['Float']>;
  shuffle?: InputMaybe<Scalars['Boolean']>;
};

export type Question = {
  /** The ID of the entity */
  id: Scalars['UUID'];
  name: Scalars['String'];
  value: Scalars['String'];
};

/** A reaction to a message. */
export type Reaction = {
  /** The reaction Emoji */
  emoji: Scalars['Emoji'];
  /** The id for the reaction. */
  id: Scalars['MessageID'];
  /** The user that reacted */
  sender?: Maybe<User>;
  /** The server timestamp in UTC */
  timestamp: Scalars['Float'];
};

export type Reference = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** Description of this reference */
  description?: Maybe<Scalars['String']>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** Name of the reference, e.g. Linkedin, Twitter etc. */
  name: Scalars['String'];
  /** URI of the reference */
  uri: Scalars['String'];
};

export type RefreshVirtualContributorBodyOfKnowledgeInput = {
  /** The ID of the Virtual Contributor to update. */
  virtualContributorID: Scalars['UUID'];
};

export type Relation = {
  actorName: Scalars['String'];
  actorRole: Scalars['String'];
  actorType: Scalars['String'];
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  description: Scalars['String'];
  /** The ID of the entity */
  id: Scalars['UUID'];
  type: Scalars['String'];
};

export type RelayPaginatedSpace = {
  /** The Account that this Space is part of. */
  account: Account;
  /** The Agent representing this Space. */
  agent: Agent;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The collaboration for the Space. */
  collaboration: Collaboration;
  /** Get the Community for the Space.  */
  community: Community;
  /** The context for the space. */
  context: Context;
  /** The date for the creation of this Space. */
  createdDate?: Maybe<Scalars['DateTime']>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The level of this Space, representing the number of Spaces above this one. */
  level: Scalars['Float'];
  /** Metrics about activity within this Space. */
  metrics?: Maybe<Array<Nvp>>;
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID'];
  /** The Profile for the Space. */
  profile: Profile;
  /** The settings for this Space. */
  settings: SpaceSettings;
  /** The StorageAggregator in use by this Space */
  storageAggregator: StorageAggregator;
  /** A particular subspace, either by its ID or nameID */
  subspace: Space;
  /** The subspaces for the space. */
  subspaces: Array<Space>;
  /** The Type of the Space e.g. space/challenge/opportunity. */
  type: SpaceType;
};

export type RelayPaginatedSpaceSubspaceArgs = {
  ID: Scalars['UUID_NAMEID'];
};

export type RelayPaginatedSpaceSubspacesArgs = {
  IDs?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['Float']>;
  shuffle?: InputMaybe<Scalars['Boolean']>;
};

export type RelayPaginatedSpaceEdge = {
  node: RelayPaginatedSpace;
};

export type RelayPaginatedSpacePageInfo = {
  /** The last cursor of the page result */
  endCursor?: Maybe<Scalars['String']>;
  /** Indicate whether more items exist after the returned ones */
  hasNextPage: Scalars['Boolean'];
  /** Indicate whether more items exist before the returned ones */
  hasPreviousPage: Scalars['Boolean'];
  /** The first cursor of the page result */
  startCursor?: Maybe<Scalars['String']>;
};

export type RemoveCommunityRoleFromOrganizationInput = {
  communityID: Scalars['UUID'];
  organizationID: Scalars['UUID_NAMEID'];
  role: CommunityRole;
};

export type RemoveCommunityRoleFromUserInput = {
  communityID: Scalars['UUID'];
  role: CommunityRole;
  userID: Scalars['UUID_NAMEID_EMAIL'];
};

export type RemoveCommunityRoleFromVirtualInput = {
  communityID: Scalars['UUID'];
  role: CommunityRole;
  virtualContributorID: Scalars['UUID_NAMEID'];
};

export type RemoveOrganizationRoleFromUserInput = {
  organizationID: Scalars['UUID_NAMEID'];
  role: OrganizationRole;
  userID: Scalars['UUID_NAMEID_EMAIL'];
};

export type RemovePlatformRoleFromUserInput = {
  role: PlatformRole;
  userID: Scalars['UUID_NAMEID_EMAIL'];
};

export type RemoveUserGroupMemberInput = {
  groupID: Scalars['UUID'];
  userID: Scalars['UUID_NAMEID_EMAIL'];
};

export type RevokeAuthorizationCredentialInput = {
  /** The resource to which access is being removed. */
  resourceID: Scalars['String'];
  type: AuthorizationCredential;
  /** The user from whom the credential is being removed. */
  userID: Scalars['UUID_NAMEID_EMAIL'];
};

export type RevokeLicensePlanFromAccount = {
  /** The ID of the Account to assign the LicensePlan to. */
  accountID: Scalars['UUID'];
  /** The ID of the LicensePlan to assign. */
  licensePlanID: Scalars['UUID'];
  /** The ID of the Licensing to use. */
  licensingID?: InputMaybe<Scalars['UUID']>;
};

export type RevokeOrganizationAuthorizationCredentialInput = {
  /** The Organization from whom the credential is being removed. */
  organizationID: Scalars['UUID'];
  /** The resource to which access is being removed. */
  resourceID?: InputMaybe<Scalars['UUID']>;
  type: AuthorizationCredential;
};

export type RolesOrganizationInput = {
  /** Return membership in Spaces matching the provided filter. */
  filter?: InputMaybe<SpaceFilterInput>;
  /** The ID of the organization to retrieve the roles of. */
  organizationID: Scalars['UUID_NAMEID'];
};

export type RolesResult = {
  /** Display name of the entity */
  displayName: Scalars['String'];
  /** A unique identifier for this membership result. */
  id: Scalars['String'];
  /** Name Identifier of the entity */
  nameID: Scalars['NameID'];
  /** The roles held by the contributor */
  roles: Array<Scalars['String']>;
};

export type RolesResultCommunity = {
  /** Display name of the entity */
  displayName: Scalars['String'];
  /** A unique identifier for this membership result. */
  id: Scalars['String'];
  /** The level of the Space e.g. space/challenge/opportunity. */
  level: Scalars['Float'];
  /** Name Identifier of the entity */
  nameID: Scalars['NameID'];
  /** The roles held by the contributor */
  roles: Array<Scalars['String']>;
  /** The Type of the Space e.g. space/challenge/opportunity. */
  type: SpaceType;
};

export type RolesResultOrganization = {
  /** Display name of the entity */
  displayName: Scalars['String'];
  /** A unique identifier for this membership result. */
  id: Scalars['String'];
  /** Name Identifier of the entity */
  nameID: Scalars['NameID'];
  /** The Organization ID. */
  organizationID: Scalars['String'];
  /** The roles held by the contributor */
  roles: Array<Scalars['String']>;
  /** Details of the Groups in the Organizations the user is a member of */
  userGroups: Array<RolesResult>;
};

export type RolesResultSpace = {
  /** Display name of the entity */
  displayName: Scalars['String'];
  /** A unique identifier for this membership result. */
  id: Scalars['String'];
  /** The level of the Space e.g. space/challenge/opportunity. */
  level: Scalars['Float'];
  /** Name Identifier of the entity */
  nameID: Scalars['NameID'];
  /** The roles held by the contributor */
  roles: Array<Scalars['String']>;
  /** The Space ID */
  spaceID: Scalars['String'];
  /** Details of the Subspace the user is a member of */
  subspaces: Array<RolesResultCommunity>;
  /** The Type of the Space e.g. space/challenge/opportunity. */
  type: SpaceType;
  /** Visibility of the Space. */
  visibility: SpaceVisibility;
};

export type RolesUserInput = {
  /** Return membership in Spaces matching the provided filter. */
  filter?: InputMaybe<SpaceFilterInput>;
  /** The ID of the user to retrieve the roles of. */
  userID: Scalars['UUID_NAMEID_EMAIL'];
};

export type RolesVirtualContributorInput = {
  /** The ID or nameID of the VC to retrieve the roles of. */
  virtualContributorID: Scalars['UUID_NAMEID'];
};

export type Room = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** Messages in this Room. */
  messages: Array<Message>;
  /** The number of messages in the Room. */
  messagesCount: Scalars['Float'];
};

export type RoomAddReactionToMessageInput = {
  /** The reaction to the message. */
  emoji: Scalars['Emoji'];
  /** The message id that is being reacted to */
  messageID: Scalars['MessageID'];
  /** The Room to remove a message from. */
  roomID: Scalars['UUID'];
};

/** The event happened in the subscribed room */
export type RoomEventSubscriptionResult = {
  /** A message related event. */
  message?: Maybe<RoomMessageEventSubscriptionResult>;
  /** A message reaction related event. */
  reaction?: Maybe<RoomMessageReactionEventSubscriptionResult>;
  /** The identifier for the Room on which the event happened. */
  roomID: Scalars['String'];
};

/** A message event happened in the subscribed room */
export type RoomMessageEventSubscriptionResult = {
  /** A message related event. */
  data: Message;
  /** The type of event. */
  type: MutationType;
};

/** A message reaction event happened in the subscribed room */
export type RoomMessageReactionEventSubscriptionResult = {
  /** A message related event. */
  data: Reaction;
  /** The message on which the reaction event happened. */
  messageID?: Maybe<Scalars['String']>;
  /** The type of event. */
  type: MutationType;
};

export type RoomRemoveMessageInput = {
  /** The message id that should be removed */
  messageID: Scalars['MessageID'];
  /** The Room to remove a message from. */
  roomID: Scalars['UUID'];
};

export type RoomRemoveReactionToMessageInput = {
  /** The reaction that is being removed */
  reactionID: Scalars['MessageID'];
  /** The Room to remove a message from. */
  roomID: Scalars['UUID'];
};

export type RoomSendMessageInput = {
  /** The message being sent */
  message: Scalars['String'];
  /** The Room the message is being sent to */
  roomID: Scalars['UUID'];
};

export type RoomSendMessageReplyInput = {
  /** The message being sent */
  message: Scalars['String'];
  /** The Room the message is being sent to */
  roomID: Scalars['UUID'];
  /** The message starting the thread being replied to */
  threadID: Scalars['MessageID'];
};

export type SearchInput = {
  /** Restrict the search to only the specified Space. Default is all Spaces. */
  searchInSpaceFilter?: InputMaybe<Scalars['UUID_NAMEID']>;
  /** Expand the search to includes Tagsets with the provided names. Max 2. */
  tagsetNames?: InputMaybe<Array<Scalars['String']>>;
  /** The terms to be searched for within this Space. Max 5. */
  terms: Array<Scalars['String']>;
  /** Restrict the search to only the specified entity types. Values allowed: space, subspace, user, group, organization, callout. Default is all. */
  typesFilter?: InputMaybe<Array<Scalars['String']>>;
};

export type SearchResult = {
  id: Scalars['UUID'];
  /** The score for this search result; more matches means a higher score. */
  score: Scalars['Float'];
  /** The terms that were matched for this result */
  terms: Array<Scalars['String']>;
  /** The type of returned result for this search. */
  type: SearchResultType;
};

export type SearchResultCallout = SearchResult & {
  /** The Callout that was found. */
  callout: Callout;
  id: Scalars['UUID'];
  /** The score for this search result; more matches means a higher score. */
  score: Scalars['Float'];
  /** The parent Space of the Callout. */
  space: Space;
  /** The terms that were matched for this result */
  terms: Array<Scalars['String']>;
  /** The type of returned result for this search. */
  type: SearchResultType;
};

export type SearchResultOrganization = SearchResult & {
  id: Scalars['UUID'];
  /** The Organization that was found. */
  organization: Organization;
  /** The score for this search result; more matches means a higher score. */
  score: Scalars['Float'];
  /** The terms that were matched for this result */
  terms: Array<Scalars['String']>;
  /** The type of returned result for this search. */
  type: SearchResultType;
};

export type SearchResultPost = SearchResult & {
  /** The Callout of the Post. */
  callout: Callout;
  id: Scalars['UUID'];
  /** The Post that was found. */
  post: Post;
  /** The score for this search result; more matches means a higher score. */
  score: Scalars['Float'];
  /** The Space of the Post. */
  space: Space;
  /** The terms that were matched for this result */
  terms: Array<Scalars['String']>;
  /** The type of returned result for this search. */
  type: SearchResultType;
};

export type SearchResultSpace = SearchResult & {
  id: Scalars['UUID'];
  /** The parent of this Space, if any. */
  parentSpace?: Maybe<Space>;
  /** The score for this search result; more matches means a higher score. */
  score: Scalars['Float'];
  /** The Space that was found. */
  space: Space;
  /** The terms that were matched for this result */
  terms: Array<Scalars['String']>;
  /** The type of returned result for this search. */
  type: SearchResultType;
};

export enum SearchResultType {
  Callout = 'CALLOUT',
  Challenge = 'CHALLENGE',
  Opportunity = 'OPPORTUNITY',
  Organization = 'ORGANIZATION',
  Post = 'POST',
  Space = 'SPACE',
  User = 'USER',
  Usergroup = 'USERGROUP',
}

export type SearchResultUser = SearchResult & {
  id: Scalars['UUID'];
  /** The score for this search result; more matches means a higher score. */
  score: Scalars['Float'];
  /** The terms that were matched for this result */
  terms: Array<Scalars['String']>;
  /** The type of returned result for this search. */
  type: SearchResultType;
  /** The User that was found. */
  user: User;
};

export type SearchResultUserGroup = SearchResult & {
  id: Scalars['UUID'];
  /** The score for this search result; more matches means a higher score. */
  score: Scalars['Float'];
  /** The terms that were matched for this result */
  terms: Array<Scalars['String']>;
  /** The type of returned result for this search. */
  type: SearchResultType;
  /** The User Group that was found. */
  userGroup: UserGroup;
};

export enum SearchVisibility {
  Account = 'ACCOUNT',
  Hidden = 'HIDDEN',
  Public = 'PUBLIC',
}

export type Sentry = {
  /** Flag indicating if the client should use Sentry for monitoring. */
  enabled: Scalars['Boolean'];
  /** URL to the Sentry endpoint. */
  endpoint: Scalars['String'];
  /** Flag indicating if PII should be submitted on Sentry events. */
  submitPII: Scalars['Boolean'];
};

export type ServiceMetadata = {
  /** Service name e.g. CT Server */
  name?: Maybe<Scalars['String']>;
  /** Version in the format {major.minor.patch} - using SemVer. */
  version?: Maybe<Scalars['String']>;
};

export type Space = {
  /** The Account that this Space is part of. */
  account: Account;
  /** The Agent representing this Space. */
  agent: Agent;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The collaboration for the Space. */
  collaboration: Collaboration;
  /** Get the Community for the Space.  */
  community: Community;
  /** The context for the space. */
  context: Context;
  /** The date for the creation of this Space. */
  createdDate?: Maybe<Scalars['DateTime']>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The level of this Space, representing the number of Spaces above this one. */
  level: Scalars['Float'];
  /** Metrics about activity within this Space. */
  metrics?: Maybe<Array<Nvp>>;
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID'];
  /** The Profile for the Space. */
  profile: Profile;
  /** The settings for this Space. */
  settings: SpaceSettings;
  /** The StorageAggregator in use by this Space */
  storageAggregator: StorageAggregator;
  /** A particular subspace, either by its ID or nameID */
  subspace: Space;
  /** The subspaces for the space. */
  subspaces: Array<Space>;
  /** The Type of the Space e.g. space/challenge/opportunity. */
  type: SpaceType;
};

export type SpaceSubspaceArgs = {
  ID: Scalars['UUID_NAMEID'];
};

export type SpaceSubspacesArgs = {
  IDs?: InputMaybe<Array<Scalars['UUID']>>;
  limit?: InputMaybe<Scalars['Float']>;
  shuffle?: InputMaybe<Scalars['Boolean']>;
};

export type SpaceDefaults = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The innovation flow template to use for new Challenges / Opportunities. */
  innovationFlowTemplate?: Maybe<InnovationFlowTemplate>;
};

export type SpaceFilterInput = {
  /** Return Spaces with a Visibility matching one of the provided types. */
  visibilities?: InputMaybe<Array<SpaceVisibility>>;
};

export enum SpaceIngestionPurpose {
  Context = 'CONTEXT',
  Knowledge = 'KNOWLEDGE',
}

export enum SpaceLevel {
  Challenge = 'CHALLENGE',
  Opportunity = 'OPPORTUNITY',
  Space = 'SPACE',
}

export enum SpacePrivacyMode {
  Private = 'PRIVATE',
  Public = 'PUBLIC',
}

export type SpaceSettings = {
  /** The collaboration settings for this Space. */
  collaboration: SpaceSettingsCollaboration;
  /** The membership settings for this Space. */
  membership: SpaceSettingsMembership;
  /** The privacy settings for this Space */
  privacy: SpaceSettingsPrivacy;
};

export type SpaceSettingsCollaboration = {
  /** Flag to control if members can create callouts. */
  allowMembersToCreateCallouts: Scalars['Boolean'];
  /** Flag to control if members can create subspaces. */
  allowMembersToCreateSubspaces: Scalars['Boolean'];
  /** Flag to control if ability to contribute is inherited from parent Space. */
  inheritMembershipRights: Scalars['Boolean'];
};

export type SpaceSettingsMembership = {
  /** Allow subspace admins to invite to this Space. */
  allowSubspaceAdminsToInviteMembers: Scalars['Boolean'];
  /** The membership policy in usage for this Space */
  policy: CommunityMembershipPolicy;
  /** The organizations that are trusted to Join as members for this Space */
  trustedOrganizations: Array<Scalars['UUID']>;
};

export type SpaceSettingsPrivacy = {
  /** Flag to control if Platform Support has admin rights. */
  allowPlatformSupportAsAdmin: Scalars['Boolean'];
  /** The privacy mode for this Space */
  mode: SpacePrivacyMode;
};

export enum SpaceType {
  BlankSlate = 'BLANK_SLATE',
  Challenge = 'CHALLENGE',
  Knowledge = 'KNOWLEDGE',
  Opportunity = 'OPPORTUNITY',
  Space = 'SPACE',
}

export enum SpaceVisibility {
  Active = 'ACTIVE',
  Archived = 'ARCHIVED',
  Demo = 'DEMO',
}

export type StorageAggregator = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The Storage Bucket for files directly on this Storage Aggregator (legacy). */
  directStorageBucket: StorageBucket;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The key information about the entity using this StorageAggregator, if any. */
  parentEntity?: Maybe<StorageAggregatorParent>;
  /** The aggregate size of all StorageBuckets for this StorageAggregator. */
  size: Scalars['Float'];
  /** The list of child storageAggregators for this StorageAggregator. */
  storageAggregators: Array<StorageAggregator>;
  /** The Storage Buckets that are being managed via this StorageAggregators. */
  storageBuckets: Array<StorageBucket>;
};

export type StorageAggregatorParent = {
  /** The display name. */
  displayName: Scalars['String'];
  /** The UUID of the parent entity. */
  id: Scalars['UUID'];
  /** The level of the parent Entity. */
  level: SpaceLevel;
  /** The URL that can be used to access the parent entity. */
  url: Scalars['String'];
};

export type StorageBucket = {
  /** Mime types allowed to be stored on this StorageBucket. */
  allowedMimeTypes: Array<Scalars['String']>;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** A single Document */
  document?: Maybe<Document>;
  /** The list of Documents for this StorageBucket. */
  documents: Array<Document>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** Maximum allowed file size on this StorageBucket. */
  maxFileSize: Scalars['Float'];
  /** The key information about the entity using this StorageBucket, if any. */
  parentEntity?: Maybe<StorageBucketParent>;
  /** The aggregate size of all Documents for this StorageBucket. */
  size: Scalars['Float'];
};

export type StorageBucketDocumentArgs = {
  ID: Scalars['UUID_NAMEID'];
};

export type StorageBucketDocumentsArgs = {
  IDs?: InputMaybe<Array<Scalars['UUID_NAMEID']>>;
  limit?: InputMaybe<Scalars['Float']>;
};

export type StorageBucketParent = {
  /** The display name. */
  displayName: Scalars['String'];
  /** The UUID of the parent entity. */
  id: Scalars['UUID'];
  /** The type of entity that this StorageBucket is being used with. */
  type: ProfileType;
  /** The URL that can be used to access the parent entity. */
  url: Scalars['String'];
};

export type StorageBucketUploadFileInput = {
  storageBucketId: Scalars['String'];
};

export type StorageBucketUploadFileOnLinkInput = {
  linkID: Scalars['String'];
};

export type StorageBucketUploadFileOnReferenceInput = {
  referenceID: Scalars['String'];
};

export type StorageConfig = {
  /** Config for uploading files to Alkemio. */
  file: FileStorageConfig;
};

export type Subscription = {
  activityCreated: ActivityCreatedSubscriptionResult;
  /** Receive new Update messages on Communities the currently authenticated User is a member of. */
  calloutPostCreated: CalloutPostCreated;
  /** Receive updates on Discussions */
  forumDiscussionUpdated: Discussion;
  /** Received on verified credentials change */
  profileVerifiedCredential: ProfileCredentialVerified;
  /** Receive Room event */
  roomEvents: RoomEventSubscriptionResult;
  /** Receive new Subspaces created on the Space. */
  subspaceCreated: SubspaceCreated;
  /** Receive Whiteboard Saved event */
  whiteboardSaved: WhiteboardSavedSubscriptionResult;
};

export type SubscriptionActivityCreatedArgs = {
  input: ActivityCreatedSubscriptionInput;
};

export type SubscriptionCalloutPostCreatedArgs = {
  calloutID: Scalars['UUID'];
};

export type SubscriptionForumDiscussionUpdatedArgs = {
  forumID: Scalars['UUID'];
};

export type SubscriptionRoomEventsArgs = {
  roomID: Scalars['UUID'];
};

export type SubscriptionSubspaceCreatedArgs = {
  spaceID: Scalars['UUID'];
};

export type SubscriptionWhiteboardSavedArgs = {
  whiteboardID: Scalars['UUID'];
};

export type SubspaceCreated = {
  /** The identifier for the Space on which the subspace was created. */
  spaceID: Scalars['UUID'];
  /** The subspace that has been created. */
  subspace: Space;
};

export type Tagset = {
  /** The allowed values for this Tagset. */
  allowedValues: Array<Scalars['String']>;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  name: Scalars['String'];
  tags: Array<Scalars['String']>;
  type: TagsetType;
};

export type TagsetArgs = {
  /** Return only Callouts that match one of the tagsets and any of the tags in them. */
  name: Scalars['String'];
  /** A list of tags to include. */
  tags: Array<Scalars['String']>;
};

export enum TagsetReservedName {
  CalloutGroup = 'CALLOUT_GROUP',
  Capabilities = 'CAPABILITIES',
  Default = 'DEFAULT',
  FlowState = 'FLOW_STATE',
  Keywords = 'KEYWORDS',
  Skills = 'SKILLS',
}

export type TagsetTemplate = {
  allowedValues: Array<Scalars['String']>;
  /** For Tagsets of type SELECT_ONE, the default selected value. */
  defaultSelectedValue?: Maybe<Scalars['String']>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  name: Scalars['String'];
  type: TagsetType;
};

export enum TagsetType {
  Freeform = 'FREEFORM',
  SelectMany = 'SELECT_MANY',
  SelectOne = 'SELECT_ONE',
}

export type Task = {
  /** The timestamp when the task was created */
  created: Scalars['Float'];
  /** the timestamp when the task was completed */
  end?: Maybe<Scalars['Float']>;
  /** info about the errors of the task */
  errors?: Maybe<Array<Scalars['String']>>;
  /** The UUID of the task */
  id: Scalars['UUID'];
  /** Amount of items that need to be processed */
  itemsCount?: Maybe<Scalars['Float']>;
  /** Amount of items that are already processed */
  itemsDone?: Maybe<Scalars['Float']>;
  /** The progress  of the task if the total item count is defined */
  progress?: Maybe<Scalars['Float']>;
  /** info about the completed part of the task */
  results?: Maybe<Array<Scalars['String']>>;
  /** The timestamp when the task was started */
  start: Scalars['Float'];
  /** The current status of the task */
  status: TaskStatus;
  /** TBD */
  type?: Maybe<Scalars['String']>;
};

/** The current status of the task */
export enum TaskStatus {
  Completed = 'COMPLETED',
  Errored = 'ERRORED',
  InProgress = 'IN_PROGRESS',
}

export type TemplatesSet = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The CalloutTemplates in this TemplatesSet. */
  calloutTemplates: Array<CalloutTemplate>;
  /** The total number of CalloutTemplates in this TemplatesSet. */
  calloutTemplatesCount: Scalars['Float'];
  /** A single CommunityGuidelinesTemplate */
  communityGuidelinesTemplate?: Maybe<CommunityGuidelinesTemplate>;
  /** The CommunityGuidelines in this TemplatesSet. */
  communityGuidelinesTemplates: Array<CommunityGuidelinesTemplate>;
  /** The total number of CommunityGuidelinesTemplates in this TemplatesSet. */
  communityGuidelinesTemplatesCount: Scalars['Float'];
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** A single InnovationFlowTemplate */
  innovationFlowTemplate?: Maybe<InnovationFlowTemplate>;
  /** The InnovationFlowTemplates in this TemplatesSet. */
  innovationFlowTemplates: Array<InnovationFlowTemplate>;
  /** The total number of InnovationFlowTemplates in this TemplatesSet. */
  innovationFlowTemplatesCount: Scalars['Float'];
  /** A single PostTemplate */
  postTemplate?: Maybe<PostTemplate>;
  /** The PostTemplates in this TemplatesSet. */
  postTemplates: Array<PostTemplate>;
  /** The total number of PostTemplates in this TemplatesSet. */
  postTemplatesCount: Scalars['Float'];
  /** A single WhiteboardTemplate */
  whiteboardTemplate?: Maybe<WhiteboardTemplate>;
  /** The WhiteboardTemplates in this TemplatesSet. */
  whiteboardTemplates: Array<WhiteboardTemplate>;
  /** The total number of WhiteboardTemplates in this TemplatesSet. */
  whiteboardTemplatesCount: Scalars['Float'];
};

export type TemplatesSetCommunityGuidelinesTemplateArgs = {
  ID: Scalars['UUID'];
};

export type TemplatesSetInnovationFlowTemplateArgs = {
  ID: Scalars['UUID'];
};

export type TemplatesSetPostTemplateArgs = {
  ID: Scalars['UUID'];
};

export type TemplatesSetWhiteboardTemplateArgs = {
  ID: Scalars['UUID'];
};

export type Timeline = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The Innovation Library for the timeline */
  calendar: Calendar;
  /** The ID of the entity */
  id: Scalars['UUID'];
};

export type UpdateAccountPlatformSettingsInput = {
  /** The identifier for the Account whose license etc is to be updated. */
  accountID: Scalars['UUID'];
  /** Update the host Organization or User for the Account. */
  hostID?: InputMaybe<Scalars['UUID_NAMEID']>;
  /** Update the license settings for the Account. */
  license?: InputMaybe<UpdateLicenseInput>;
};

export type UpdateActorInput = {
  ID: Scalars['UUID'];
  description?: InputMaybe<Scalars['String']>;
  impact?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
};

export type UpdateAiPersonaInput = {
  ID: Scalars['UUID'];
};

export type UpdateAiPersonaServiceInput = {
  ID: Scalars['UUID'];
  engine: AiPersonaEngine;
  prompt?: InputMaybe<Scalars['JSON']>;
};

export type UpdateCalendarEventInput = {
  ID: Scalars['UUID'];
  /** The length of the event in days. */
  durationDays?: InputMaybe<Scalars['Float']>;
  /** The length of the event in minutes. */
  durationMinutes: Scalars['Float'];
  /** Flag to indicate if this event is for multiple days. */
  multipleDays: Scalars['Boolean'];
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']>;
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
  /** The state date for the event. */
  startDate: Scalars['DateTime'];
  type?: InputMaybe<CalendarEventType>;
  /** Flag to indicate if this event is for a whole day. */
  wholeDay: Scalars['Boolean'];
};

export type UpdateCalloutContributionDefaultsInput = {
  /** The default description to use for new Post contributions. */
  postDescription?: InputMaybe<Scalars['Markdown']>;
  /** The default description to use for new Whiteboard contributions. */
  whiteboardContent?: InputMaybe<Scalars['WhiteboardContent']>;
};

export type UpdateCalloutContributionPolicyInput = {
  /** State of the callout. */
  state?: InputMaybe<CalloutState>;
};

export type UpdateCalloutFramingInput = {
  /** The Profile of the Template. */
  profile?: InputMaybe<UpdateProfileInput>;
  whiteboard?: InputMaybe<UpdateWhiteboardInput>;
  whiteboardContent?: InputMaybe<UpdateWhiteboardContentInput>;
};

export type UpdateCalloutInput = {
  ID: Scalars['UUID'];
  contributionDefaults?: InputMaybe<UpdateCalloutContributionDefaultsInput>;
  contributionPolicy?: InputMaybe<UpdateCalloutContributionPolicyInput>;
  framing?: InputMaybe<UpdateCalloutFramingInput>;
  /** Set Group for this Callout. */
  groupName?: InputMaybe<Scalars['String']>;
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']>;
  /** The sort order to assign to this Callout. */
  sortOrder?: InputMaybe<Scalars['Float']>;
};

export type UpdateCalloutPublishInfoInput = {
  /** The identifier for the Callout whose publisher is to be updated. */
  calloutID: Scalars['String'];
  /** The timestamp to set for the publishing of the Callout. */
  publishDate?: InputMaybe<Scalars['Float']>;
  /** The identifier of the publisher of the Callout. */
  publisherID?: InputMaybe<Scalars['UUID_NAMEID_EMAIL']>;
};

export type UpdateCalloutTemplateInput = {
  ID: Scalars['UUID'];
  contributionDefaults?: InputMaybe<UpdateCalloutContributionDefaultsInput>;
  contributionPolicy?: InputMaybe<UpdateCalloutContributionPolicyInput>;
  framing?: InputMaybe<UpdateCalloutFramingInput>;
  /** The Profile of the Template. */
  profile?: InputMaybe<UpdateProfileInput>;
};

export type UpdateCalloutVisibilityInput = {
  /** The identifier for the Callout whose visibility is to be updated. */
  calloutID: Scalars['String'];
  /** Send a notification on publishing. */
  sendNotification?: InputMaybe<Scalars['Boolean']>;
  /** Visibility of the Callout. */
  visibility: CalloutVisibility;
};

export type UpdateCollaborationCalloutsSortOrderInput = {
  /** The IDs of the callouts to update the sort order on */
  calloutIDs: Array<Scalars['UUID_NAMEID']>;
  collaborationID: Scalars['UUID'];
};

export type UpdateCommunityApplicationFormInput = {
  communityID: Scalars['UUID'];
  formData: UpdateFormInput;
};

export type UpdateCommunityGuidelinesInput = {
  /** ID of the CommunityGuidelines */
  communityGuidelinesID: Scalars['UUID'];
  /** The Profile for this community guidelines. */
  profile: UpdateProfileInput;
};

export type UpdateCommunityGuidelinesOfTemplateInput = {
  /** The Profile for this community guidelines. */
  profile: UpdateProfileInput;
};

export type UpdateCommunityGuidelinesTemplateInput = {
  ID: Scalars['UUID'];
  /** The Community guidelines to associate with this template. */
  communityGuidelines?: InputMaybe<UpdateCommunityGuidelinesOfTemplateInput>;
  /** The Profile of the Template. */
  profile?: InputMaybe<UpdateProfileInput>;
};

export type UpdateContextInput = {
  impact?: InputMaybe<Scalars['Markdown']>;
  vision?: InputMaybe<Scalars['Markdown']>;
  who?: InputMaybe<Scalars['Markdown']>;
};

export type UpdateDiscussionInput = {
  ID: Scalars['UUID'];
  /** The category for the Discussion */
  category?: InputMaybe<ForumDiscussionCategory>;
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']>;
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
};

export type UpdateDocumentInput = {
  ID: Scalars['UUID'];
  /** The display name for the Document. */
  displayName: Scalars['String'];
  tagset?: InputMaybe<UpdateTagsetInput>;
};

export type UpdateEcosystemModelInput = {
  ID: Scalars['UUID'];
  description?: InputMaybe<Scalars['String']>;
};

export type UpdateFormInput = {
  description: Scalars['Markdown'];
  questions: Array<UpdateFormQuestionInput>;
};

export type UpdateFormQuestionInput = {
  /** The explation text to clarify the question. */
  explanation: Scalars['String'];
  /** The maxiumum length of the answer, in characters, up to a limit of 512. */
  maxLength: Scalars['Float'];
  /** The question to be answered */
  question: Scalars['String'];
  /** Whether an answer is required for this Question. */
  required: Scalars['Boolean'];
  /** The sort order of this question in a wider set of questions. */
  sortOrder: Scalars['Float'];
};

export type UpdateInnovationFlowFromTemplateInput = {
  /** ID of the Innovation Flow */
  innovationFlowID: Scalars['UUID'];
  /** The InnovationFlow template whose State definition will be used for the Innovation Flow */
  innovationFlowTemplateID: Scalars['UUID'];
};

export type UpdateInnovationFlowInput = {
  /** ID of the Innovation Flow */
  innovationFlowID: Scalars['UUID'];
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
  states?: InputMaybe<Array<UpdateInnovationFlowStateInput>>;
};

export type UpdateInnovationFlowSelectedStateInput = {
  /** ID of the Innovation Flow */
  innovationFlowID: Scalars['UUID'];
  /** The State that the Innovation Flow is in */
  selectedState: Scalars['String'];
};

export type UpdateInnovationFlowSingleStateInput = {
  /** ID of the Innovation Flow */
  innovationFlowID: Scalars['UUID'];
  /** The name of the Innovation Flow State to be updated */
  stateDisplayName: Scalars['String'];
  stateUpdatedData: UpdateInnovationFlowStateInput;
};

export type UpdateInnovationFlowStateInput = {
  /** The explation text to clarify the State. */
  description?: InputMaybe<Scalars['Markdown']>;
  /** The display name for the State */
  displayName: Scalars['String'];
};

export type UpdateInnovationFlowTemplateInput = {
  ID: Scalars['UUID'];
  /** The Profile of the Template. */
  profile?: InputMaybe<UpdateProfileInput>;
  states?: InputMaybe<Array<UpdateInnovationFlowStateInput>>;
};

export type UpdateInnovationHubInput = {
  ID: Scalars['UUID'];
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']>;
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
  /** A list of Spaces to include in this Innovation Hub. Only valid when type 'list' is used. */
  spaceListFilter?: InputMaybe<Array<Scalars['UUID_NAMEID']>>;
  /** Spaces with which visibility this Innovation Hub will display. Only valid when type 'visibility' is used. */
  spaceVisibilityFilter?: InputMaybe<SpaceVisibility>;
};

export type UpdateInnovationHubPlatformSettingsInput = {
  ID: Scalars['UUID'];
  /** An Account ID associated with the InnovationHub */
  accountID: Scalars['UUID'];
};

export type UpdateInnovationPackInput = {
  /** The ID or NameID of the InnovationPack. */
  ID: Scalars['UUID_NAMEID'];
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']>;
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
  /** Update the provider Organization for the InnovationPack. */
  providerOrgID?: InputMaybe<Scalars['UUID_NAMEID']>;
};

export type UpdateLicenseInput = {
  /** Visibility of the Space. */
  visibility?: InputMaybe<SpaceVisibility>;
};

export type UpdateLicensePlanInput = {
  ID: Scalars['UUID'];
  /** Assign this plan to all new Organization accounts */
  assignToNewOrganizationAccounts?: InputMaybe<Scalars['Boolean']>;
  /** Assign this plan to all new User accounts */
  assignToNewUserAccounts?: InputMaybe<Scalars['Boolean']>;
  /** Is this plan enabled? */
  enabled?: InputMaybe<Scalars['Boolean']>;
  /** Is this plan free? */
  isFree?: InputMaybe<Scalars['Boolean']>;
  /** The credential to represent this plan */
  licenseCredential?: InputMaybe<LicenseCredential>;
  /** The price per month of this plan. */
  pricePerMonth?: InputMaybe<Scalars['Float']>;
  /** Does this plan require contact support */
  requiresContactSupport?: InputMaybe<Scalars['Boolean']>;
  /** Does this plan require a payment method? */
  requiresPaymentMethod?: InputMaybe<Scalars['Boolean']>;
  /** The sorting order for this Plan. */
  sortOrder?: InputMaybe<Scalars['Float']>;
  /** Is there a trial period enabled */
  trialEnabled?: InputMaybe<Scalars['Boolean']>;
};

export type UpdateLinkInput = {
  ID: Scalars['UUID'];
  /** The Profile of the Link. */
  profile?: InputMaybe<UpdateProfileInput>;
  uri?: InputMaybe<Scalars['String']>;
};

export type UpdateLocationInput = {
  addressLine1?: InputMaybe<Scalars['String']>;
  addressLine2?: InputMaybe<Scalars['String']>;
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  postalCode?: InputMaybe<Scalars['String']>;
  stateOrProvince?: InputMaybe<Scalars['String']>;
};

export type UpdateOrganizationInput = {
  /** The ID or NameID of the Organization to update. */
  ID: Scalars['UUID_NAMEID'];
  contactEmail?: InputMaybe<Scalars['String']>;
  domain?: InputMaybe<Scalars['String']>;
  legalEntityName?: InputMaybe<Scalars['String']>;
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']>;
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
  website?: InputMaybe<Scalars['String']>;
};

export type UpdateOrganizationPlatformSettingsInput = {
  /** Upate the URL path for the Organization. */
  nameID: Scalars['NameID'];
  /** The ID of the Organization to update. */
  organizationID: Scalars['UUID'];
};

export type UpdateOrganizationPreferenceInput = {
  /** ID of the Organization */
  organizationID: Scalars['UUID_NAMEID'];
  /** Type of the organization preference */
  type: OrganizationPreferenceType;
  value: Scalars['String'];
};

export type UpdatePostInput = {
  ID: Scalars['UUID'];
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']>;
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
  type?: InputMaybe<Scalars['String']>;
};

export type UpdatePostTemplateInput = {
  ID: Scalars['UUID'];
  /** The default description to be pre-filled when users create Posts based on this template. */
  defaultDescription?: InputMaybe<Scalars['Markdown']>;
  /** The Profile of the Template. */
  profile?: InputMaybe<UpdateProfileInput>;
  /** The type of Posts created from this Template. */
  type?: InputMaybe<Scalars['String']>;
};

export type UpdateProfileDirectInput = {
  description?: InputMaybe<Scalars['Markdown']>;
  /** The display name for the entity. */
  displayName?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<UpdateLocationInput>;
  profileID: Scalars['UUID'];
  references?: InputMaybe<Array<UpdateReferenceInput>>;
  /** A memorable short description for this entity. */
  tagline?: InputMaybe<Scalars['String']>;
  tagsets?: InputMaybe<Array<UpdateTagsetInput>>;
};

export type UpdateProfileInput = {
  description?: InputMaybe<Scalars['Markdown']>;
  /** The display name for the entity. */
  displayName?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<UpdateLocationInput>;
  references?: InputMaybe<Array<UpdateReferenceInput>>;
  /** A memorable short description for this entity. */
  tagline?: InputMaybe<Scalars['String']>;
  tagsets?: InputMaybe<Array<UpdateTagsetInput>>;
};

export type UpdateReferenceInput = {
  ID: Scalars['UUID'];
  description?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  uri?: InputMaybe<Scalars['String']>;
};

export type UpdateSpaceDefaultsInput = {
  /** The ID for the InnovationFlowtemplate to use for new Subspaces. */
  flowTemplateID: Scalars['UUID'];
  /** The identifier for the Space whose Defaaults are to be updated. */
  spaceID: Scalars['UUID'];
};

export type UpdateSpaceInput = {
  ID: Scalars['UUID'];
  /** Update the contained Context entity. */
  context?: InputMaybe<UpdateContextInput>;
  /** The Profile of the InnovationFlow of this entity. */
  innovationFlowData?: InputMaybe<UpdateInnovationFlowInput>;
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']>;
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
};

export type UpdateSpacePlatformSettingsInput = {
  /** Upate the URL path for the Space. */
  nameID: Scalars['NameID'];
  /** The identifier for the Space whose license etc is to be updated. */
  spaceID: Scalars['UUID'];
};

export type UpdateSpaceSettingsCollaborationInput = {
  /** Flag to control if members can create callouts. */
  allowMembersToCreateCallouts: Scalars['Boolean'];
  /** Flag to control if members can create subspaces. */
  allowMembersToCreateSubspaces: Scalars['Boolean'];
  /** Flag to control if ability to contribute is inherited from parent Space. */
  inheritMembershipRights: Scalars['Boolean'];
};

export type UpdateSpaceSettingsEntityInput = {
  collaboration?: InputMaybe<UpdateSpaceSettingsCollaborationInput>;
  membership?: InputMaybe<UpdateSpaceSettingsMembershipInput>;
  privacy?: InputMaybe<UpdateSpaceSettingsPrivacyInput>;
};

export type UpdateSpaceSettingsInput = {
  /** Update the settings for the Space. */
  settings: UpdateSpaceSettingsEntityInput;
  /** The identifier for the Space whose settings are to be updated. */
  spaceID: Scalars['String'];
};

export type UpdateSpaceSettingsMembershipInput = {
  /** Flag to control if Subspace admins can invite for this Space. */
  allowSubspaceAdminsToInviteMembers: Scalars['Boolean'];
  /** The membership policy in usage for this Space */
  policy: CommunityMembershipPolicy;
  /** The organizations that are trusted to Join as members for this Space */
  trustedOrganizations: Array<Scalars['UUID']>;
};

export type UpdateSpaceSettingsPrivacyInput = {
  /** Flag to control if Platform Support has admin rights. */
  allowPlatformSupportAsAdmin?: InputMaybe<Scalars['Boolean']>;
  mode?: InputMaybe<SpacePrivacyMode>;
};

export type UpdateTagsetInput = {
  ID: Scalars['UUID'];
  name?: InputMaybe<Scalars['String']>;
  tags: Array<Scalars['String']>;
};

export type UpdateUserGroupInput = {
  ID: Scalars['UUID'];
  name?: InputMaybe<Scalars['String']>;
  profileData?: InputMaybe<UpdateProfileInput>;
};

export type UpdateUserInput = {
  ID: Scalars['UUID_NAMEID_EMAIL'];
  accountUpn?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']>;
  phone?: InputMaybe<Scalars['String']>;
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
  /** Set this user profile as being used as a service account or not. */
  serviceProfile?: InputMaybe<Scalars['Boolean']>;
};

export type UpdateUserPlatformSettingsInput = {
  email?: InputMaybe<Scalars['String']>;
  /** Upate the URL path for the User. */
  nameID?: InputMaybe<Scalars['NameID']>;
  /** The identifier for the User whose platform managed information is to be updated. */
  userID: Scalars['String'];
};

export type UpdateUserPreferenceInput = {
  /** Type of the user preference */
  type: UserPreferenceType;
  /** ID of the User */
  userID: Scalars['UUID_NAMEID_EMAIL'];
  value: Scalars['String'];
};

export type UpdateVirtualContributorInput = {
  /** The ID of the Virtual Contributor to update. */
  ID: Scalars['UUID'];
  /** Flag to control the visibility of the VC in the platform store. */
  listedInStore?: InputMaybe<Scalars['Boolean']>;
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']>;
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
  /** Visibility of the VC in searches. */
  searchVisibility?: InputMaybe<SearchVisibility>;
};

export type UpdateVirtualContributorPlatformSettingsInput = {
  ID: Scalars['UUID'];
  /** An Account ID associated with the VirtualContributor */
  accountID: Scalars['UUID'];
};

export type UpdateVisualInput = {
  alternativeText?: InputMaybe<Scalars['String']>;
  uri: Scalars['String'];
  visualID: Scalars['String'];
};

export type UpdateWhiteboardContentInput = {
  ID: Scalars['UUID'];
  content: Scalars['WhiteboardContent'];
};

export type UpdateWhiteboardInput = {
  ID: Scalars['UUID'];
  contentUpdatePolicy?: InputMaybe<ContentUpdatePolicy>;
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']>;
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
};

export type UpdateWhiteboardTemplateInput = {
  ID: Scalars['UUID'];
  content?: InputMaybe<Scalars['WhiteboardContent']>;
  /** The Profile of the Template. */
  profile?: InputMaybe<UpdateProfileInput>;
};

export type User = Contributor & {
  /** The unique personal identifier (upn) for the account associated with this user profile */
  accountUpn: Scalars['String'];
  /** The accounts hosted by this User. */
  accounts: Array<Account>;
  /** The Agent representing this User. */
  agent: Agent;
  /** The authorization rules for the Contributor */
  authorization?: Maybe<Authorization>;
  /** The Community rooms this user is a member of */
  communityRooms?: Maybe<Array<CommunicationRoom>>;
  /** The direct rooms this user is a member of */
  directRooms?: Maybe<Array<DirectRoom>>;
  /** The email address for this User. */
  email: Scalars['String'];
  firstName: Scalars['String'];
  gender: Scalars['String'];
  /** The ID of the Contributor */
  id: Scalars['UUID'];
  /** Can a message be sent to this User. */
  isContactable: Scalars['Boolean'];
  lastName: Scalars['String'];
  /** A name identifier of the Contributor, unique within a given scope. */
  nameID: Scalars['NameID'];
  /** The phone number for this User. */
  phone: Scalars['String'];
  /** The preferences for this user */
  preferences: Array<Preference>;
  /** The Profile for this User. */
  profile: Profile;
  /** The StorageAggregator for managing storage buckets in use by this User */
  storageAggregator?: Maybe<StorageAggregator>;
};

export type UserAuthorizationPrivilegesInput = {
  /** The authorization definition to evaluate the user credentials against. */
  authorizationID: Scalars['UUID'];
  /** The user to evaluate privileges granted based on held credentials. */
  userID: Scalars['UUID_NAMEID_EMAIL'];
};

export type UserAuthorizationResetInput = {
  /** The identifier of the User whose Authorization Policy should be reset. */
  userID: Scalars['UUID_NAMEID_EMAIL'];
};

export type UserFilterInput = {
  displayName?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  firstName?: InputMaybe<Scalars['String']>;
  lastName?: InputMaybe<Scalars['String']>;
};

export type UserGroup = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The Users that are members of this User Group. */
  members?: Maybe<Array<User>>;
  /** Containing entity for this UserGroup. */
  parent?: Maybe<Groupable>;
  /** The profile for the user group */
  profile?: Maybe<Profile>;
};

export enum UserPreferenceType {
  NotificationApplicationReceived = 'NOTIFICATION_APPLICATION_RECEIVED',
  NotificationApplicationSubmitted = 'NOTIFICATION_APPLICATION_SUBMITTED',
  NotificationCalloutPublished = 'NOTIFICATION_CALLOUT_PUBLISHED',
  NotificationCommentReply = 'NOTIFICATION_COMMENT_REPLY',
  NotificationCommunicationDiscussionCreated = 'NOTIFICATION_COMMUNICATION_DISCUSSION_CREATED',
  NotificationCommunicationDiscussionCreatedAdmin = 'NOTIFICATION_COMMUNICATION_DISCUSSION_CREATED_ADMIN',
  NotificationCommunicationMention = 'NOTIFICATION_COMMUNICATION_MENTION',
  NotificationCommunicationMessage = 'NOTIFICATION_COMMUNICATION_MESSAGE',
  NotificationCommunicationUpdates = 'NOTIFICATION_COMMUNICATION_UPDATES',
  NotificationCommunicationUpdateSentAdmin = 'NOTIFICATION_COMMUNICATION_UPDATE_SENT_ADMIN',
  NotificationCommunityCollaborationInterestAdmin = 'NOTIFICATION_COMMUNITY_COLLABORATION_INTEREST_ADMIN',
  NotificationCommunityCollaborationInterestUser = 'NOTIFICATION_COMMUNITY_COLLABORATION_INTEREST_USER',
  NotificationCommunityInvitationUser = 'NOTIFICATION_COMMUNITY_INVITATION_USER',
  NotificationCommunityNewMember = 'NOTIFICATION_COMMUNITY_NEW_MEMBER',
  NotificationCommunityNewMemberAdmin = 'NOTIFICATION_COMMUNITY_NEW_MEMBER_ADMIN',
  NotificationCommunityReviewSubmitted = 'NOTIFICATION_COMMUNITY_REVIEW_SUBMITTED',
  NotificationCommunityReviewSubmittedAdmin = 'NOTIFICATION_COMMUNITY_REVIEW_SUBMITTED_ADMIN',
  NotificationDiscussionCommentCreated = 'NOTIFICATION_DISCUSSION_COMMENT_CREATED',
  NotificationForumDiscussionComment = 'NOTIFICATION_FORUM_DISCUSSION_COMMENT',
  NotificationForumDiscussionCreated = 'NOTIFICATION_FORUM_DISCUSSION_CREATED',
  NotificationOrganizationMention = 'NOTIFICATION_ORGANIZATION_MENTION',
  NotificationOrganizationMessage = 'NOTIFICATION_ORGANIZATION_MESSAGE',
  NotificationPostCommentCreated = 'NOTIFICATION_POST_COMMENT_CREATED',
  NotificationPostCreated = 'NOTIFICATION_POST_CREATED',
  NotificationPostCreatedAdmin = 'NOTIFICATION_POST_CREATED_ADMIN',
  NotificationUserRemoved = 'NOTIFICATION_USER_REMOVED',
  NotificationUserSignUp = 'NOTIFICATION_USER_SIGN_UP',
  NotificationWhiteboardCreated = 'NOTIFICATION_WHITEBOARD_CREATED',
}

export type UserSendMessageInput = {
  /** The message being sent */
  message: Scalars['String'];
  /** The user a message is being sent to */
  receivingUserID: Scalars['String'];
};

export type UsersWithAuthorizationCredentialInput = {
  /** The resource to which a credential needs to be bound. */
  resourceID?: InputMaybe<Scalars['UUID']>;
  /** The type of credential. */
  type: AuthorizationCredential;
};

export type VerifiedCredential = {
  /** The time at which the credential is no longer valid */
  claims: Array<VerifiedCredentialClaim>;
  /** JSON for the context in the credential */
  context: Scalars['JSON'];
  /** The time at which the credential is no longer valid */
  expires: Scalars['String'];
  /** The time at which the credential was issued */
  issued: Scalars['String'];
  /** The party issuing the VC */
  issuer: Scalars['String'];
  /** The name of the VC */
  name: Scalars['String'];
  /** The type of VC */
  type: Scalars['String'];
};

export type VerifiedCredentialClaim = {
  /** The name of the claim */
  name: Scalars['JSON'];
  /** The value for the claim */
  value: Scalars['JSON'];
};

export type VirtualContributor = Contributor & {
  /** The Account of the Virtual Contributor. */
  account?: Maybe<Account>;
  /** The Agent representing this User. */
  agent: Agent;
  /** The AI persona being used by this virtual contributor */
  aiPersona?: Maybe<AiPersona>;
  /** The authorization rules for the Contributor */
  authorization?: Maybe<Authorization>;
  /** The ID of the Contributor */
  id: Scalars['UUID'];
  /** Flag to control if this VC is listed in the platform store. */
  listedInStore: Scalars['Boolean'];
  /** A name identifier of the Contributor, unique within a given scope. */
  nameID: Scalars['NameID'];
  /** The profile for this Virtual. */
  profile: Profile;
  /** Visibility of the VC in searches. */
  searchVisibility: SearchVisibility;
  /** The StorageAggregator for managing storage buckets in use by this Virtual */
  storageAggregator?: Maybe<StorageAggregator>;
};

export type VirtualContributorQuestionInput = {
  /** The question that is being asked. */
  question: Scalars['String'];
  /** Virtual Contributor to be asked. */
  virtualContributorID: Scalars['UUID'];
};

export type Visual = {
  allowedTypes: Array<Scalars['String']>;
  alternativeText?: Maybe<Scalars['String']>;
  /** Post ratio width / height. */
  aspectRatio: Scalars['Float'];
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** Maximum height resolution. */
  maxHeight: Scalars['Float'];
  /** Maximum width resolution. */
  maxWidth: Scalars['Float'];
  /** Minimum height resolution. */
  minHeight: Scalars['Float'];
  /** Minimum width resolution. */
  minWidth: Scalars['Float'];
  name: Scalars['String'];
  uri: Scalars['String'];
};

export enum VisualType {
  Avatar = 'AVATAR',
  Banner = 'BANNER',
  BannerWide = 'BANNER_WIDE',
  Card = 'CARD',
}

export type VisualUploadImageInput = {
  alternativeText?: InputMaybe<Scalars['String']>;
  visualID: Scalars['String'];
};

export type Whiteboard = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The visual content of the Whiteboard. */
  content: Scalars['WhiteboardContent'];
  /** The policy governing who can update the Whiteboard contet. */
  contentUpdatePolicy: ContentUpdatePolicy;
  /** The user that created this Whiteboard */
  createdBy?: Maybe<User>;
  /** The date at which the Whiteboard was created. */
  createdDate: Scalars['DateTime'];
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** Whether the Whiteboard is multi-user enabled on Space level. */
  isMultiUser: Scalars['Boolean'];
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID'];
  /** The Profile for this Whiteboard. */
  profile: Profile;
  /** The date at which the Whiteboard was last updated. */
  updatedDate?: Maybe<Scalars['DateTime']>;
};

/** The save event happened in the subscribed whiteboard. */
export type WhiteboardSavedSubscriptionResult = {
  /** The date at which the Whiteboard was last updated. */
  updatedDate?: Maybe<Scalars['DateTime']>;
  /** The identifier for the Whiteboard on which the save event happened. */
  whiteboardID: Scalars['String'];
};

export type WhiteboardTemplate = {
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The visual content of the Whiteboard. */
  content: Scalars['WhiteboardContent'];
  /** The ID of the entity */
  id: Scalars['UUID'];
  /** The Profile for this template. */
  profile: Profile;
};

export type ResolverTypeWrapper<T> = Promise<T> | T;

export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<
  TResult,
  TKey extends string,
  TParent,
  TContext,
  TArgs
> {
  subscribe: SubscriptionSubscribeFn<
    { [key in TKey]: TResult },
    TParent,
    TContext,
    TArgs
  >;
  resolve?: SubscriptionResolveFn<
    TResult,
    { [key in TKey]: TResult },
    TContext,
    TArgs
  >;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<
  TResult,
  TKey extends string,
  TParent,
  TContext,
  TArgs
> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<
  TResult,
  TKey extends string,
  TParent = {},
  TContext = {},
  TArgs = {}
> =
  | ((
      ...args: any[]
    ) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => SchemaTypes.Maybe<TTypes> | Promise<SchemaTypes.Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (
  obj: T,
  context: TContext,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<
  TResult = {},
  TParent = {},
  TContext = {},
  TArgs = {}
> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  APM: ResolverTypeWrapper<SchemaTypes.Apm>;
  Account: ResolverTypeWrapper<SchemaTypes.Account>;
  AccountAuthorizationResetInput: SchemaTypes.AccountAuthorizationResetInput;
  AccountSubscription: ResolverTypeWrapper<SchemaTypes.AccountSubscription>;
  ActivityCreatedSubscriptionInput: SchemaTypes.ActivityCreatedSubscriptionInput;
  ActivityCreatedSubscriptionResult: ResolverTypeWrapper<
    SchemaTypes.ActivityCreatedSubscriptionResult
  >;
  ActivityEventType: SchemaTypes.ActivityEventType;
  ActivityFeed: ResolverTypeWrapper<SchemaTypes.ActivityFeed>;
  ActivityFeedGroupedQueryArgs: SchemaTypes.ActivityFeedGroupedQueryArgs;
  ActivityFeedQueryArgs: SchemaTypes.ActivityFeedQueryArgs;
  ActivityFeedRoles: SchemaTypes.ActivityFeedRoles;
  ActivityLogEntry:
    | ResolversTypes['ActivityLogEntryCalendarEventCreated']
    | ResolversTypes['ActivityLogEntryCalloutDiscussionComment']
    | ResolversTypes['ActivityLogEntryCalloutLinkCreated']
    | ResolversTypes['ActivityLogEntryCalloutPostComment']
    | ResolversTypes['ActivityLogEntryCalloutPostCreated']
    | ResolversTypes['ActivityLogEntryCalloutPublished']
    | ResolversTypes['ActivityLogEntryCalloutWhiteboardContentModified']
    | ResolversTypes['ActivityLogEntryCalloutWhiteboardCreated']
    | ResolversTypes['ActivityLogEntryChallengeCreated']
    | ResolversTypes['ActivityLogEntryMemberJoined']
    | ResolversTypes['ActivityLogEntryOpportunityCreated']
    | ResolversTypes['ActivityLogEntryUpdateSent'];
  ActivityLogEntryCalendarEventCreated: ResolverTypeWrapper<
    SchemaTypes.ActivityLogEntryCalendarEventCreated
  >;
  ActivityLogEntryCalloutDiscussionComment: ResolverTypeWrapper<
    SchemaTypes.ActivityLogEntryCalloutDiscussionComment
  >;
  ActivityLogEntryCalloutLinkCreated: ResolverTypeWrapper<
    SchemaTypes.ActivityLogEntryCalloutLinkCreated
  >;
  ActivityLogEntryCalloutPostComment: ResolverTypeWrapper<
    SchemaTypes.ActivityLogEntryCalloutPostComment
  >;
  ActivityLogEntryCalloutPostCreated: ResolverTypeWrapper<
    SchemaTypes.ActivityLogEntryCalloutPostCreated
  >;
  ActivityLogEntryCalloutPublished: ResolverTypeWrapper<
    SchemaTypes.ActivityLogEntryCalloutPublished
  >;
  ActivityLogEntryCalloutWhiteboardContentModified: ResolverTypeWrapper<
    SchemaTypes.ActivityLogEntryCalloutWhiteboardContentModified
  >;
  ActivityLogEntryCalloutWhiteboardCreated: ResolverTypeWrapper<
    SchemaTypes.ActivityLogEntryCalloutWhiteboardCreated
  >;
  ActivityLogEntryChallengeCreated: ResolverTypeWrapper<
    SchemaTypes.ActivityLogEntryChallengeCreated
  >;
  ActivityLogEntryMemberJoined: ResolverTypeWrapper<
    SchemaTypes.ActivityLogEntryMemberJoined
  >;
  ActivityLogEntryOpportunityCreated: ResolverTypeWrapper<
    SchemaTypes.ActivityLogEntryOpportunityCreated
  >;
  ActivityLogEntryUpdateSent: ResolverTypeWrapper<
    SchemaTypes.ActivityLogEntryUpdateSent
  >;
  ActivityLogInput: SchemaTypes.ActivityLogInput;
  Actor: ResolverTypeWrapper<SchemaTypes.Actor>;
  ActorGroup: ResolverTypeWrapper<SchemaTypes.ActorGroup>;
  Agent: ResolverTypeWrapper<SchemaTypes.Agent>;
  AgentBeginVerifiedCredentialOfferOutput: ResolverTypeWrapper<
    SchemaTypes.AgentBeginVerifiedCredentialOfferOutput
  >;
  AgentBeginVerifiedCredentialRequestOutput: ResolverTypeWrapper<
    SchemaTypes.AgentBeginVerifiedCredentialRequestOutput
  >;
  AiPersona: ResolverTypeWrapper<SchemaTypes.AiPersona>;
  AiPersonaBodyOfKnowledgeType: SchemaTypes.AiPersonaBodyOfKnowledgeType;
  AiPersonaDataAccessMode: SchemaTypes.AiPersonaDataAccessMode;
  AiPersonaEngine: SchemaTypes.AiPersonaEngine;
  AiPersonaInteractionMode: SchemaTypes.AiPersonaInteractionMode;
  AiPersonaService: ResolverTypeWrapper<SchemaTypes.AiPersonaService>;
  AiPersonaServiceIngestInput: SchemaTypes.AiPersonaServiceIngestInput;
  AiPersonaServiceQuestionInput: SchemaTypes.AiPersonaServiceQuestionInput;
  AiServer: ResolverTypeWrapper<SchemaTypes.AiServer>;
  AnyInvitation:
    | ResolversTypes['Invitation']
    | ResolversTypes['InvitationExternal'];
  Application: ResolverTypeWrapper<SchemaTypes.Application>;
  ApplicationEventInput: SchemaTypes.ApplicationEventInput;
  AssignCommunityRoleToOrganizationInput: SchemaTypes.AssignCommunityRoleToOrganizationInput;
  AssignCommunityRoleToUserInput: SchemaTypes.AssignCommunityRoleToUserInput;
  AssignCommunityRoleToVirtualInput: SchemaTypes.AssignCommunityRoleToVirtualInput;
  AssignLicensePlanToAccount: SchemaTypes.AssignLicensePlanToAccount;
  AssignOrganizationRoleToUserInput: SchemaTypes.AssignOrganizationRoleToUserInput;
  AssignPlatformRoleToUserInput: SchemaTypes.AssignPlatformRoleToUserInput;
  AssignUserGroupMemberInput: SchemaTypes.AssignUserGroupMemberInput;
  AuthenticationConfig: ResolverTypeWrapper<SchemaTypes.AuthenticationConfig>;
  AuthenticationProviderConfig: ResolverTypeWrapper<
    Omit<SchemaTypes.AuthenticationProviderConfig, 'config'> & {
      config: ResolversTypes['AuthenticationProviderConfigUnion'];
    }
  >;
  AuthenticationProviderConfigUnion: ResolversTypes['OryConfig'];
  Authorization: ResolverTypeWrapper<SchemaTypes.Authorization>;
  AuthorizationCredential: SchemaTypes.AuthorizationCredential;
  AuthorizationPolicyRuleCredential: ResolverTypeWrapper<
    SchemaTypes.AuthorizationPolicyRuleCredential
  >;
  AuthorizationPolicyRulePrivilege: ResolverTypeWrapper<
    SchemaTypes.AuthorizationPolicyRulePrivilege
  >;
  AuthorizationPolicyRuleVerifiedCredential: ResolverTypeWrapper<
    SchemaTypes.AuthorizationPolicyRuleVerifiedCredential
  >;
  AuthorizationPrivilege: SchemaTypes.AuthorizationPrivilege;
  Boolean: ResolverTypeWrapper<SchemaTypes.Scalars['Boolean']>;
  CID: ResolverTypeWrapper<SchemaTypes.Scalars['CID']>;
  Calendar: ResolverTypeWrapper<SchemaTypes.Calendar>;
  CalendarEvent: ResolverTypeWrapper<SchemaTypes.CalendarEvent>;
  CalendarEventType: SchemaTypes.CalendarEventType;
  Callout: ResolverTypeWrapper<SchemaTypes.Callout>;
  CalloutContribution: ResolverTypeWrapper<SchemaTypes.CalloutContribution>;
  CalloutContributionDefaults: ResolverTypeWrapper<
    SchemaTypes.CalloutContributionDefaults
  >;
  CalloutContributionFilterArgs: SchemaTypes.CalloutContributionFilterArgs;
  CalloutContributionPolicy: ResolverTypeWrapper<
    SchemaTypes.CalloutContributionPolicy
  >;
  CalloutContributionType: SchemaTypes.CalloutContributionType;
  CalloutFraming: ResolverTypeWrapper<SchemaTypes.CalloutFraming>;
  CalloutGroup: ResolverTypeWrapper<SchemaTypes.CalloutGroup>;
  CalloutGroupName: SchemaTypes.CalloutGroupName;
  CalloutPostCreated: ResolverTypeWrapper<SchemaTypes.CalloutPostCreated>;
  CalloutState: SchemaTypes.CalloutState;
  CalloutTemplate: ResolverTypeWrapper<SchemaTypes.CalloutTemplate>;
  CalloutType: SchemaTypes.CalloutType;
  CalloutVisibility: SchemaTypes.CalloutVisibility;
  ChatGuidanceAnswerRelevanceInput: SchemaTypes.ChatGuidanceAnswerRelevanceInput;
  ChatGuidanceInput: SchemaTypes.ChatGuidanceInput;
  Collaboration: ResolverTypeWrapper<SchemaTypes.Collaboration>;
  Communication: ResolverTypeWrapper<SchemaTypes.Communication>;
  CommunicationAdminEnsureAccessInput: SchemaTypes.CommunicationAdminEnsureAccessInput;
  CommunicationAdminMembershipInput: SchemaTypes.CommunicationAdminMembershipInput;
  CommunicationAdminMembershipResult: ResolverTypeWrapper<
    SchemaTypes.CommunicationAdminMembershipResult
  >;
  CommunicationAdminOrphanedUsageResult: ResolverTypeWrapper<
    SchemaTypes.CommunicationAdminOrphanedUsageResult
  >;
  CommunicationAdminRemoveOrphanedRoomInput: SchemaTypes.CommunicationAdminRemoveOrphanedRoomInput;
  CommunicationAdminRoomMembershipResult: ResolverTypeWrapper<
    SchemaTypes.CommunicationAdminRoomMembershipResult
  >;
  CommunicationAdminRoomResult: ResolverTypeWrapper<
    SchemaTypes.CommunicationAdminRoomResult
  >;
  CommunicationAdminUpdateRoomsJoinRuleInput: SchemaTypes.CommunicationAdminUpdateRoomsJoinRuleInput;
  CommunicationRoom: ResolverTypeWrapper<SchemaTypes.CommunicationRoom>;
  CommunicationSendMessageToCommunityLeadsInput: SchemaTypes.CommunicationSendMessageToCommunityLeadsInput;
  CommunicationSendMessageToOrganizationInput: SchemaTypes.CommunicationSendMessageToOrganizationInput;
  CommunicationSendMessageToUserInput: SchemaTypes.CommunicationSendMessageToUserInput;
  Community: ResolverTypeWrapper<SchemaTypes.Community>;
  CommunityApplicationForRoleResult: ResolverTypeWrapper<
    SchemaTypes.CommunityApplicationForRoleResult
  >;
  CommunityApplicationResult: ResolverTypeWrapper<
    SchemaTypes.CommunityApplicationResult
  >;
  CommunityApplyInput: SchemaTypes.CommunityApplyInput;
  CommunityContributorType: SchemaTypes.CommunityContributorType;
  CommunityGuidelines: ResolverTypeWrapper<SchemaTypes.CommunityGuidelines>;
  CommunityGuidelinesTemplate: ResolverTypeWrapper<
    SchemaTypes.CommunityGuidelinesTemplate
  >;
  CommunityInvitationForRoleResult: ResolverTypeWrapper<
    SchemaTypes.CommunityInvitationForRoleResult
  >;
  CommunityInvitationResult: ResolverTypeWrapper<
    SchemaTypes.CommunityInvitationResult
  >;
  CommunityJoinInput: SchemaTypes.CommunityJoinInput;
  CommunityMembershipPolicy: SchemaTypes.CommunityMembershipPolicy;
  CommunityMembershipStatus: SchemaTypes.CommunityMembershipStatus;
  CommunityPolicy: ResolverTypeWrapper<SchemaTypes.CommunityPolicy>;
  CommunityRole: SchemaTypes.CommunityRole;
  CommunityRoleImplicit: SchemaTypes.CommunityRoleImplicit;
  CommunityRolePolicy: ResolverTypeWrapper<SchemaTypes.CommunityRolePolicy>;
  Config: ResolverTypeWrapper<SchemaTypes.Config>;
  ContentUpdatePolicy: SchemaTypes.ContentUpdatePolicy;
  Context: ResolverTypeWrapper<SchemaTypes.Context>;
  Contributor:
    | ResolversTypes['Organization']
    | ResolversTypes['User']
    | ResolversTypes['VirtualContributor'];
  ContributorFilterInput: SchemaTypes.ContributorFilterInput;
  ContributorRoles: ResolverTypeWrapper<SchemaTypes.ContributorRoles>;
  ConvertSubspaceToSpaceInput: SchemaTypes.ConvertSubspaceToSpaceInput;
  ConvertSubsubspaceToSubspaceInput: SchemaTypes.ConvertSubsubspaceToSubspaceInput;
  CreateAccountInput: SchemaTypes.CreateAccountInput;
  CreateActorGroupInput: SchemaTypes.CreateActorGroupInput;
  CreateActorInput: SchemaTypes.CreateActorInput;
  CreateAiPersonaInput: SchemaTypes.CreateAiPersonaInput;
  CreateAiPersonaServiceInput: SchemaTypes.CreateAiPersonaServiceInput;
  CreateCalendarEventOnCalendarInput: SchemaTypes.CreateCalendarEventOnCalendarInput;
  CreateCalloutContributionDefaultsInput: SchemaTypes.CreateCalloutContributionDefaultsInput;
  CreateCalloutContributionPolicyInput: SchemaTypes.CreateCalloutContributionPolicyInput;
  CreateCalloutFramingInput: SchemaTypes.CreateCalloutFramingInput;
  CreateCalloutOnCollaborationInput: SchemaTypes.CreateCalloutOnCollaborationInput;
  CreateCalloutTemplateOnTemplatesSetInput: SchemaTypes.CreateCalloutTemplateOnTemplatesSetInput;
  CreateCollaborationInput: SchemaTypes.CreateCollaborationInput;
  CreateCommunityGuidelinesInput: SchemaTypes.CreateCommunityGuidelinesInput;
  CreateCommunityGuidelinesTemplateOnTemplatesSetInput: SchemaTypes.CreateCommunityGuidelinesTemplateOnTemplatesSetInput;
  CreateContextInput: SchemaTypes.CreateContextInput;
  CreateContributionOnCalloutInput: SchemaTypes.CreateContributionOnCalloutInput;
  CreateInnovationFlowTemplateOnTemplatesSetInput: SchemaTypes.CreateInnovationFlowTemplateOnTemplatesSetInput;
  CreateInnovationHubInput: SchemaTypes.CreateInnovationHubInput;
  CreateInnovationPackOnLibraryInput: SchemaTypes.CreateInnovationPackOnLibraryInput;
  CreateInvitationForContributorsOnCommunityInput: SchemaTypes.CreateInvitationForContributorsOnCommunityInput;
  CreateInvitationUserByEmailOnCommunityInput: SchemaTypes.CreateInvitationUserByEmailOnCommunityInput;
  CreateLicensePlanOnLicensingInput: SchemaTypes.CreateLicensePlanOnLicensingInput;
  CreateLinkInput: SchemaTypes.CreateLinkInput;
  CreateLocationInput: SchemaTypes.CreateLocationInput;
  CreateNVPInput: SchemaTypes.CreateNvpInput;
  CreateOrganizationInput: SchemaTypes.CreateOrganizationInput;
  CreatePostInput: SchemaTypes.CreatePostInput;
  CreatePostTemplateOnTemplatesSetInput: SchemaTypes.CreatePostTemplateOnTemplatesSetInput;
  CreateProfileInput: SchemaTypes.CreateProfileInput;
  CreateReferenceInput: SchemaTypes.CreateReferenceInput;
  CreateReferenceOnProfileInput: SchemaTypes.CreateReferenceOnProfileInput;
  CreateRelationOnCollaborationInput: SchemaTypes.CreateRelationOnCollaborationInput;
  CreateSpaceInput: SchemaTypes.CreateSpaceInput;
  CreateSubspaceInput: SchemaTypes.CreateSubspaceInput;
  CreateTagsetInput: SchemaTypes.CreateTagsetInput;
  CreateTagsetOnProfileInput: SchemaTypes.CreateTagsetOnProfileInput;
  CreateUserGroupInput: SchemaTypes.CreateUserGroupInput;
  CreateUserInput: SchemaTypes.CreateUserInput;
  CreateVirtualContributorOnAccountInput: SchemaTypes.CreateVirtualContributorOnAccountInput;
  CreateWhiteboardInput: SchemaTypes.CreateWhiteboardInput;
  CreateWhiteboardTemplateOnTemplatesSetInput: SchemaTypes.CreateWhiteboardTemplateOnTemplatesSetInput;
  Credential: ResolverTypeWrapper<SchemaTypes.Credential>;
  CredentialDefinition: ResolverTypeWrapper<SchemaTypes.CredentialDefinition>;
  CredentialMetadataOutput: ResolverTypeWrapper<
    SchemaTypes.CredentialMetadataOutput
  >;
  CredentialType: SchemaTypes.CredentialType;
  DID: ResolverTypeWrapper<SchemaTypes.Scalars['DID']>;
  DateTime: ResolverTypeWrapper<SchemaTypes.Scalars['DateTime']>;
  DeleteActorGroupInput: SchemaTypes.DeleteActorGroupInput;
  DeleteActorInput: SchemaTypes.DeleteActorInput;
  DeleteAiPersonaServiceInput: SchemaTypes.DeleteAiPersonaServiceInput;
  DeleteApplicationInput: SchemaTypes.DeleteApplicationInput;
  DeleteCalendarEventInput: SchemaTypes.DeleteCalendarEventInput;
  DeleteCalloutInput: SchemaTypes.DeleteCalloutInput;
  DeleteCalloutTemplateInput: SchemaTypes.DeleteCalloutTemplateInput;
  DeleteCollaborationInput: SchemaTypes.DeleteCollaborationInput;
  DeleteCommunityGuidelinesTemplateInput: SchemaTypes.DeleteCommunityGuidelinesTemplateInput;
  DeleteDiscussionInput: SchemaTypes.DeleteDiscussionInput;
  DeleteDocumentInput: SchemaTypes.DeleteDocumentInput;
  DeleteInnovationFlowTemplateInput: SchemaTypes.DeleteInnovationFlowTemplateInput;
  DeleteInnovationHubInput: SchemaTypes.DeleteInnovationHubInput;
  DeleteInnovationPackInput: SchemaTypes.DeleteInnovationPackInput;
  DeleteInvitationExternalInput: SchemaTypes.DeleteInvitationExternalInput;
  DeleteInvitationInput: SchemaTypes.DeleteInvitationInput;
  DeleteLicensePlanInput: SchemaTypes.DeleteLicensePlanInput;
  DeleteLinkInput: SchemaTypes.DeleteLinkInput;
  DeleteOrganizationInput: SchemaTypes.DeleteOrganizationInput;
  DeletePostInput: SchemaTypes.DeletePostInput;
  DeletePostTemplateInput: SchemaTypes.DeletePostTemplateInput;
  DeleteReferenceInput: SchemaTypes.DeleteReferenceInput;
  DeleteRelationInput: SchemaTypes.DeleteRelationInput;
  DeleteSpaceInput: SchemaTypes.DeleteSpaceInput;
  DeleteStorageBuckeetInput: SchemaTypes.DeleteStorageBuckeetInput;
  DeleteUserGroupInput: SchemaTypes.DeleteUserGroupInput;
  DeleteUserInput: SchemaTypes.DeleteUserInput;
  DeleteVirtualContributorInput: SchemaTypes.DeleteVirtualContributorInput;
  DeleteWhiteboardInput: SchemaTypes.DeleteWhiteboardInput;
  DeleteWhiteboardTemplateInput: SchemaTypes.DeleteWhiteboardTemplateInput;
  DirectRoom: ResolverTypeWrapper<SchemaTypes.DirectRoom>;
  Discussion: ResolverTypeWrapper<SchemaTypes.Discussion>;
  DiscussionsInput: SchemaTypes.DiscussionsInput;
  DiscussionsOrderBy: SchemaTypes.DiscussionsOrderBy;
  Document: ResolverTypeWrapper<SchemaTypes.Document>;
  EcosystemModel: ResolverTypeWrapper<SchemaTypes.EcosystemModel>;
  Emoji: ResolverTypeWrapper<SchemaTypes.Scalars['Emoji']>;
  FileStorageConfig: ResolverTypeWrapper<SchemaTypes.FileStorageConfig>;
  Float: ResolverTypeWrapper<SchemaTypes.Scalars['Float']>;
  Form: ResolverTypeWrapper<SchemaTypes.Form>;
  FormQuestion: ResolverTypeWrapper<SchemaTypes.FormQuestion>;
  Forum: ResolverTypeWrapper<SchemaTypes.Forum>;
  ForumCreateDiscussionInput: SchemaTypes.ForumCreateDiscussionInput;
  ForumDiscussionCategory: SchemaTypes.ForumDiscussionCategory;
  ForumDiscussionPrivacy: SchemaTypes.ForumDiscussionPrivacy;
  Geo: ResolverTypeWrapper<SchemaTypes.Geo>;
  GrantAuthorizationCredentialInput: SchemaTypes.GrantAuthorizationCredentialInput;
  GrantOrganizationAuthorizationCredentialInput: SchemaTypes.GrantOrganizationAuthorizationCredentialInput;
  Groupable: ResolversTypes['Community'] | ResolversTypes['Organization'];
  ISearchResults: ResolverTypeWrapper<SchemaTypes.ISearchResults>;
  IngestSpaceInput: SchemaTypes.IngestSpaceInput;
  InnovationFlow: ResolverTypeWrapper<SchemaTypes.InnovationFlow>;
  InnovationFlowState: ResolverTypeWrapper<SchemaTypes.InnovationFlowState>;
  InnovationFlowTemplate: ResolverTypeWrapper<
    SchemaTypes.InnovationFlowTemplate
  >;
  InnovationHub: ResolverTypeWrapper<SchemaTypes.InnovationHub>;
  InnovationHubType: SchemaTypes.InnovationHubType;
  InnovationPack: ResolverTypeWrapper<SchemaTypes.InnovationPack>;
  InnovationPacksInput: SchemaTypes.InnovationPacksInput;
  InnovationPacksOrderBy: SchemaTypes.InnovationPacksOrderBy;
  Int: ResolverTypeWrapper<SchemaTypes.Scalars['Int']>;
  Invitation: ResolverTypeWrapper<SchemaTypes.Invitation>;
  InvitationEventInput: SchemaTypes.InvitationEventInput;
  InvitationExternal: ResolverTypeWrapper<SchemaTypes.InvitationExternal>;
  JSON: ResolverTypeWrapper<SchemaTypes.Scalars['JSON']>;
  LatestReleaseDiscussion: ResolverTypeWrapper<
    SchemaTypes.LatestReleaseDiscussion
  >;
  Library: ResolverTypeWrapper<SchemaTypes.Library>;
  License: ResolverTypeWrapper<SchemaTypes.License>;
  LicenseCredential: SchemaTypes.LicenseCredential;
  LicensePlan: ResolverTypeWrapper<SchemaTypes.LicensePlan>;
  LicensePlanType: SchemaTypes.LicensePlanType;
  LicensePolicy: ResolverTypeWrapper<SchemaTypes.LicensePolicy>;
  LicensePolicyCredentialRule: ResolverTypeWrapper<
    SchemaTypes.LicensePolicyCredentialRule
  >;
  LicensePrivilege: SchemaTypes.LicensePrivilege;
  Licensing: ResolverTypeWrapper<SchemaTypes.Licensing>;
  Lifecycle: ResolverTypeWrapper<SchemaTypes.Lifecycle>;
  LifecycleDefinition: ResolverTypeWrapper<
    SchemaTypes.Scalars['LifecycleDefinition']
  >;
  Link: ResolverTypeWrapper<SchemaTypes.Link>;
  Location: ResolverTypeWrapper<SchemaTypes.Location>;
  LookupQueryResults: ResolverTypeWrapper<SchemaTypes.LookupQueryResults>;
  Markdown: ResolverTypeWrapper<SchemaTypes.Scalars['Markdown']>;
  MeQueryResults: ResolverTypeWrapper<SchemaTypes.MeQueryResults>;
  Message: ResolverTypeWrapper<SchemaTypes.Message>;
  MessageAnswerQuestion: ResolverTypeWrapper<SchemaTypes.MessageAnswerQuestion>;
  MessageAnswerToQuestionSource: ResolverTypeWrapper<
    SchemaTypes.MessageAnswerToQuestionSource
  >;
  MessageID: ResolverTypeWrapper<SchemaTypes.Scalars['MessageID']>;
  Metadata: ResolverTypeWrapper<SchemaTypes.Metadata>;
  MigrateEmbeddings: ResolverTypeWrapper<SchemaTypes.MigrateEmbeddings>;
  MimeType: SchemaTypes.MimeType;
  MoveCalloutContributionInput: SchemaTypes.MoveCalloutContributionInput;
  Mutation: ResolverTypeWrapper<{}>;
  MutationType: SchemaTypes.MutationType;
  MySpaceResults: ResolverTypeWrapper<SchemaTypes.MySpaceResults>;
  NVP: ResolverTypeWrapper<SchemaTypes.Nvp>;
  NameID: ResolverTypeWrapper<SchemaTypes.Scalars['NameID']>;
  Organization: ResolverTypeWrapper<SchemaTypes.Organization>;
  OrganizationAuthorizationResetInput: SchemaTypes.OrganizationAuthorizationResetInput;
  OrganizationFilterInput: SchemaTypes.OrganizationFilterInput;
  OrganizationPreferenceType: SchemaTypes.OrganizationPreferenceType;
  OrganizationRole: SchemaTypes.OrganizationRole;
  OrganizationVerification: ResolverTypeWrapper<
    SchemaTypes.OrganizationVerification
  >;
  OrganizationVerificationEnum: SchemaTypes.OrganizationVerificationEnum;
  OrganizationVerificationEventInput: SchemaTypes.OrganizationVerificationEventInput;
  OryConfig: ResolverTypeWrapper<SchemaTypes.OryConfig>;
  PageInfo: ResolverTypeWrapper<SchemaTypes.PageInfo>;
  PaginatedOrganization: ResolverTypeWrapper<SchemaTypes.PaginatedOrganization>;
  PaginatedSpaces: ResolverTypeWrapper<SchemaTypes.PaginatedSpaces>;
  PaginatedUsers: ResolverTypeWrapper<SchemaTypes.PaginatedUsers>;
  Platform: ResolverTypeWrapper<SchemaTypes.Platform>;
  PlatformFeatureFlag: ResolverTypeWrapper<SchemaTypes.PlatformFeatureFlag>;
  PlatformFeatureFlagName: SchemaTypes.PlatformFeatureFlagName;
  PlatformLocations: ResolverTypeWrapper<SchemaTypes.PlatformLocations>;
  PlatformRole: SchemaTypes.PlatformRole;
  Post: ResolverTypeWrapper<SchemaTypes.Post>;
  PostTemplate: ResolverTypeWrapper<SchemaTypes.PostTemplate>;
  Preference: ResolverTypeWrapper<SchemaTypes.Preference>;
  PreferenceDefinition: ResolverTypeWrapper<SchemaTypes.PreferenceDefinition>;
  PreferenceType: SchemaTypes.PreferenceType;
  PreferenceValueType: SchemaTypes.PreferenceValueType;
  Profile: ResolverTypeWrapper<SchemaTypes.Profile>;
  ProfileCredentialVerified: ResolverTypeWrapper<
    SchemaTypes.ProfileCredentialVerified
  >;
  ProfileType: SchemaTypes.ProfileType;
  Query: ResolverTypeWrapper<{}>;
  Question: ResolverTypeWrapper<SchemaTypes.Question>;
  Reaction: ResolverTypeWrapper<SchemaTypes.Reaction>;
  Reference: ResolverTypeWrapper<SchemaTypes.Reference>;
  RefreshVirtualContributorBodyOfKnowledgeInput: SchemaTypes.RefreshVirtualContributorBodyOfKnowledgeInput;
  Relation: ResolverTypeWrapper<SchemaTypes.Relation>;
  RelayPaginatedSpace: ResolverTypeWrapper<SchemaTypes.RelayPaginatedSpace>;
  RelayPaginatedSpaceEdge: ResolverTypeWrapper<
    SchemaTypes.RelayPaginatedSpaceEdge
  >;
  RelayPaginatedSpacePageInfo: ResolverTypeWrapper<
    SchemaTypes.RelayPaginatedSpacePageInfo
  >;
  RemoveCommunityRoleFromOrganizationInput: SchemaTypes.RemoveCommunityRoleFromOrganizationInput;
  RemoveCommunityRoleFromUserInput: SchemaTypes.RemoveCommunityRoleFromUserInput;
  RemoveCommunityRoleFromVirtualInput: SchemaTypes.RemoveCommunityRoleFromVirtualInput;
  RemoveOrganizationRoleFromUserInput: SchemaTypes.RemoveOrganizationRoleFromUserInput;
  RemovePlatformRoleFromUserInput: SchemaTypes.RemovePlatformRoleFromUserInput;
  RemoveUserGroupMemberInput: SchemaTypes.RemoveUserGroupMemberInput;
  RevokeAuthorizationCredentialInput: SchemaTypes.RevokeAuthorizationCredentialInput;
  RevokeLicensePlanFromAccount: SchemaTypes.RevokeLicensePlanFromAccount;
  RevokeOrganizationAuthorizationCredentialInput: SchemaTypes.RevokeOrganizationAuthorizationCredentialInput;
  RolesOrganizationInput: SchemaTypes.RolesOrganizationInput;
  RolesResult: ResolverTypeWrapper<SchemaTypes.RolesResult>;
  RolesResultCommunity: ResolverTypeWrapper<SchemaTypes.RolesResultCommunity>;
  RolesResultOrganization: ResolverTypeWrapper<
    SchemaTypes.RolesResultOrganization
  >;
  RolesResultSpace: ResolverTypeWrapper<SchemaTypes.RolesResultSpace>;
  RolesUserInput: SchemaTypes.RolesUserInput;
  RolesVirtualContributorInput: SchemaTypes.RolesVirtualContributorInput;
  Room: ResolverTypeWrapper<SchemaTypes.Room>;
  RoomAddReactionToMessageInput: SchemaTypes.RoomAddReactionToMessageInput;
  RoomEventSubscriptionResult: ResolverTypeWrapper<
    SchemaTypes.RoomEventSubscriptionResult
  >;
  RoomMessageEventSubscriptionResult: ResolverTypeWrapper<
    SchemaTypes.RoomMessageEventSubscriptionResult
  >;
  RoomMessageReactionEventSubscriptionResult: ResolverTypeWrapper<
    SchemaTypes.RoomMessageReactionEventSubscriptionResult
  >;
  RoomRemoveMessageInput: SchemaTypes.RoomRemoveMessageInput;
  RoomRemoveReactionToMessageInput: SchemaTypes.RoomRemoveReactionToMessageInput;
  RoomSendMessageInput: SchemaTypes.RoomSendMessageInput;
  RoomSendMessageReplyInput: SchemaTypes.RoomSendMessageReplyInput;
  SearchInput: SchemaTypes.SearchInput;
  SearchResult:
    | ResolversTypes['SearchResultCallout']
    | ResolversTypes['SearchResultOrganization']
    | ResolversTypes['SearchResultPost']
    | ResolversTypes['SearchResultSpace']
    | ResolversTypes['SearchResultUser']
    | ResolversTypes['SearchResultUserGroup'];
  SearchResultCallout: ResolverTypeWrapper<SchemaTypes.SearchResultCallout>;
  SearchResultOrganization: ResolverTypeWrapper<
    SchemaTypes.SearchResultOrganization
  >;
  SearchResultPost: ResolverTypeWrapper<SchemaTypes.SearchResultPost>;
  SearchResultSpace: ResolverTypeWrapper<SchemaTypes.SearchResultSpace>;
  SearchResultType: SchemaTypes.SearchResultType;
  SearchResultUser: ResolverTypeWrapper<SchemaTypes.SearchResultUser>;
  SearchResultUserGroup: ResolverTypeWrapper<SchemaTypes.SearchResultUserGroup>;
  SearchVisibility: SchemaTypes.SearchVisibility;
  Sentry: ResolverTypeWrapper<SchemaTypes.Sentry>;
  ServiceMetadata: ResolverTypeWrapper<SchemaTypes.ServiceMetadata>;
  Space: ResolverTypeWrapper<SchemaTypes.Space>;
  SpaceDefaults: ResolverTypeWrapper<SchemaTypes.SpaceDefaults>;
  SpaceFilterInput: SchemaTypes.SpaceFilterInput;
  SpaceIngestionPurpose: SchemaTypes.SpaceIngestionPurpose;
  SpaceLevel: SchemaTypes.SpaceLevel;
  SpacePrivacyMode: SchemaTypes.SpacePrivacyMode;
  SpaceSettings: ResolverTypeWrapper<SchemaTypes.SpaceSettings>;
  SpaceSettingsCollaboration: ResolverTypeWrapper<
    SchemaTypes.SpaceSettingsCollaboration
  >;
  SpaceSettingsMembership: ResolverTypeWrapper<
    SchemaTypes.SpaceSettingsMembership
  >;
  SpaceSettingsPrivacy: ResolverTypeWrapper<SchemaTypes.SpaceSettingsPrivacy>;
  SpaceType: SchemaTypes.SpaceType;
  SpaceVisibility: SchemaTypes.SpaceVisibility;
  StorageAggregator: ResolverTypeWrapper<SchemaTypes.StorageAggregator>;
  StorageAggregatorParent: ResolverTypeWrapper<
    SchemaTypes.StorageAggregatorParent
  >;
  StorageBucket: ResolverTypeWrapper<SchemaTypes.StorageBucket>;
  StorageBucketParent: ResolverTypeWrapper<SchemaTypes.StorageBucketParent>;
  StorageBucketUploadFileInput: SchemaTypes.StorageBucketUploadFileInput;
  StorageBucketUploadFileOnLinkInput: SchemaTypes.StorageBucketUploadFileOnLinkInput;
  StorageBucketUploadFileOnReferenceInput: SchemaTypes.StorageBucketUploadFileOnReferenceInput;
  StorageConfig: ResolverTypeWrapper<SchemaTypes.StorageConfig>;
  String: ResolverTypeWrapper<SchemaTypes.Scalars['String']>;
  Subscription: ResolverTypeWrapper<{}>;
  SubspaceCreated: ResolverTypeWrapper<SchemaTypes.SubspaceCreated>;
  Tagset: ResolverTypeWrapper<SchemaTypes.Tagset>;
  TagsetArgs: SchemaTypes.TagsetArgs;
  TagsetReservedName: SchemaTypes.TagsetReservedName;
  TagsetTemplate: ResolverTypeWrapper<SchemaTypes.TagsetTemplate>;
  TagsetType: SchemaTypes.TagsetType;
  Task: ResolverTypeWrapper<SchemaTypes.Task>;
  TaskStatus: SchemaTypes.TaskStatus;
  TemplatesSet: ResolverTypeWrapper<SchemaTypes.TemplatesSet>;
  Timeline: ResolverTypeWrapper<SchemaTypes.Timeline>;
  UUID: ResolverTypeWrapper<SchemaTypes.Scalars['UUID']>;
  UUID_NAMEID: ResolverTypeWrapper<SchemaTypes.Scalars['UUID_NAMEID']>;
  UUID_NAMEID_EMAIL: ResolverTypeWrapper<
    SchemaTypes.Scalars['UUID_NAMEID_EMAIL']
  >;
  UpdateAccountPlatformSettingsInput: SchemaTypes.UpdateAccountPlatformSettingsInput;
  UpdateActorInput: SchemaTypes.UpdateActorInput;
  UpdateAiPersonaInput: SchemaTypes.UpdateAiPersonaInput;
  UpdateAiPersonaServiceInput: SchemaTypes.UpdateAiPersonaServiceInput;
  UpdateCalendarEventInput: SchemaTypes.UpdateCalendarEventInput;
  UpdateCalloutContributionDefaultsInput: SchemaTypes.UpdateCalloutContributionDefaultsInput;
  UpdateCalloutContributionPolicyInput: SchemaTypes.UpdateCalloutContributionPolicyInput;
  UpdateCalloutFramingInput: SchemaTypes.UpdateCalloutFramingInput;
  UpdateCalloutInput: SchemaTypes.UpdateCalloutInput;
  UpdateCalloutPublishInfoInput: SchemaTypes.UpdateCalloutPublishInfoInput;
  UpdateCalloutTemplateInput: SchemaTypes.UpdateCalloutTemplateInput;
  UpdateCalloutVisibilityInput: SchemaTypes.UpdateCalloutVisibilityInput;
  UpdateCollaborationCalloutsSortOrderInput: SchemaTypes.UpdateCollaborationCalloutsSortOrderInput;
  UpdateCommunityApplicationFormInput: SchemaTypes.UpdateCommunityApplicationFormInput;
  UpdateCommunityGuidelinesInput: SchemaTypes.UpdateCommunityGuidelinesInput;
  UpdateCommunityGuidelinesOfTemplateInput: SchemaTypes.UpdateCommunityGuidelinesOfTemplateInput;
  UpdateCommunityGuidelinesTemplateInput: SchemaTypes.UpdateCommunityGuidelinesTemplateInput;
  UpdateContextInput: SchemaTypes.UpdateContextInput;
  UpdateDiscussionInput: SchemaTypes.UpdateDiscussionInput;
  UpdateDocumentInput: SchemaTypes.UpdateDocumentInput;
  UpdateEcosystemModelInput: SchemaTypes.UpdateEcosystemModelInput;
  UpdateFormInput: SchemaTypes.UpdateFormInput;
  UpdateFormQuestionInput: SchemaTypes.UpdateFormQuestionInput;
  UpdateInnovationFlowFromTemplateInput: SchemaTypes.UpdateInnovationFlowFromTemplateInput;
  UpdateInnovationFlowInput: SchemaTypes.UpdateInnovationFlowInput;
  UpdateInnovationFlowSelectedStateInput: SchemaTypes.UpdateInnovationFlowSelectedStateInput;
  UpdateInnovationFlowSingleStateInput: SchemaTypes.UpdateInnovationFlowSingleStateInput;
  UpdateInnovationFlowStateInput: SchemaTypes.UpdateInnovationFlowStateInput;
  UpdateInnovationFlowTemplateInput: SchemaTypes.UpdateInnovationFlowTemplateInput;
  UpdateInnovationHubInput: SchemaTypes.UpdateInnovationHubInput;
  UpdateInnovationHubPlatformSettingsInput: SchemaTypes.UpdateInnovationHubPlatformSettingsInput;
  UpdateInnovationPackInput: SchemaTypes.UpdateInnovationPackInput;
  UpdateLicenseInput: SchemaTypes.UpdateLicenseInput;
  UpdateLicensePlanInput: SchemaTypes.UpdateLicensePlanInput;
  UpdateLinkInput: SchemaTypes.UpdateLinkInput;
  UpdateLocationInput: SchemaTypes.UpdateLocationInput;
  UpdateOrganizationInput: SchemaTypes.UpdateOrganizationInput;
  UpdateOrganizationPlatformSettingsInput: SchemaTypes.UpdateOrganizationPlatformSettingsInput;
  UpdateOrganizationPreferenceInput: SchemaTypes.UpdateOrganizationPreferenceInput;
  UpdatePostInput: SchemaTypes.UpdatePostInput;
  UpdatePostTemplateInput: SchemaTypes.UpdatePostTemplateInput;
  UpdateProfileDirectInput: SchemaTypes.UpdateProfileDirectInput;
  UpdateProfileInput: SchemaTypes.UpdateProfileInput;
  UpdateReferenceInput: SchemaTypes.UpdateReferenceInput;
  UpdateSpaceDefaultsInput: SchemaTypes.UpdateSpaceDefaultsInput;
  UpdateSpaceInput: SchemaTypes.UpdateSpaceInput;
  UpdateSpacePlatformSettingsInput: SchemaTypes.UpdateSpacePlatformSettingsInput;
  UpdateSpaceSettingsCollaborationInput: SchemaTypes.UpdateSpaceSettingsCollaborationInput;
  UpdateSpaceSettingsEntityInput: SchemaTypes.UpdateSpaceSettingsEntityInput;
  UpdateSpaceSettingsInput: SchemaTypes.UpdateSpaceSettingsInput;
  UpdateSpaceSettingsMembershipInput: SchemaTypes.UpdateSpaceSettingsMembershipInput;
  UpdateSpaceSettingsPrivacyInput: SchemaTypes.UpdateSpaceSettingsPrivacyInput;
  UpdateTagsetInput: SchemaTypes.UpdateTagsetInput;
  UpdateUserGroupInput: SchemaTypes.UpdateUserGroupInput;
  UpdateUserInput: SchemaTypes.UpdateUserInput;
  UpdateUserPlatformSettingsInput: SchemaTypes.UpdateUserPlatformSettingsInput;
  UpdateUserPreferenceInput: SchemaTypes.UpdateUserPreferenceInput;
  UpdateVirtualContributorInput: SchemaTypes.UpdateVirtualContributorInput;
  UpdateVirtualContributorPlatformSettingsInput: SchemaTypes.UpdateVirtualContributorPlatformSettingsInput;
  UpdateVisualInput: SchemaTypes.UpdateVisualInput;
  UpdateWhiteboardContentInput: SchemaTypes.UpdateWhiteboardContentInput;
  UpdateWhiteboardInput: SchemaTypes.UpdateWhiteboardInput;
  UpdateWhiteboardTemplateInput: SchemaTypes.UpdateWhiteboardTemplateInput;
  Upload: ResolverTypeWrapper<SchemaTypes.Scalars['Upload']>;
  User: ResolverTypeWrapper<SchemaTypes.User>;
  UserAuthorizationPrivilegesInput: SchemaTypes.UserAuthorizationPrivilegesInput;
  UserAuthorizationResetInput: SchemaTypes.UserAuthorizationResetInput;
  UserFilterInput: SchemaTypes.UserFilterInput;
  UserGroup: ResolverTypeWrapper<SchemaTypes.UserGroup>;
  UserPreferenceType: SchemaTypes.UserPreferenceType;
  UserSendMessageInput: SchemaTypes.UserSendMessageInput;
  UsersWithAuthorizationCredentialInput: SchemaTypes.UsersWithAuthorizationCredentialInput;
  VerifiedCredential: ResolverTypeWrapper<SchemaTypes.VerifiedCredential>;
  VerifiedCredentialClaim: ResolverTypeWrapper<
    SchemaTypes.VerifiedCredentialClaim
  >;
  VirtualContributor: ResolverTypeWrapper<SchemaTypes.VirtualContributor>;
  VirtualContributorQuestionInput: SchemaTypes.VirtualContributorQuestionInput;
  Visual: ResolverTypeWrapper<SchemaTypes.Visual>;
  VisualType: SchemaTypes.VisualType;
  VisualUploadImageInput: SchemaTypes.VisualUploadImageInput;
  Whiteboard: ResolverTypeWrapper<SchemaTypes.Whiteboard>;
  WhiteboardContent: ResolverTypeWrapper<
    SchemaTypes.Scalars['WhiteboardContent']
  >;
  WhiteboardSavedSubscriptionResult: ResolverTypeWrapper<
    SchemaTypes.WhiteboardSavedSubscriptionResult
  >;
  WhiteboardTemplate: ResolverTypeWrapper<SchemaTypes.WhiteboardTemplate>;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  APM: SchemaTypes.Apm;
  Account: SchemaTypes.Account;
  AccountAuthorizationResetInput: SchemaTypes.AccountAuthorizationResetInput;
  AccountSubscription: SchemaTypes.AccountSubscription;
  ActivityCreatedSubscriptionInput: SchemaTypes.ActivityCreatedSubscriptionInput;
  ActivityCreatedSubscriptionResult: SchemaTypes.ActivityCreatedSubscriptionResult;
  ActivityFeed: SchemaTypes.ActivityFeed;
  ActivityFeedGroupedQueryArgs: SchemaTypes.ActivityFeedGroupedQueryArgs;
  ActivityFeedQueryArgs: SchemaTypes.ActivityFeedQueryArgs;
  ActivityLogEntry:
    | ResolversParentTypes['ActivityLogEntryCalendarEventCreated']
    | ResolversParentTypes['ActivityLogEntryCalloutDiscussionComment']
    | ResolversParentTypes['ActivityLogEntryCalloutLinkCreated']
    | ResolversParentTypes['ActivityLogEntryCalloutPostComment']
    | ResolversParentTypes['ActivityLogEntryCalloutPostCreated']
    | ResolversParentTypes['ActivityLogEntryCalloutPublished']
    | ResolversParentTypes['ActivityLogEntryCalloutWhiteboardContentModified']
    | ResolversParentTypes['ActivityLogEntryCalloutWhiteboardCreated']
    | ResolversParentTypes['ActivityLogEntryChallengeCreated']
    | ResolversParentTypes['ActivityLogEntryMemberJoined']
    | ResolversParentTypes['ActivityLogEntryOpportunityCreated']
    | ResolversParentTypes['ActivityLogEntryUpdateSent'];
  ActivityLogEntryCalendarEventCreated: SchemaTypes.ActivityLogEntryCalendarEventCreated;
  ActivityLogEntryCalloutDiscussionComment: SchemaTypes.ActivityLogEntryCalloutDiscussionComment;
  ActivityLogEntryCalloutLinkCreated: SchemaTypes.ActivityLogEntryCalloutLinkCreated;
  ActivityLogEntryCalloutPostComment: SchemaTypes.ActivityLogEntryCalloutPostComment;
  ActivityLogEntryCalloutPostCreated: SchemaTypes.ActivityLogEntryCalloutPostCreated;
  ActivityLogEntryCalloutPublished: SchemaTypes.ActivityLogEntryCalloutPublished;
  ActivityLogEntryCalloutWhiteboardContentModified: SchemaTypes.ActivityLogEntryCalloutWhiteboardContentModified;
  ActivityLogEntryCalloutWhiteboardCreated: SchemaTypes.ActivityLogEntryCalloutWhiteboardCreated;
  ActivityLogEntryChallengeCreated: SchemaTypes.ActivityLogEntryChallengeCreated;
  ActivityLogEntryMemberJoined: SchemaTypes.ActivityLogEntryMemberJoined;
  ActivityLogEntryOpportunityCreated: SchemaTypes.ActivityLogEntryOpportunityCreated;
  ActivityLogEntryUpdateSent: SchemaTypes.ActivityLogEntryUpdateSent;
  ActivityLogInput: SchemaTypes.ActivityLogInput;
  Actor: SchemaTypes.Actor;
  ActorGroup: SchemaTypes.ActorGroup;
  Agent: SchemaTypes.Agent;
  AgentBeginVerifiedCredentialOfferOutput: SchemaTypes.AgentBeginVerifiedCredentialOfferOutput;
  AgentBeginVerifiedCredentialRequestOutput: SchemaTypes.AgentBeginVerifiedCredentialRequestOutput;
  AiPersona: SchemaTypes.AiPersona;
  AiPersonaService: SchemaTypes.AiPersonaService;
  AiPersonaServiceIngestInput: SchemaTypes.AiPersonaServiceIngestInput;
  AiPersonaServiceQuestionInput: SchemaTypes.AiPersonaServiceQuestionInput;
  AiServer: SchemaTypes.AiServer;
  AnyInvitation:
    | ResolversParentTypes['Invitation']
    | ResolversParentTypes['InvitationExternal'];
  Application: SchemaTypes.Application;
  ApplicationEventInput: SchemaTypes.ApplicationEventInput;
  AssignCommunityRoleToOrganizationInput: SchemaTypes.AssignCommunityRoleToOrganizationInput;
  AssignCommunityRoleToUserInput: SchemaTypes.AssignCommunityRoleToUserInput;
  AssignCommunityRoleToVirtualInput: SchemaTypes.AssignCommunityRoleToVirtualInput;
  AssignLicensePlanToAccount: SchemaTypes.AssignLicensePlanToAccount;
  AssignOrganizationRoleToUserInput: SchemaTypes.AssignOrganizationRoleToUserInput;
  AssignPlatformRoleToUserInput: SchemaTypes.AssignPlatformRoleToUserInput;
  AssignUserGroupMemberInput: SchemaTypes.AssignUserGroupMemberInput;
  AuthenticationConfig: SchemaTypes.AuthenticationConfig;
  AuthenticationProviderConfig: Omit<
    SchemaTypes.AuthenticationProviderConfig,
    'config'
  > & { config: ResolversParentTypes['AuthenticationProviderConfigUnion'] };
  AuthenticationProviderConfigUnion: ResolversParentTypes['OryConfig'];
  Authorization: SchemaTypes.Authorization;
  AuthorizationPolicyRuleCredential: SchemaTypes.AuthorizationPolicyRuleCredential;
  AuthorizationPolicyRulePrivilege: SchemaTypes.AuthorizationPolicyRulePrivilege;
  AuthorizationPolicyRuleVerifiedCredential: SchemaTypes.AuthorizationPolicyRuleVerifiedCredential;
  Boolean: SchemaTypes.Scalars['Boolean'];
  CID: SchemaTypes.Scalars['CID'];
  Calendar: SchemaTypes.Calendar;
  CalendarEvent: SchemaTypes.CalendarEvent;
  Callout: SchemaTypes.Callout;
  CalloutContribution: SchemaTypes.CalloutContribution;
  CalloutContributionDefaults: SchemaTypes.CalloutContributionDefaults;
  CalloutContributionFilterArgs: SchemaTypes.CalloutContributionFilterArgs;
  CalloutContributionPolicy: SchemaTypes.CalloutContributionPolicy;
  CalloutFraming: SchemaTypes.CalloutFraming;
  CalloutGroup: SchemaTypes.CalloutGroup;
  CalloutPostCreated: SchemaTypes.CalloutPostCreated;
  CalloutTemplate: SchemaTypes.CalloutTemplate;
  ChatGuidanceAnswerRelevanceInput: SchemaTypes.ChatGuidanceAnswerRelevanceInput;
  ChatGuidanceInput: SchemaTypes.ChatGuidanceInput;
  Collaboration: SchemaTypes.Collaboration;
  Communication: SchemaTypes.Communication;
  CommunicationAdminEnsureAccessInput: SchemaTypes.CommunicationAdminEnsureAccessInput;
  CommunicationAdminMembershipInput: SchemaTypes.CommunicationAdminMembershipInput;
  CommunicationAdminMembershipResult: SchemaTypes.CommunicationAdminMembershipResult;
  CommunicationAdminOrphanedUsageResult: SchemaTypes.CommunicationAdminOrphanedUsageResult;
  CommunicationAdminRemoveOrphanedRoomInput: SchemaTypes.CommunicationAdminRemoveOrphanedRoomInput;
  CommunicationAdminRoomMembershipResult: SchemaTypes.CommunicationAdminRoomMembershipResult;
  CommunicationAdminRoomResult: SchemaTypes.CommunicationAdminRoomResult;
  CommunicationAdminUpdateRoomsJoinRuleInput: SchemaTypes.CommunicationAdminUpdateRoomsJoinRuleInput;
  CommunicationRoom: SchemaTypes.CommunicationRoom;
  CommunicationSendMessageToCommunityLeadsInput: SchemaTypes.CommunicationSendMessageToCommunityLeadsInput;
  CommunicationSendMessageToOrganizationInput: SchemaTypes.CommunicationSendMessageToOrganizationInput;
  CommunicationSendMessageToUserInput: SchemaTypes.CommunicationSendMessageToUserInput;
  Community: SchemaTypes.Community;
  CommunityApplicationForRoleResult: SchemaTypes.CommunityApplicationForRoleResult;
  CommunityApplicationResult: SchemaTypes.CommunityApplicationResult;
  CommunityApplyInput: SchemaTypes.CommunityApplyInput;
  CommunityGuidelines: SchemaTypes.CommunityGuidelines;
  CommunityGuidelinesTemplate: SchemaTypes.CommunityGuidelinesTemplate;
  CommunityInvitationForRoleResult: SchemaTypes.CommunityInvitationForRoleResult;
  CommunityInvitationResult: SchemaTypes.CommunityInvitationResult;
  CommunityJoinInput: SchemaTypes.CommunityJoinInput;
  CommunityPolicy: SchemaTypes.CommunityPolicy;
  CommunityRolePolicy: SchemaTypes.CommunityRolePolicy;
  Config: SchemaTypes.Config;
  Context: SchemaTypes.Context;
  Contributor:
    | ResolversParentTypes['Organization']
    | ResolversParentTypes['User']
    | ResolversParentTypes['VirtualContributor'];
  ContributorFilterInput: SchemaTypes.ContributorFilterInput;
  ContributorRoles: SchemaTypes.ContributorRoles;
  ConvertSubspaceToSpaceInput: SchemaTypes.ConvertSubspaceToSpaceInput;
  ConvertSubsubspaceToSubspaceInput: SchemaTypes.ConvertSubsubspaceToSubspaceInput;
  CreateAccountInput: SchemaTypes.CreateAccountInput;
  CreateActorGroupInput: SchemaTypes.CreateActorGroupInput;
  CreateActorInput: SchemaTypes.CreateActorInput;
  CreateAiPersonaInput: SchemaTypes.CreateAiPersonaInput;
  CreateAiPersonaServiceInput: SchemaTypes.CreateAiPersonaServiceInput;
  CreateCalendarEventOnCalendarInput: SchemaTypes.CreateCalendarEventOnCalendarInput;
  CreateCalloutContributionDefaultsInput: SchemaTypes.CreateCalloutContributionDefaultsInput;
  CreateCalloutContributionPolicyInput: SchemaTypes.CreateCalloutContributionPolicyInput;
  CreateCalloutFramingInput: SchemaTypes.CreateCalloutFramingInput;
  CreateCalloutOnCollaborationInput: SchemaTypes.CreateCalloutOnCollaborationInput;
  CreateCalloutTemplateOnTemplatesSetInput: SchemaTypes.CreateCalloutTemplateOnTemplatesSetInput;
  CreateCollaborationInput: SchemaTypes.CreateCollaborationInput;
  CreateCommunityGuidelinesInput: SchemaTypes.CreateCommunityGuidelinesInput;
  CreateCommunityGuidelinesTemplateOnTemplatesSetInput: SchemaTypes.CreateCommunityGuidelinesTemplateOnTemplatesSetInput;
  CreateContextInput: SchemaTypes.CreateContextInput;
  CreateContributionOnCalloutInput: SchemaTypes.CreateContributionOnCalloutInput;
  CreateInnovationFlowTemplateOnTemplatesSetInput: SchemaTypes.CreateInnovationFlowTemplateOnTemplatesSetInput;
  CreateInnovationHubInput: SchemaTypes.CreateInnovationHubInput;
  CreateInnovationPackOnLibraryInput: SchemaTypes.CreateInnovationPackOnLibraryInput;
  CreateInvitationForContributorsOnCommunityInput: SchemaTypes.CreateInvitationForContributorsOnCommunityInput;
  CreateInvitationUserByEmailOnCommunityInput: SchemaTypes.CreateInvitationUserByEmailOnCommunityInput;
  CreateLicensePlanOnLicensingInput: SchemaTypes.CreateLicensePlanOnLicensingInput;
  CreateLinkInput: SchemaTypes.CreateLinkInput;
  CreateLocationInput: SchemaTypes.CreateLocationInput;
  CreateNVPInput: SchemaTypes.CreateNvpInput;
  CreateOrganizationInput: SchemaTypes.CreateOrganizationInput;
  CreatePostInput: SchemaTypes.CreatePostInput;
  CreatePostTemplateOnTemplatesSetInput: SchemaTypes.CreatePostTemplateOnTemplatesSetInput;
  CreateProfileInput: SchemaTypes.CreateProfileInput;
  CreateReferenceInput: SchemaTypes.CreateReferenceInput;
  CreateReferenceOnProfileInput: SchemaTypes.CreateReferenceOnProfileInput;
  CreateRelationOnCollaborationInput: SchemaTypes.CreateRelationOnCollaborationInput;
  CreateSpaceInput: SchemaTypes.CreateSpaceInput;
  CreateSubspaceInput: SchemaTypes.CreateSubspaceInput;
  CreateTagsetInput: SchemaTypes.CreateTagsetInput;
  CreateTagsetOnProfileInput: SchemaTypes.CreateTagsetOnProfileInput;
  CreateUserGroupInput: SchemaTypes.CreateUserGroupInput;
  CreateUserInput: SchemaTypes.CreateUserInput;
  CreateVirtualContributorOnAccountInput: SchemaTypes.CreateVirtualContributorOnAccountInput;
  CreateWhiteboardInput: SchemaTypes.CreateWhiteboardInput;
  CreateWhiteboardTemplateOnTemplatesSetInput: SchemaTypes.CreateWhiteboardTemplateOnTemplatesSetInput;
  Credential: SchemaTypes.Credential;
  CredentialDefinition: SchemaTypes.CredentialDefinition;
  CredentialMetadataOutput: SchemaTypes.CredentialMetadataOutput;
  DID: SchemaTypes.Scalars['DID'];
  DateTime: SchemaTypes.Scalars['DateTime'];
  DeleteActorGroupInput: SchemaTypes.DeleteActorGroupInput;
  DeleteActorInput: SchemaTypes.DeleteActorInput;
  DeleteAiPersonaServiceInput: SchemaTypes.DeleteAiPersonaServiceInput;
  DeleteApplicationInput: SchemaTypes.DeleteApplicationInput;
  DeleteCalendarEventInput: SchemaTypes.DeleteCalendarEventInput;
  DeleteCalloutInput: SchemaTypes.DeleteCalloutInput;
  DeleteCalloutTemplateInput: SchemaTypes.DeleteCalloutTemplateInput;
  DeleteCollaborationInput: SchemaTypes.DeleteCollaborationInput;
  DeleteCommunityGuidelinesTemplateInput: SchemaTypes.DeleteCommunityGuidelinesTemplateInput;
  DeleteDiscussionInput: SchemaTypes.DeleteDiscussionInput;
  DeleteDocumentInput: SchemaTypes.DeleteDocumentInput;
  DeleteInnovationFlowTemplateInput: SchemaTypes.DeleteInnovationFlowTemplateInput;
  DeleteInnovationHubInput: SchemaTypes.DeleteInnovationHubInput;
  DeleteInnovationPackInput: SchemaTypes.DeleteInnovationPackInput;
  DeleteInvitationExternalInput: SchemaTypes.DeleteInvitationExternalInput;
  DeleteInvitationInput: SchemaTypes.DeleteInvitationInput;
  DeleteLicensePlanInput: SchemaTypes.DeleteLicensePlanInput;
  DeleteLinkInput: SchemaTypes.DeleteLinkInput;
  DeleteOrganizationInput: SchemaTypes.DeleteOrganizationInput;
  DeletePostInput: SchemaTypes.DeletePostInput;
  DeletePostTemplateInput: SchemaTypes.DeletePostTemplateInput;
  DeleteReferenceInput: SchemaTypes.DeleteReferenceInput;
  DeleteRelationInput: SchemaTypes.DeleteRelationInput;
  DeleteSpaceInput: SchemaTypes.DeleteSpaceInput;
  DeleteStorageBuckeetInput: SchemaTypes.DeleteStorageBuckeetInput;
  DeleteUserGroupInput: SchemaTypes.DeleteUserGroupInput;
  DeleteUserInput: SchemaTypes.DeleteUserInput;
  DeleteVirtualContributorInput: SchemaTypes.DeleteVirtualContributorInput;
  DeleteWhiteboardInput: SchemaTypes.DeleteWhiteboardInput;
  DeleteWhiteboardTemplateInput: SchemaTypes.DeleteWhiteboardTemplateInput;
  DirectRoom: SchemaTypes.DirectRoom;
  Discussion: SchemaTypes.Discussion;
  DiscussionsInput: SchemaTypes.DiscussionsInput;
  Document: SchemaTypes.Document;
  EcosystemModel: SchemaTypes.EcosystemModel;
  Emoji: SchemaTypes.Scalars['Emoji'];
  FileStorageConfig: SchemaTypes.FileStorageConfig;
  Float: SchemaTypes.Scalars['Float'];
  Form: SchemaTypes.Form;
  FormQuestion: SchemaTypes.FormQuestion;
  Forum: SchemaTypes.Forum;
  ForumCreateDiscussionInput: SchemaTypes.ForumCreateDiscussionInput;
  Geo: SchemaTypes.Geo;
  GrantAuthorizationCredentialInput: SchemaTypes.GrantAuthorizationCredentialInput;
  GrantOrganizationAuthorizationCredentialInput: SchemaTypes.GrantOrganizationAuthorizationCredentialInput;
  Groupable:
    | ResolversParentTypes['Community']
    | ResolversParentTypes['Organization'];
  ISearchResults: SchemaTypes.ISearchResults;
  IngestSpaceInput: SchemaTypes.IngestSpaceInput;
  InnovationFlow: SchemaTypes.InnovationFlow;
  InnovationFlowState: SchemaTypes.InnovationFlowState;
  InnovationFlowTemplate: SchemaTypes.InnovationFlowTemplate;
  InnovationHub: SchemaTypes.InnovationHub;
  InnovationPack: SchemaTypes.InnovationPack;
  InnovationPacksInput: SchemaTypes.InnovationPacksInput;
  Int: SchemaTypes.Scalars['Int'];
  Invitation: SchemaTypes.Invitation;
  InvitationEventInput: SchemaTypes.InvitationEventInput;
  InvitationExternal: SchemaTypes.InvitationExternal;
  JSON: SchemaTypes.Scalars['JSON'];
  LatestReleaseDiscussion: SchemaTypes.LatestReleaseDiscussion;
  Library: SchemaTypes.Library;
  License: SchemaTypes.License;
  LicensePlan: SchemaTypes.LicensePlan;
  LicensePolicy: SchemaTypes.LicensePolicy;
  LicensePolicyCredentialRule: SchemaTypes.LicensePolicyCredentialRule;
  Licensing: SchemaTypes.Licensing;
  Lifecycle: SchemaTypes.Lifecycle;
  LifecycleDefinition: SchemaTypes.Scalars['LifecycleDefinition'];
  Link: SchemaTypes.Link;
  Location: SchemaTypes.Location;
  LookupQueryResults: SchemaTypes.LookupQueryResults;
  Markdown: SchemaTypes.Scalars['Markdown'];
  MeQueryResults: SchemaTypes.MeQueryResults;
  Message: SchemaTypes.Message;
  MessageAnswerQuestion: SchemaTypes.MessageAnswerQuestion;
  MessageAnswerToQuestionSource: SchemaTypes.MessageAnswerToQuestionSource;
  MessageID: SchemaTypes.Scalars['MessageID'];
  Metadata: SchemaTypes.Metadata;
  MigrateEmbeddings: SchemaTypes.MigrateEmbeddings;
  MoveCalloutContributionInput: SchemaTypes.MoveCalloutContributionInput;
  Mutation: {};
  MySpaceResults: SchemaTypes.MySpaceResults;
  NVP: SchemaTypes.Nvp;
  NameID: SchemaTypes.Scalars['NameID'];
  Organization: SchemaTypes.Organization;
  OrganizationAuthorizationResetInput: SchemaTypes.OrganizationAuthorizationResetInput;
  OrganizationFilterInput: SchemaTypes.OrganizationFilterInput;
  OrganizationVerification: SchemaTypes.OrganizationVerification;
  OrganizationVerificationEventInput: SchemaTypes.OrganizationVerificationEventInput;
  OryConfig: SchemaTypes.OryConfig;
  PageInfo: SchemaTypes.PageInfo;
  PaginatedOrganization: SchemaTypes.PaginatedOrganization;
  PaginatedSpaces: SchemaTypes.PaginatedSpaces;
  PaginatedUsers: SchemaTypes.PaginatedUsers;
  Platform: SchemaTypes.Platform;
  PlatformFeatureFlag: SchemaTypes.PlatformFeatureFlag;
  PlatformLocations: SchemaTypes.PlatformLocations;
  Post: SchemaTypes.Post;
  PostTemplate: SchemaTypes.PostTemplate;
  Preference: SchemaTypes.Preference;
  PreferenceDefinition: SchemaTypes.PreferenceDefinition;
  Profile: SchemaTypes.Profile;
  ProfileCredentialVerified: SchemaTypes.ProfileCredentialVerified;
  Query: {};
  Question: SchemaTypes.Question;
  Reaction: SchemaTypes.Reaction;
  Reference: SchemaTypes.Reference;
  RefreshVirtualContributorBodyOfKnowledgeInput: SchemaTypes.RefreshVirtualContributorBodyOfKnowledgeInput;
  Relation: SchemaTypes.Relation;
  RelayPaginatedSpace: SchemaTypes.RelayPaginatedSpace;
  RelayPaginatedSpaceEdge: SchemaTypes.RelayPaginatedSpaceEdge;
  RelayPaginatedSpacePageInfo: SchemaTypes.RelayPaginatedSpacePageInfo;
  RemoveCommunityRoleFromOrganizationInput: SchemaTypes.RemoveCommunityRoleFromOrganizationInput;
  RemoveCommunityRoleFromUserInput: SchemaTypes.RemoveCommunityRoleFromUserInput;
  RemoveCommunityRoleFromVirtualInput: SchemaTypes.RemoveCommunityRoleFromVirtualInput;
  RemoveOrganizationRoleFromUserInput: SchemaTypes.RemoveOrganizationRoleFromUserInput;
  RemovePlatformRoleFromUserInput: SchemaTypes.RemovePlatformRoleFromUserInput;
  RemoveUserGroupMemberInput: SchemaTypes.RemoveUserGroupMemberInput;
  RevokeAuthorizationCredentialInput: SchemaTypes.RevokeAuthorizationCredentialInput;
  RevokeLicensePlanFromAccount: SchemaTypes.RevokeLicensePlanFromAccount;
  RevokeOrganizationAuthorizationCredentialInput: SchemaTypes.RevokeOrganizationAuthorizationCredentialInput;
  RolesOrganizationInput: SchemaTypes.RolesOrganizationInput;
  RolesResult: SchemaTypes.RolesResult;
  RolesResultCommunity: SchemaTypes.RolesResultCommunity;
  RolesResultOrganization: SchemaTypes.RolesResultOrganization;
  RolesResultSpace: SchemaTypes.RolesResultSpace;
  RolesUserInput: SchemaTypes.RolesUserInput;
  RolesVirtualContributorInput: SchemaTypes.RolesVirtualContributorInput;
  Room: SchemaTypes.Room;
  RoomAddReactionToMessageInput: SchemaTypes.RoomAddReactionToMessageInput;
  RoomEventSubscriptionResult: SchemaTypes.RoomEventSubscriptionResult;
  RoomMessageEventSubscriptionResult: SchemaTypes.RoomMessageEventSubscriptionResult;
  RoomMessageReactionEventSubscriptionResult: SchemaTypes.RoomMessageReactionEventSubscriptionResult;
  RoomRemoveMessageInput: SchemaTypes.RoomRemoveMessageInput;
  RoomRemoveReactionToMessageInput: SchemaTypes.RoomRemoveReactionToMessageInput;
  RoomSendMessageInput: SchemaTypes.RoomSendMessageInput;
  RoomSendMessageReplyInput: SchemaTypes.RoomSendMessageReplyInput;
  SearchInput: SchemaTypes.SearchInput;
  SearchResult:
    | ResolversParentTypes['SearchResultCallout']
    | ResolversParentTypes['SearchResultOrganization']
    | ResolversParentTypes['SearchResultPost']
    | ResolversParentTypes['SearchResultSpace']
    | ResolversParentTypes['SearchResultUser']
    | ResolversParentTypes['SearchResultUserGroup'];
  SearchResultCallout: SchemaTypes.SearchResultCallout;
  SearchResultOrganization: SchemaTypes.SearchResultOrganization;
  SearchResultPost: SchemaTypes.SearchResultPost;
  SearchResultSpace: SchemaTypes.SearchResultSpace;
  SearchResultUser: SchemaTypes.SearchResultUser;
  SearchResultUserGroup: SchemaTypes.SearchResultUserGroup;
  Sentry: SchemaTypes.Sentry;
  ServiceMetadata: SchemaTypes.ServiceMetadata;
  Space: SchemaTypes.Space;
  SpaceDefaults: SchemaTypes.SpaceDefaults;
  SpaceFilterInput: SchemaTypes.SpaceFilterInput;
  SpaceSettings: SchemaTypes.SpaceSettings;
  SpaceSettingsCollaboration: SchemaTypes.SpaceSettingsCollaboration;
  SpaceSettingsMembership: SchemaTypes.SpaceSettingsMembership;
  SpaceSettingsPrivacy: SchemaTypes.SpaceSettingsPrivacy;
  StorageAggregator: SchemaTypes.StorageAggregator;
  StorageAggregatorParent: SchemaTypes.StorageAggregatorParent;
  StorageBucket: SchemaTypes.StorageBucket;
  StorageBucketParent: SchemaTypes.StorageBucketParent;
  StorageBucketUploadFileInput: SchemaTypes.StorageBucketUploadFileInput;
  StorageBucketUploadFileOnLinkInput: SchemaTypes.StorageBucketUploadFileOnLinkInput;
  StorageBucketUploadFileOnReferenceInput: SchemaTypes.StorageBucketUploadFileOnReferenceInput;
  StorageConfig: SchemaTypes.StorageConfig;
  String: SchemaTypes.Scalars['String'];
  Subscription: {};
  SubspaceCreated: SchemaTypes.SubspaceCreated;
  Tagset: SchemaTypes.Tagset;
  TagsetArgs: SchemaTypes.TagsetArgs;
  TagsetTemplate: SchemaTypes.TagsetTemplate;
  Task: SchemaTypes.Task;
  TemplatesSet: SchemaTypes.TemplatesSet;
  Timeline: SchemaTypes.Timeline;
  UUID: SchemaTypes.Scalars['UUID'];
  UUID_NAMEID: SchemaTypes.Scalars['UUID_NAMEID'];
  UUID_NAMEID_EMAIL: SchemaTypes.Scalars['UUID_NAMEID_EMAIL'];
  UpdateAccountPlatformSettingsInput: SchemaTypes.UpdateAccountPlatformSettingsInput;
  UpdateActorInput: SchemaTypes.UpdateActorInput;
  UpdateAiPersonaInput: SchemaTypes.UpdateAiPersonaInput;
  UpdateAiPersonaServiceInput: SchemaTypes.UpdateAiPersonaServiceInput;
  UpdateCalendarEventInput: SchemaTypes.UpdateCalendarEventInput;
  UpdateCalloutContributionDefaultsInput: SchemaTypes.UpdateCalloutContributionDefaultsInput;
  UpdateCalloutContributionPolicyInput: SchemaTypes.UpdateCalloutContributionPolicyInput;
  UpdateCalloutFramingInput: SchemaTypes.UpdateCalloutFramingInput;
  UpdateCalloutInput: SchemaTypes.UpdateCalloutInput;
  UpdateCalloutPublishInfoInput: SchemaTypes.UpdateCalloutPublishInfoInput;
  UpdateCalloutTemplateInput: SchemaTypes.UpdateCalloutTemplateInput;
  UpdateCalloutVisibilityInput: SchemaTypes.UpdateCalloutVisibilityInput;
  UpdateCollaborationCalloutsSortOrderInput: SchemaTypes.UpdateCollaborationCalloutsSortOrderInput;
  UpdateCommunityApplicationFormInput: SchemaTypes.UpdateCommunityApplicationFormInput;
  UpdateCommunityGuidelinesInput: SchemaTypes.UpdateCommunityGuidelinesInput;
  UpdateCommunityGuidelinesOfTemplateInput: SchemaTypes.UpdateCommunityGuidelinesOfTemplateInput;
  UpdateCommunityGuidelinesTemplateInput: SchemaTypes.UpdateCommunityGuidelinesTemplateInput;
  UpdateContextInput: SchemaTypes.UpdateContextInput;
  UpdateDiscussionInput: SchemaTypes.UpdateDiscussionInput;
  UpdateDocumentInput: SchemaTypes.UpdateDocumentInput;
  UpdateEcosystemModelInput: SchemaTypes.UpdateEcosystemModelInput;
  UpdateFormInput: SchemaTypes.UpdateFormInput;
  UpdateFormQuestionInput: SchemaTypes.UpdateFormQuestionInput;
  UpdateInnovationFlowFromTemplateInput: SchemaTypes.UpdateInnovationFlowFromTemplateInput;
  UpdateInnovationFlowInput: SchemaTypes.UpdateInnovationFlowInput;
  UpdateInnovationFlowSelectedStateInput: SchemaTypes.UpdateInnovationFlowSelectedStateInput;
  UpdateInnovationFlowSingleStateInput: SchemaTypes.UpdateInnovationFlowSingleStateInput;
  UpdateInnovationFlowStateInput: SchemaTypes.UpdateInnovationFlowStateInput;
  UpdateInnovationFlowTemplateInput: SchemaTypes.UpdateInnovationFlowTemplateInput;
  UpdateInnovationHubInput: SchemaTypes.UpdateInnovationHubInput;
  UpdateInnovationHubPlatformSettingsInput: SchemaTypes.UpdateInnovationHubPlatformSettingsInput;
  UpdateInnovationPackInput: SchemaTypes.UpdateInnovationPackInput;
  UpdateLicenseInput: SchemaTypes.UpdateLicenseInput;
  UpdateLicensePlanInput: SchemaTypes.UpdateLicensePlanInput;
  UpdateLinkInput: SchemaTypes.UpdateLinkInput;
  UpdateLocationInput: SchemaTypes.UpdateLocationInput;
  UpdateOrganizationInput: SchemaTypes.UpdateOrganizationInput;
  UpdateOrganizationPlatformSettingsInput: SchemaTypes.UpdateOrganizationPlatformSettingsInput;
  UpdateOrganizationPreferenceInput: SchemaTypes.UpdateOrganizationPreferenceInput;
  UpdatePostInput: SchemaTypes.UpdatePostInput;
  UpdatePostTemplateInput: SchemaTypes.UpdatePostTemplateInput;
  UpdateProfileDirectInput: SchemaTypes.UpdateProfileDirectInput;
  UpdateProfileInput: SchemaTypes.UpdateProfileInput;
  UpdateReferenceInput: SchemaTypes.UpdateReferenceInput;
  UpdateSpaceDefaultsInput: SchemaTypes.UpdateSpaceDefaultsInput;
  UpdateSpaceInput: SchemaTypes.UpdateSpaceInput;
  UpdateSpacePlatformSettingsInput: SchemaTypes.UpdateSpacePlatformSettingsInput;
  UpdateSpaceSettingsCollaborationInput: SchemaTypes.UpdateSpaceSettingsCollaborationInput;
  UpdateSpaceSettingsEntityInput: SchemaTypes.UpdateSpaceSettingsEntityInput;
  UpdateSpaceSettingsInput: SchemaTypes.UpdateSpaceSettingsInput;
  UpdateSpaceSettingsMembershipInput: SchemaTypes.UpdateSpaceSettingsMembershipInput;
  UpdateSpaceSettingsPrivacyInput: SchemaTypes.UpdateSpaceSettingsPrivacyInput;
  UpdateTagsetInput: SchemaTypes.UpdateTagsetInput;
  UpdateUserGroupInput: SchemaTypes.UpdateUserGroupInput;
  UpdateUserInput: SchemaTypes.UpdateUserInput;
  UpdateUserPlatformSettingsInput: SchemaTypes.UpdateUserPlatformSettingsInput;
  UpdateUserPreferenceInput: SchemaTypes.UpdateUserPreferenceInput;
  UpdateVirtualContributorInput: SchemaTypes.UpdateVirtualContributorInput;
  UpdateVirtualContributorPlatformSettingsInput: SchemaTypes.UpdateVirtualContributorPlatformSettingsInput;
  UpdateVisualInput: SchemaTypes.UpdateVisualInput;
  UpdateWhiteboardContentInput: SchemaTypes.UpdateWhiteboardContentInput;
  UpdateWhiteboardInput: SchemaTypes.UpdateWhiteboardInput;
  UpdateWhiteboardTemplateInput: SchemaTypes.UpdateWhiteboardTemplateInput;
  Upload: SchemaTypes.Scalars['Upload'];
  User: SchemaTypes.User;
  UserAuthorizationPrivilegesInput: SchemaTypes.UserAuthorizationPrivilegesInput;
  UserAuthorizationResetInput: SchemaTypes.UserAuthorizationResetInput;
  UserFilterInput: SchemaTypes.UserFilterInput;
  UserGroup: SchemaTypes.UserGroup;
  UserSendMessageInput: SchemaTypes.UserSendMessageInput;
  UsersWithAuthorizationCredentialInput: SchemaTypes.UsersWithAuthorizationCredentialInput;
  VerifiedCredential: SchemaTypes.VerifiedCredential;
  VerifiedCredentialClaim: SchemaTypes.VerifiedCredentialClaim;
  VirtualContributor: SchemaTypes.VirtualContributor;
  VirtualContributorQuestionInput: SchemaTypes.VirtualContributorQuestionInput;
  Visual: SchemaTypes.Visual;
  VisualUploadImageInput: SchemaTypes.VisualUploadImageInput;
  Whiteboard: SchemaTypes.Whiteboard;
  WhiteboardContent: SchemaTypes.Scalars['WhiteboardContent'];
  WhiteboardSavedSubscriptionResult: SchemaTypes.WhiteboardSavedSubscriptionResult;
  WhiteboardTemplate: SchemaTypes.WhiteboardTemplate;
};

export type ApmResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['APM'] = ResolversParentTypes['APM']
> = {
  endpoint?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  rumEnabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AccountResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Account'] = ResolversParentTypes['Account']
> = {
  activeSubscription?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['AccountSubscription']>,
    ParentType,
    ContextType
  >;
  agent?: Resolver<ResolversTypes['Agent'], ParentType, ContextType>;
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  defaults?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['SpaceDefaults']>,
    ParentType,
    ContextType
  >;
  host?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Contributor']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  library?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['TemplatesSet']>,
    ParentType,
    ContextType
  >;
  license?: Resolver<ResolversTypes['License'], ParentType, ContextType>;
  licensePrivileges?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['LicensePrivilege']>>,
    ParentType,
    ContextType
  >;
  spaceID?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  subscriptions?: Resolver<
    Array<ResolversTypes['AccountSubscription']>,
    ParentType,
    ContextType
  >;
  virtualContributors?: Resolver<
    Array<ResolversTypes['VirtualContributor']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AccountSubscriptionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AccountSubscription'] = ResolversParentTypes['AccountSubscription']
> = {
  expires?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >;
  name?: Resolver<ResolversTypes['LicenseCredential'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActivityCreatedSubscriptionResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActivityCreatedSubscriptionResult'] = ResolversParentTypes['ActivityCreatedSubscriptionResult']
> = {
  activity?: Resolver<
    ResolversTypes['ActivityLogEntry'],
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActivityFeedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActivityFeed'] = ResolversParentTypes['ActivityFeed']
> = {
  activityFeed?: Resolver<
    Array<ResolversTypes['ActivityLogEntry']>,
    ParentType,
    ContextType
  >;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActivityLogEntryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActivityLogEntry'] = ResolversParentTypes['ActivityLogEntry']
> = {
  __resolveType: TypeResolveFn<
    | 'ActivityLogEntryCalendarEventCreated'
    | 'ActivityLogEntryCalloutDiscussionComment'
    | 'ActivityLogEntryCalloutLinkCreated'
    | 'ActivityLogEntryCalloutPostComment'
    | 'ActivityLogEntryCalloutPostCreated'
    | 'ActivityLogEntryCalloutPublished'
    | 'ActivityLogEntryCalloutWhiteboardContentModified'
    | 'ActivityLogEntryCalloutWhiteboardCreated'
    | 'ActivityLogEntryChallengeCreated'
    | 'ActivityLogEntryMemberJoined'
    | 'ActivityLogEntryOpportunityCreated'
    | 'ActivityLogEntryUpdateSent',
    ParentType,
    ContextType
  >;
  child?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  collaborationID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  parentDisplayName?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >;
  parentNameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  space?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Space']>,
    ParentType,
    ContextType
  >;
  triggeredBy?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ActivityEventType'], ParentType, ContextType>;
};

export type ActivityLogEntryCalendarEventCreatedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActivityLogEntryCalendarEventCreated'] = ResolversParentTypes['ActivityLogEntryCalendarEventCreated']
> = {
  calendar?: Resolver<ResolversTypes['Calendar'], ParentType, ContextType>;
  calendarEvent?: Resolver<
    ResolversTypes['CalendarEvent'],
    ParentType,
    ContextType
  >;
  child?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  collaborationID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  parentDisplayName?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >;
  parentNameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  space?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Space']>,
    ParentType,
    ContextType
  >;
  triggeredBy?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ActivityEventType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActivityLogEntryCalloutDiscussionCommentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActivityLogEntryCalloutDiscussionComment'] = ResolversParentTypes['ActivityLogEntryCalloutDiscussionComment']
> = {
  callout?: Resolver<ResolversTypes['Callout'], ParentType, ContextType>;
  child?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  collaborationID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  parentDisplayName?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >;
  parentNameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  space?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Space']>,
    ParentType,
    ContextType
  >;
  triggeredBy?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ActivityEventType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActivityLogEntryCalloutLinkCreatedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActivityLogEntryCalloutLinkCreated'] = ResolversParentTypes['ActivityLogEntryCalloutLinkCreated']
> = {
  callout?: Resolver<ResolversTypes['Callout'], ParentType, ContextType>;
  child?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  collaborationID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  link?: Resolver<ResolversTypes['Link'], ParentType, ContextType>;
  parentDisplayName?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >;
  parentNameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  space?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Space']>,
    ParentType,
    ContextType
  >;
  triggeredBy?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ActivityEventType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActivityLogEntryCalloutPostCommentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActivityLogEntryCalloutPostComment'] = ResolversParentTypes['ActivityLogEntryCalloutPostComment']
> = {
  callout?: Resolver<ResolversTypes['Callout'], ParentType, ContextType>;
  child?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  collaborationID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  parentDisplayName?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >;
  parentNameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  post?: Resolver<ResolversTypes['Post'], ParentType, ContextType>;
  space?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Space']>,
    ParentType,
    ContextType
  >;
  triggeredBy?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ActivityEventType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActivityLogEntryCalloutPostCreatedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActivityLogEntryCalloutPostCreated'] = ResolversParentTypes['ActivityLogEntryCalloutPostCreated']
> = {
  callout?: Resolver<ResolversTypes['Callout'], ParentType, ContextType>;
  child?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  collaborationID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  parentDisplayName?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >;
  parentNameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  post?: Resolver<ResolversTypes['Post'], ParentType, ContextType>;
  space?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Space']>,
    ParentType,
    ContextType
  >;
  triggeredBy?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ActivityEventType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActivityLogEntryCalloutPublishedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActivityLogEntryCalloutPublished'] = ResolversParentTypes['ActivityLogEntryCalloutPublished']
> = {
  callout?: Resolver<ResolversTypes['Callout'], ParentType, ContextType>;
  child?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  collaborationID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  parentDisplayName?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >;
  parentNameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  space?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Space']>,
    ParentType,
    ContextType
  >;
  triggeredBy?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ActivityEventType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActivityLogEntryCalloutWhiteboardContentModifiedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActivityLogEntryCalloutWhiteboardContentModified'] = ResolversParentTypes['ActivityLogEntryCalloutWhiteboardContentModified']
> = {
  callout?: Resolver<ResolversTypes['Callout'], ParentType, ContextType>;
  child?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  collaborationID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  parentDisplayName?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >;
  parentNameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  space?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Space']>,
    ParentType,
    ContextType
  >;
  triggeredBy?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ActivityEventType'], ParentType, ContextType>;
  whiteboard?: Resolver<ResolversTypes['Whiteboard'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActivityLogEntryCalloutWhiteboardCreatedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActivityLogEntryCalloutWhiteboardCreated'] = ResolversParentTypes['ActivityLogEntryCalloutWhiteboardCreated']
> = {
  callout?: Resolver<ResolversTypes['Callout'], ParentType, ContextType>;
  child?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  collaborationID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  parentDisplayName?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >;
  parentNameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  space?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Space']>,
    ParentType,
    ContextType
  >;
  triggeredBy?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ActivityEventType'], ParentType, ContextType>;
  whiteboard?: Resolver<ResolversTypes['Whiteboard'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActivityLogEntryChallengeCreatedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActivityLogEntryChallengeCreated'] = ResolversParentTypes['ActivityLogEntryChallengeCreated']
> = {
  child?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  collaborationID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  parentDisplayName?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >;
  parentNameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  space?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Space']>,
    ParentType,
    ContextType
  >;
  subspace?: Resolver<ResolversTypes['Space'], ParentType, ContextType>;
  triggeredBy?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ActivityEventType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActivityLogEntryMemberJoinedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActivityLogEntryMemberJoined'] = ResolversParentTypes['ActivityLogEntryMemberJoined']
> = {
  child?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  collaborationID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  community?: Resolver<ResolversTypes['Community'], ParentType, ContextType>;
  communityType?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  parentDisplayName?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >;
  parentNameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  space?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Space']>,
    ParentType,
    ContextType
  >;
  triggeredBy?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ActivityEventType'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActivityLogEntryOpportunityCreatedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActivityLogEntryOpportunityCreated'] = ResolversParentTypes['ActivityLogEntryOpportunityCreated']
> = {
  child?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  collaborationID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  parentDisplayName?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >;
  parentNameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  space?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Space']>,
    ParentType,
    ContextType
  >;
  subsubspace?: Resolver<ResolversTypes['Space'], ParentType, ContextType>;
  triggeredBy?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ActivityEventType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActivityLogEntryUpdateSentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActivityLogEntryUpdateSent'] = ResolversParentTypes['ActivityLogEntryUpdateSent']
> = {
  child?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  collaborationID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  journeyUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  parentDisplayName?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >;
  parentNameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  space?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Space']>,
    ParentType,
    ContextType
  >;
  triggeredBy?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ActivityEventType'], ParentType, ContextType>;
  updates?: Resolver<ResolversTypes['Room'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActorResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Actor'] = ResolversParentTypes['Actor']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  description?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  impact?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActorGroupResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActorGroup'] = ResolversParentTypes['ActorGroup']
> = {
  actors?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['Actor']>>,
    ParentType,
    ContextType
  >;
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  description?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AgentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Agent'] = ResolversParentTypes['Agent']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  credentials?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['Credential']>>,
    ParentType,
    ContextType
  >;
  did?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['DID']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  verifiedCredentials?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['VerifiedCredential']>>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AgentBeginVerifiedCredentialOfferOutputResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AgentBeginVerifiedCredentialOfferOutput'] = ResolversParentTypes['AgentBeginVerifiedCredentialOfferOutput']
> = {
  jwt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  qrCodeImg?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AgentBeginVerifiedCredentialRequestOutputResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AgentBeginVerifiedCredentialRequestOutput'] = ResolversParentTypes['AgentBeginVerifiedCredentialRequestOutput']
> = {
  jwt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  qrCodeImg?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AiPersonaResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AiPersona'] = ResolversParentTypes['AiPersona']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  bodyOfKnowledge?: Resolver<
    ResolversTypes['Markdown'],
    ParentType,
    ContextType
  >;
  bodyOfKnowledgeID?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  bodyOfKnowledgeType?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['AiPersonaBodyOfKnowledgeType']>,
    ParentType,
    ContextType
  >;
  dataAccessMode?: Resolver<
    ResolversTypes['AiPersonaDataAccessMode'],
    ParentType,
    ContextType
  >;
  description?: Resolver<ResolversTypes['Markdown'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  interactionModes?: Resolver<
    Array<ResolversTypes['AiPersonaInteractionMode']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AiPersonaServiceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AiPersonaService'] = ResolversParentTypes['AiPersonaService']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  bodyOfKnowledgeID?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['UUID']>,
    ParentType,
    ContextType
  >;
  bodyOfKnowledgeType?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['AiPersonaBodyOfKnowledgeType']>,
    ParentType,
    ContextType
  >;
  dataAccessMode?: Resolver<
    ResolversTypes['AiPersonaDataAccessMode'],
    ParentType,
    ContextType
  >;
  engine?: Resolver<ResolversTypes['AiPersonaEngine'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  prompt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AiServerResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AiServer'] = ResolversParentTypes['AiServer']
> = {
  aiPersonaService?: Resolver<
    ResolversTypes['AiPersonaService'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.AiServerAiPersonaServiceArgs, 'ID'>
  >;
  aiPersonaServices?: Resolver<
    Array<ResolversTypes['AiPersonaService']>,
    ParentType,
    ContextType
  >;
  askAiPersonaServiceQuestion?: Resolver<
    ResolversTypes['MessageAnswerQuestion'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.AiServerAskAiPersonaServiceQuestionArgs,
      'chatData'
    >
  >;
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  defaultAiPersonaService?: Resolver<
    ResolversTypes['AiPersonaService'],
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AnyInvitationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AnyInvitation'] = ResolversParentTypes['AnyInvitation']
> = {
  __resolveType: TypeResolveFn<
    'Invitation' | 'InvitationExternal',
    ParentType,
    ContextType
  >;
};

export type ApplicationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Application'] = ResolversParentTypes['Application']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  contributor?: Resolver<
    ResolversTypes['Contributor'],
    ParentType,
    ContextType
  >;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  lifecycle?: Resolver<ResolversTypes['Lifecycle'], ParentType, ContextType>;
  questions?: Resolver<
    Array<ResolversTypes['Question']>,
    ParentType,
    ContextType
  >;
  updatedDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AuthenticationConfigResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthenticationConfig'] = ResolversParentTypes['AuthenticationConfig']
> = {
  providers?: Resolver<
    Array<ResolversTypes['AuthenticationProviderConfig']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AuthenticationProviderConfigResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthenticationProviderConfig'] = ResolversParentTypes['AuthenticationProviderConfig']
> = {
  config?: Resolver<
    ResolversTypes['AuthenticationProviderConfigUnion'],
    ParentType,
    ContextType
  >;
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  icon?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AuthenticationProviderConfigUnionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthenticationProviderConfigUnion'] = ResolversParentTypes['AuthenticationProviderConfigUnion']
> = {
  __resolveType: TypeResolveFn<'OryConfig', ParentType, ContextType>;
};

export type AuthorizationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Authorization'] = ResolversParentTypes['Authorization']
> = {
  anonymousReadAccess?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >;
  credentialRules?: Resolver<
    SchemaTypes.Maybe<
      Array<ResolversTypes['AuthorizationPolicyRuleCredential']>
    >,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  myPrivileges?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['AuthorizationPrivilege']>>,
    ParentType,
    ContextType
  >;
  privilegeRules?: Resolver<
    SchemaTypes.Maybe<
      Array<ResolversTypes['AuthorizationPolicyRulePrivilege']>
    >,
    ParentType,
    ContextType
  >;
  verifiedCredentialRules?: Resolver<
    SchemaTypes.Maybe<
      Array<ResolversTypes['AuthorizationPolicyRuleVerifiedCredential']>
    >,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AuthorizationPolicyRuleCredentialResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthorizationPolicyRuleCredential'] = ResolversParentTypes['AuthorizationPolicyRuleCredential']
> = {
  cascade?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  criterias?: Resolver<
    Array<ResolversTypes['CredentialDefinition']>,
    ParentType,
    ContextType
  >;
  grantedPrivileges?: Resolver<
    Array<ResolversTypes['AuthorizationPrivilege']>,
    ParentType,
    ContextType
  >;
  name?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AuthorizationPolicyRulePrivilegeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthorizationPolicyRulePrivilege'] = ResolversParentTypes['AuthorizationPolicyRulePrivilege']
> = {
  grantedPrivileges?: Resolver<
    Array<ResolversTypes['AuthorizationPrivilege']>,
    ParentType,
    ContextType
  >;
  name?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  sourcePrivilege?: Resolver<
    ResolversTypes['AuthorizationPrivilege'],
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AuthorizationPolicyRuleVerifiedCredentialResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthorizationPolicyRuleVerifiedCredential'] = ResolversParentTypes['AuthorizationPolicyRuleVerifiedCredential']
> = {
  claimRule?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  credentialName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  grantedPrivileges?: Resolver<
    Array<ResolversTypes['AuthorizationPrivilege']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface CidScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['CID'], any> {
  name: 'CID';
}

export type CalendarResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Calendar'] = ResolversParentTypes['Calendar']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  event?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['CalendarEvent']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.CalendarEventArgs, 'ID'>
  >;
  events?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['CalendarEvent']>>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.CalendarEventsArgs>
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CalendarEventResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CalendarEvent'] = ResolversParentTypes['CalendarEvent']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  comments?: Resolver<ResolversTypes['Room'], ParentType, ContextType>;
  createdBy?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['User']>,
    ParentType,
    ContextType
  >;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  durationDays?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >;
  durationMinutes?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  multipleDays?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  nameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  startDate?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >;
  type?: Resolver<ResolversTypes['CalendarEventType'], ParentType, ContextType>;
  wholeDay?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CalloutResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Callout'] = ResolversParentTypes['Callout']
> = {
  activity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  comments?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Room']>,
    ParentType,
    ContextType
  >;
  contributionDefaults?: Resolver<
    ResolversTypes['CalloutContributionDefaults'],
    ParentType,
    ContextType
  >;
  contributionPolicy?: Resolver<
    ResolversTypes['CalloutContributionPolicy'],
    ParentType,
    ContextType
  >;
  contributions?: Resolver<
    Array<ResolversTypes['CalloutContribution']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.CalloutContributionsArgs>
  >;
  createdBy?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['User']>,
    ParentType,
    ContextType
  >;
  framing?: Resolver<ResolversTypes['CalloutFraming'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  nameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  posts?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['Post']>>,
    ParentType,
    ContextType
  >;
  publishedBy?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['User']>,
    ParentType,
    ContextType
  >;
  publishedDate?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >;
  sortOrder?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['CalloutType'], ParentType, ContextType>;
  visibility?: Resolver<
    ResolversTypes['CalloutVisibility'],
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CalloutContributionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CalloutContribution'] = ResolversParentTypes['CalloutContribution']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  createdBy?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['User']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  link?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Link']>,
    ParentType,
    ContextType
  >;
  post?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Post']>,
    ParentType,
    ContextType
  >;
  whiteboard?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Whiteboard']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CalloutContributionDefaultsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CalloutContributionDefaults'] = ResolversParentTypes['CalloutContributionDefaults']
> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  postDescription?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Markdown']>,
    ParentType,
    ContextType
  >;
  whiteboardContent?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['WhiteboardContent']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CalloutContributionPolicyResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CalloutContributionPolicy'] = ResolversParentTypes['CalloutContributionPolicy']
> = {
  allowedContributionTypes?: Resolver<
    Array<ResolversTypes['CalloutContributionType']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  state?: Resolver<ResolversTypes['CalloutState'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CalloutFramingResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CalloutFraming'] = ResolversParentTypes['CalloutFraming']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  whiteboard?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Whiteboard']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CalloutGroupResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CalloutGroup'] = ResolversParentTypes['CalloutGroup']
> = {
  description?: Resolver<ResolversTypes['Markdown'], ParentType, ContextType>;
  displayName?: Resolver<
    ResolversTypes['CalloutGroupName'],
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CalloutPostCreatedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CalloutPostCreated'] = ResolversParentTypes['CalloutPostCreated']
> = {
  calloutID?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  post?: Resolver<ResolversTypes['Post'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CalloutTemplateResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CalloutTemplate'] = ResolversParentTypes['CalloutTemplate']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  contributionDefaults?: Resolver<
    ResolversTypes['CalloutContributionDefaults'],
    ParentType,
    ContextType
  >;
  contributionPolicy?: Resolver<
    ResolversTypes['CalloutContributionPolicy'],
    ParentType,
    ContextType
  >;
  framing?: Resolver<ResolversTypes['CalloutFraming'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['CalloutType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CollaborationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Collaboration'] = ResolversParentTypes['Collaboration']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  callouts?: Resolver<
    Array<ResolversTypes['Callout']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.CollaborationCalloutsArgs>
  >;
  groups?: Resolver<
    Array<ResolversTypes['CalloutGroup']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  innovationFlow?: Resolver<
    ResolversTypes['InnovationFlow'],
    ParentType,
    ContextType
  >;
  relations?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['Relation']>>,
    ParentType,
    ContextType
  >;
  tagsetTemplates?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['TagsetTemplate']>>,
    ParentType,
    ContextType
  >;
  timeline?: Resolver<ResolversTypes['Timeline'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CommunicationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Communication'] = ResolversParentTypes['Communication']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  updates?: Resolver<ResolversTypes['Room'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CommunicationAdminMembershipResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CommunicationAdminMembershipResult'] = ResolversParentTypes['CommunicationAdminMembershipResult']
> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  rooms?: Resolver<
    Array<ResolversTypes['CommunicationAdminRoomMembershipResult']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CommunicationAdminOrphanedUsageResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CommunicationAdminOrphanedUsageResult'] = ResolversParentTypes['CommunicationAdminOrphanedUsageResult']
> = {
  rooms?: Resolver<
    Array<ResolversTypes['CommunicationAdminRoomResult']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CommunicationAdminRoomMembershipResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CommunicationAdminRoomMembershipResult'] = ResolversParentTypes['CommunicationAdminRoomMembershipResult']
> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  extraMembers?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  joinRule?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  members?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  missingMembers?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  roomID?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CommunicationAdminRoomResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CommunicationAdminRoomResult'] = ResolversParentTypes['CommunicationAdminRoomResult']
> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  members?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CommunicationRoomResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CommunicationRoom'] = ResolversParentTypes['CommunicationRoom']
> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  messages?: Resolver<
    Array<ResolversTypes['Message']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CommunityResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Community'] = ResolversParentTypes['Community']
> = {
  applicationForm?: Resolver<ResolversTypes['Form'], ParentType, ContextType>;
  applications?: Resolver<
    Array<ResolversTypes['Application']>,
    ParentType,
    ContextType
  >;
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  availableLeadUsers?: Resolver<
    ResolversTypes['PaginatedUsers'],
    ParentType,
    ContextType,
    Partial<SchemaTypes.CommunityAvailableLeadUsersArgs>
  >;
  availableMemberUsers?: Resolver<
    ResolversTypes['PaginatedUsers'],
    ParentType,
    ContextType,
    Partial<SchemaTypes.CommunityAvailableMemberUsersArgs>
  >;
  communication?: Resolver<
    ResolversTypes['Communication'],
    ParentType,
    ContextType
  >;
  group?: Resolver<
    ResolversTypes['UserGroup'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.CommunityGroupArgs, 'ID'>
  >;
  groups?: Resolver<
    Array<ResolversTypes['UserGroup']>,
    ParentType,
    ContextType
  >;
  guidelines?: Resolver<
    ResolversTypes['CommunityGuidelines'],
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  invitations?: Resolver<
    Array<ResolversTypes['Invitation']>,
    ParentType,
    ContextType
  >;
  invitationsExternal?: Resolver<
    Array<ResolversTypes['InvitationExternal']>,
    ParentType,
    ContextType
  >;
  memberUsers?: Resolver<
    Array<ResolversTypes['User']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.CommunityMemberUsersArgs>
  >;
  myMembershipStatus?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['CommunityMembershipStatus']>,
    ParentType,
    ContextType
  >;
  myRoles?: Resolver<
    Array<ResolversTypes['CommunityRole']>,
    ParentType,
    ContextType
  >;
  myRolesImplicit?: Resolver<
    Array<ResolversTypes['CommunityRoleImplicit']>,
    ParentType,
    ContextType
  >;
  organizationsInRole?: Resolver<
    Array<ResolversTypes['Organization']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.CommunityOrganizationsInRoleArgs, 'role'>
  >;
  policy?: Resolver<ResolversTypes['CommunityPolicy'], ParentType, ContextType>;
  usersInRole?: Resolver<
    Array<ResolversTypes['User']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.CommunityUsersInRoleArgs, 'role'>
  >;
  virtualContributorsInRole?: Resolver<
    Array<ResolversTypes['VirtualContributor']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.CommunityVirtualContributorsInRoleArgs, 'role'>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CommunityApplicationForRoleResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CommunityApplicationForRoleResult'] = ResolversParentTypes['CommunityApplicationForRoleResult']
> = {
  communityID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  spaceID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  spaceLevel?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  state?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CommunityApplicationResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CommunityApplicationResult'] = ResolversParentTypes['CommunityApplicationResult']
> = {
  application?: Resolver<
    ResolversTypes['Application'],
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  space?: Resolver<ResolversTypes['Space'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CommunityGuidelinesResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CommunityGuidelines'] = ResolversParentTypes['CommunityGuidelines']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CommunityGuidelinesTemplateResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CommunityGuidelinesTemplate'] = ResolversParentTypes['CommunityGuidelinesTemplate']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  guidelines?: Resolver<
    ResolversTypes['CommunityGuidelines'],
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CommunityInvitationForRoleResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CommunityInvitationForRoleResult'] = ResolversParentTypes['CommunityInvitationForRoleResult']
> = {
  communityID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  contributorID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  contributorType?: Resolver<
    ResolversTypes['CommunityContributorType'],
    ParentType,
    ContextType
  >;
  createdBy?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  spaceID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  spaceLevel?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  state?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  welcomeMessage?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['UUID']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CommunityInvitationResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CommunityInvitationResult'] = ResolversParentTypes['CommunityInvitationResult']
> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  invitation?: Resolver<ResolversTypes['Invitation'], ParentType, ContextType>;
  space?: Resolver<ResolversTypes['Space'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CommunityPolicyResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CommunityPolicy'] = ResolversParentTypes['CommunityPolicy']
> = {
  admin?: Resolver<
    ResolversTypes['CommunityRolePolicy'],
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  lead?: Resolver<
    ResolversTypes['CommunityRolePolicy'],
    ParentType,
    ContextType
  >;
  member?: Resolver<
    ResolversTypes['CommunityRolePolicy'],
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CommunityRolePolicyResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CommunityRolePolicy'] = ResolversParentTypes['CommunityRolePolicy']
> = {
  credential?: Resolver<
    ResolversTypes['CredentialDefinition'],
    ParentType,
    ContextType
  >;
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  maxOrg?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  maxUser?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  minOrg?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  minUser?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  parentCredentials?: Resolver<
    Array<ResolversTypes['CredentialDefinition']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConfigResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Config'] = ResolversParentTypes['Config']
> = {
  apm?: Resolver<ResolversTypes['APM'], ParentType, ContextType>;
  authentication?: Resolver<
    ResolversTypes['AuthenticationConfig'],
    ParentType,
    ContextType
  >;
  featureFlags?: Resolver<
    Array<ResolversTypes['PlatformFeatureFlag']>,
    ParentType,
    ContextType
  >;
  geo?: Resolver<ResolversTypes['Geo'], ParentType, ContextType>;
  locations?: Resolver<
    ResolversTypes['PlatformLocations'],
    ParentType,
    ContextType
  >;
  sentry?: Resolver<ResolversTypes['Sentry'], ParentType, ContextType>;
  storage?: Resolver<ResolversTypes['StorageConfig'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContextResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Context'] = ResolversParentTypes['Context']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  impact?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Markdown']>,
    ParentType,
    ContextType
  >;
  vision?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Markdown']>,
    ParentType,
    ContextType
  >;
  who?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Markdown']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ContributorResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Contributor'] = ResolversParentTypes['Contributor']
> = {
  __resolveType: TypeResolveFn<
    'Organization' | 'User' | 'VirtualContributor',
    ParentType,
    ContextType
  >;
  agent?: Resolver<ResolversTypes['Agent'], ParentType, ContextType>;
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  nameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
};

export type ContributorRolesResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ContributorRoles'] = ResolversParentTypes['ContributorRoles']
> = {
  applications?: Resolver<
    Array<ResolversTypes['CommunityApplicationForRoleResult']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.ContributorRolesApplicationsArgs>
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  invitations?: Resolver<
    Array<ResolversTypes['CommunityInvitationForRoleResult']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.ContributorRolesInvitationsArgs>
  >;
  organizations?: Resolver<
    Array<ResolversTypes['RolesResultOrganization']>,
    ParentType,
    ContextType
  >;
  spaces?: Resolver<
    Array<ResolversTypes['RolesResultSpace']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CredentialResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Credential'] = ResolversParentTypes['Credential']
> = {
  expires?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  issuer?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['UUID']>,
    ParentType,
    ContextType
  >;
  resourceID?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['CredentialType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CredentialDefinitionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CredentialDefinition'] = ResolversParentTypes['CredentialDefinition']
> = {
  resourceID?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CredentialMetadataOutputResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CredentialMetadataOutput'] = ResolversParentTypes['CredentialMetadataOutput']
> = {
  context?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  schema?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  types?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  uniqueType?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface DidScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['DID'], any> {
  name: 'DID';
}

export interface DateTimeScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['DateTime'], any> {
  name: 'DateTime';
}

export type DirectRoomResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DirectRoom'] = ResolversParentTypes['DirectRoom']
> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  messages?: Resolver<
    Array<ResolversTypes['Message']>,
    ParentType,
    ContextType
  >;
  receiverID?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DiscussionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Discussion'] = ResolversParentTypes['Discussion']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  category?: Resolver<
    ResolversTypes['ForumDiscussionCategory'],
    ParentType,
    ContextType
  >;
  comments?: Resolver<ResolversTypes['Room'], ParentType, ContextType>;
  createdBy?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['UUID']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  nameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  privacy?: Resolver<
    ResolversTypes['ForumDiscussionPrivacy'],
    ParentType,
    ContextType
  >;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  timestamp?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DocumentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Document'] = ResolversParentTypes['Document']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  createdBy?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['User']>,
    ParentType,
    ContextType
  >;
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  mimeType?: Resolver<ResolversTypes['MimeType'], ParentType, ContextType>;
  size?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  tagset?: Resolver<ResolversTypes['Tagset'], ParentType, ContextType>;
  uploadedDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type EcosystemModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EcosystemModel'] = ResolversParentTypes['EcosystemModel']
> = {
  actorGroups?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['ActorGroup']>>,
    ParentType,
    ContextType
  >;
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  description?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface EmojiScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['Emoji'], any> {
  name: 'Emoji';
}

export type FileStorageConfigResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FileStorageConfig'] = ResolversParentTypes['FileStorageConfig']
> = {
  maxFileSize?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  mimeTypes?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Form'] = ResolversParentTypes['Form']
> = {
  description?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Markdown']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  questions?: Resolver<
    Array<ResolversTypes['FormQuestion']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FormQuestionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormQuestion'] = ResolversParentTypes['FormQuestion']
> = {
  explanation?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  maxLength?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  question?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sortOrder?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ForumResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Forum'] = ResolversParentTypes['Forum']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  discussion?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Discussion']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.ForumDiscussionArgs, 'ID'>
  >;
  discussionCategories?: Resolver<
    Array<ResolversTypes['ForumDiscussionCategory']>,
    ParentType,
    ContextType
  >;
  discussions?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['Discussion']>>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.ForumDiscussionsArgs>
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GeoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Geo'] = ResolversParentTypes['Geo']
> = {
  endpoint?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GroupableResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Groupable'] = ResolversParentTypes['Groupable']
> = {
  __resolveType: TypeResolveFn<
    'Community' | 'Organization',
    ParentType,
    ContextType
  >;
  groups?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['UserGroup']>>,
    ParentType,
    ContextType
  >;
};

export type ISearchResultsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ISearchResults'] = ResolversParentTypes['ISearchResults']
> = {
  calloutResults?: Resolver<
    Array<ResolversTypes['SearchResult']>,
    ParentType,
    ContextType
  >;
  calloutResultsCount?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >;
  contributionResults?: Resolver<
    Array<ResolversTypes['SearchResult']>,
    ParentType,
    ContextType
  >;
  contributionResultsCount?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >;
  contributorResults?: Resolver<
    Array<ResolversTypes['SearchResult']>,
    ParentType,
    ContextType
  >;
  contributorResultsCount?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >;
  groupResults?: Resolver<
    Array<ResolversTypes['SearchResult']>,
    ParentType,
    ContextType
  >;
  journeyResults?: Resolver<
    Array<ResolversTypes['SearchResult']>,
    ParentType,
    ContextType
  >;
  journeyResultsCount?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type InnovationFlowResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['InnovationFlow'] = ResolversParentTypes['InnovationFlow']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  currentState?: Resolver<
    ResolversTypes['InnovationFlowState'],
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  states?: Resolver<
    Array<ResolversTypes['InnovationFlowState']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type InnovationFlowStateResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['InnovationFlowState'] = ResolversParentTypes['InnovationFlowState']
> = {
  description?: Resolver<ResolversTypes['Markdown'], ParentType, ContextType>;
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type InnovationFlowTemplateResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['InnovationFlowTemplate'] = ResolversParentTypes['InnovationFlowTemplate']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  states?: Resolver<
    Array<ResolversTypes['InnovationFlowState']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type InnovationHubResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['InnovationHub'] = ResolversParentTypes['InnovationHub']
> = {
  account?: Resolver<ResolversTypes['Account'], ParentType, ContextType>;
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  nameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  spaceListFilter?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['Space']>>,
    ParentType,
    ContextType
  >;
  spaceVisibilityFilter?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['SpaceVisibility']>,
    ParentType,
    ContextType
  >;
  subdomain?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['InnovationHubType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type InnovationPackResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['InnovationPack'] = ResolversParentTypes['InnovationPack']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  nameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  provider?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Organization']>,
    ParentType,
    ContextType
  >;
  templates?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['TemplatesSet']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type InvitationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Invitation'] = ResolversParentTypes['Invitation']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  contributor?: Resolver<
    ResolversTypes['Contributor'],
    ParentType,
    ContextType
  >;
  contributorType?: Resolver<
    ResolversTypes['CommunityContributorType'],
    ParentType,
    ContextType
  >;
  createdBy?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  invitedToParent?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >;
  lifecycle?: Resolver<ResolversTypes['Lifecycle'], ParentType, ContextType>;
  updatedDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  welcomeMessage?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type InvitationExternalResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['InvitationExternal'] = ResolversParentTypes['InvitationExternal']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  createdBy?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  firstName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  invitedToParent?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >;
  lastName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  profileCreated?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  welcomeMessage?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface JsonScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['JSON'], any> {
  name: 'JSON';
}

export type LatestReleaseDiscussionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LatestReleaseDiscussion'] = ResolversParentTypes['LatestReleaseDiscussion']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  nameID?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LibraryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Library'] = ResolversParentTypes['Library']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  innovationPack?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['InnovationPack']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LibraryInnovationPackArgs, 'ID'>
  >;
  innovationPacks?: Resolver<
    Array<ResolversTypes['InnovationPack']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.LibraryInnovationPacksArgs>
  >;
  storageAggregator?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['StorageAggregator']>,
    ParentType,
    ContextType
  >;
  virtualContributors?: Resolver<
    Array<ResolversTypes['VirtualContributor']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LicenseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['License'] = ResolversParentTypes['License']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  visibility?: Resolver<
    ResolversTypes['SpaceVisibility'],
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LicensePlanResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LicensePlan'] = ResolversParentTypes['LicensePlan']
> = {
  assignToNewOrganizationAccounts?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >;
  assignToNewUserAccounts?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >;
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  isFree?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  licenseCredential?: Resolver<
    ResolversTypes['LicenseCredential'],
    ParentType,
    ContextType
  >;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  pricePerMonth?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >;
  requiresContactSupport?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >;
  requiresPaymentMethod?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >;
  sortOrder?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  trialEnabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['LicensePlanType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LicensePolicyResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LicensePolicy'] = ResolversParentTypes['LicensePolicy']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  credentialRules?: Resolver<
    Array<ResolversTypes['LicensePolicyCredentialRule']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LicensePolicyCredentialRuleResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LicensePolicyCredentialRule'] = ResolversParentTypes['LicensePolicyCredentialRule']
> = {
  credentialType?: Resolver<
    ResolversTypes['LicenseCredential'],
    ParentType,
    ContextType
  >;
  grantedPrivileges?: Resolver<
    Array<ResolversTypes['LicensePrivilege']>,
    ParentType,
    ContextType
  >;
  name?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LicensingResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Licensing'] = ResolversParentTypes['Licensing']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  plans?: Resolver<
    Array<ResolversTypes['LicensePlan']>,
    ParentType,
    ContextType
  >;
  policy?: Resolver<ResolversTypes['LicensePolicy'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LifecycleResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Lifecycle'] = ResolversParentTypes['Lifecycle']
> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  machineDef?: Resolver<
    ResolversTypes['LifecycleDefinition'],
    ParentType,
    ContextType
  >;
  nextEvents?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >;
  state?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  stateIsFinal?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  templateName?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface LifecycleDefinitionScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['LifecycleDefinition'], any> {
  name: 'LifecycleDefinition';
}

export type LinkResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Link'] = ResolversParentTypes['Link']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  uri?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LocationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Location'] = ResolversParentTypes['Location']
> = {
  addressLine1?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  addressLine2?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  city?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  country?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  postalCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  stateOrProvince?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type LookupQueryResultsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LookupQueryResults'] = ResolversParentTypes['LookupQueryResults']
> = {
  application?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Application']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsApplicationArgs, 'ID'>
  >;
  authorizationPolicy?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsAuthorizationPolicyArgs, 'ID'>
  >;
  authorizationPrivilegesForUser?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['AuthorizationPrivilege']>>,
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.LookupQueryResultsAuthorizationPrivilegesForUserArgs,
      'authorizationID' | 'userID'
    >
  >;
  calendar?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Calendar']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsCalendarArgs, 'ID'>
  >;
  calendarEvent?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['CalendarEvent']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsCalendarEventArgs, 'ID'>
  >;
  callout?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Callout']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsCalloutArgs, 'ID'>
  >;
  calloutTemplate?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['CalloutTemplate']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsCalloutTemplateArgs, 'ID'>
  >;
  collaboration?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Collaboration']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsCollaborationArgs, 'ID'>
  >;
  community?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Community']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsCommunityArgs, 'ID'>
  >;
  communityGuidelines?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['CommunityGuidelines']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsCommunityGuidelinesArgs, 'ID'>
  >;
  communityGuidelinesTemplate?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['CommunityGuidelinesTemplate']>,
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.LookupQueryResultsCommunityGuidelinesTemplateArgs,
      'ID'
    >
  >;
  context?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Context']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsContextArgs, 'ID'>
  >;
  document?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Document']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsDocumentArgs, 'ID'>
  >;
  innovationFlow?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['InnovationFlow']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsInnovationFlowArgs, 'ID'>
  >;
  innovationFlowTemplate?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['InnovationFlowTemplate']>,
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.LookupQueryResultsInnovationFlowTemplateArgs,
      'ID'
    >
  >;
  invitation?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Invitation']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsInvitationArgs, 'ID'>
  >;
  post?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Post']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsPostArgs, 'ID'>
  >;
  profile?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Profile']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsProfileArgs, 'ID'>
  >;
  room?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Room']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsRoomArgs, 'ID'>
  >;
  space?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Space']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsSpaceArgs, 'ID'>
  >;
  storageAggregator?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['StorageAggregator']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsStorageAggregatorArgs, 'ID'>
  >;
  virtualContributor?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['VirtualContributor']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsVirtualContributorArgs, 'ID'>
  >;
  whiteboard?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Whiteboard']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsWhiteboardArgs, 'ID'>
  >;
  whiteboardTemplate?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['WhiteboardTemplate']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.LookupQueryResultsWhiteboardTemplateArgs, 'ID'>
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface MarkdownScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['Markdown'], any> {
  name: 'Markdown';
}

export type MeQueryResultsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MeQueryResults'] = ResolversParentTypes['MeQueryResults']
> = {
  canCreateFreeSpace?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >;
  communityApplications?: Resolver<
    Array<ResolversTypes['CommunityApplicationResult']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.MeQueryResultsCommunityApplicationsArgs>
  >;
  communityInvitations?: Resolver<
    Array<ResolversTypes['CommunityInvitationResult']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.MeQueryResultsCommunityInvitationsArgs>
  >;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  mySpaces?: Resolver<
    Array<ResolversTypes['MySpaceResults']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.MeQueryResultsMySpacesArgs>
  >;
  spaceMemberships?: Resolver<
    Array<ResolversTypes['Space']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.MeQueryResultsSpaceMembershipsArgs>
  >;
  user?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['User']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MessageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Message'] = ResolversParentTypes['Message']
> = {
  id?: Resolver<ResolversTypes['MessageID'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['Markdown'], ParentType, ContextType>;
  reactions?: Resolver<
    Array<ResolversTypes['Reaction']>,
    ParentType,
    ContextType
  >;
  sender?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Contributor']>,
    ParentType,
    ContextType
  >;
  threadID?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  timestamp?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MessageAnswerQuestionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MessageAnswerQuestion'] = ResolversParentTypes['MessageAnswerQuestion']
> = {
  answer?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  question?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  sources?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['MessageAnswerToQuestionSource']>>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MessageAnswerToQuestionSourceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MessageAnswerToQuestionSource'] = ResolversParentTypes['MessageAnswerToQuestionSource']
> = {
  title?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  uri?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface MessageIdScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['MessageID'], any> {
  name: 'MessageID';
}

export type MetadataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Metadata'] = ResolversParentTypes['Metadata']
> = {
  services?: Resolver<
    Array<ResolversTypes['ServiceMetadata']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MigrateEmbeddingsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MigrateEmbeddings'] = ResolversParentTypes['MigrateEmbeddings']
> = {
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MutationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']
> = {
  addReactionToMessageInRoom?: Resolver<
    ResolversTypes['Reaction'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationAddReactionToMessageInRoomArgs,
      'reactionData'
    >
  >;
  adminCommunicationEnsureAccessToCommunications?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationAdminCommunicationEnsureAccessToCommunicationsArgs,
      'communicationData'
    >
  >;
  adminCommunicationRemoveOrphanedRoom?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationAdminCommunicationRemoveOrphanedRoomArgs,
      'orphanedRoomData'
    >
  >;
  adminCommunicationUpdateRoomsJoinRule?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationAdminCommunicationUpdateRoomsJoinRuleArgs,
      'changeRoomAccessData'
    >
  >;
  adminSearchIngestFromScratch?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >;
  aiServerAuthorizationPolicyReset?: Resolver<
    ResolversTypes['AiServer'],
    ParentType,
    ContextType
  >;
  aiServerCreateAiPersonaService?: Resolver<
    ResolversTypes['AiPersonaService'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationAiServerCreateAiPersonaServiceArgs,
      'aiPersonaServiceData'
    >
  >;
  aiServerDeleteAiPersonaService?: Resolver<
    ResolversTypes['AiPersonaService'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationAiServerDeleteAiPersonaServiceArgs,
      'deleteData'
    >
  >;
  aiServerPersonaServiceIngest?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationAiServerPersonaServiceIngestArgs,
      'ingestData'
    >
  >;
  aiServerUpdateAiPersonaService?: Resolver<
    ResolversTypes['AiPersonaService'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationAiServerUpdateAiPersonaServiceArgs,
      'aiPersonaServiceData'
    >
  >;
  applyForCommunityMembership?: Resolver<
    ResolversTypes['Application'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationApplyForCommunityMembershipArgs,
      'applicationData'
    >
  >;
  assignCommunityRoleToOrganization?: Resolver<
    ResolversTypes['Organization'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationAssignCommunityRoleToOrganizationArgs,
      'roleData'
    >
  >;
  assignCommunityRoleToUser?: Resolver<
    ResolversTypes['User'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationAssignCommunityRoleToUserArgs, 'roleData'>
  >;
  assignCommunityRoleToVirtual?: Resolver<
    ResolversTypes['VirtualContributor'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationAssignCommunityRoleToVirtualArgs,
      'roleData'
    >
  >;
  assignLicensePlanToAccount?: Resolver<
    ResolversTypes['Account'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationAssignLicensePlanToAccountArgs,
      'planData'
    >
  >;
  assignOrganizationRoleToUser?: Resolver<
    ResolversTypes['User'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationAssignOrganizationRoleToUserArgs,
      'membershipData'
    >
  >;
  assignPlatformRoleToUser?: Resolver<
    ResolversTypes['User'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationAssignPlatformRoleToUserArgs,
      'membershipData'
    >
  >;
  assignUserToGroup?: Resolver<
    ResolversTypes['UserGroup'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationAssignUserToGroupArgs, 'membershipData'>
  >;
  authorizationPolicyResetAll?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >;
  authorizationPolicyResetOnAccount?: Resolver<
    ResolversTypes['Account'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationAuthorizationPolicyResetOnAccountArgs,
      'authorizationResetData'
    >
  >;
  authorizationPolicyResetOnOrganization?: Resolver<
    ResolversTypes['Organization'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationAuthorizationPolicyResetOnOrganizationArgs,
      'authorizationResetData'
    >
  >;
  authorizationPolicyResetOnPlatform?: Resolver<
    ResolversTypes['Platform'],
    ParentType,
    ContextType
  >;
  authorizationPolicyResetOnUser?: Resolver<
    ResolversTypes['User'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationAuthorizationPolicyResetOnUserArgs,
      'authorizationResetData'
    >
  >;
  authorizationPolicyResetToGlobalAdminsAccess?: Resolver<
    ResolversTypes['Authorization'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationAuthorizationPolicyResetToGlobalAdminsAccessArgs,
      'authorizationID'
    >
  >;
  beginAlkemioUserVerifiedCredentialOfferInteraction?: Resolver<
    ResolversTypes['AgentBeginVerifiedCredentialOfferOutput'],
    ParentType,
    ContextType
  >;
  beginCommunityMemberVerifiedCredentialOfferInteraction?: Resolver<
    ResolversTypes['AgentBeginVerifiedCredentialOfferOutput'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationBeginCommunityMemberVerifiedCredentialOfferInteractionArgs,
      'communityID'
    >
  >;
  beginVerifiedCredentialRequestInteraction?: Resolver<
    ResolversTypes['AgentBeginVerifiedCredentialRequestOutput'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationBeginVerifiedCredentialRequestInteractionArgs,
      'types'
    >
  >;
  cleanupCollections?: Resolver<
    ResolversTypes['MigrateEmbeddings'],
    ParentType,
    ContextType
  >;
  convertChallengeToSpace?: Resolver<
    ResolversTypes['Space'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationConvertChallengeToSpaceArgs,
      'convertData'
    >
  >;
  convertOpportunityToChallenge?: Resolver<
    ResolversTypes['Space'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationConvertOpportunityToChallengeArgs,
      'convertData'
    >
  >;
  copyCollections?: Resolver<
    ResolversTypes['MigrateEmbeddings'],
    ParentType,
    ContextType
  >;
  createAccount?: Resolver<
    ResolversTypes['Account'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationCreateAccountArgs, 'accountData'>
  >;
  createActor?: Resolver<
    ResolversTypes['Actor'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationCreateActorArgs, 'actorData'>
  >;
  createActorGroup?: Resolver<
    ResolversTypes['ActorGroup'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationCreateActorGroupArgs, 'actorGroupData'>
  >;
  createCalloutOnCollaboration?: Resolver<
    ResolversTypes['Callout'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationCreateCalloutOnCollaborationArgs,
      'calloutData'
    >
  >;
  createCalloutTemplate?: Resolver<
    ResolversTypes['CalloutTemplate'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationCreateCalloutTemplateArgs,
      'calloutTemplateInput'
    >
  >;
  createCommunityGuidelinesTemplate?: Resolver<
    ResolversTypes['CommunityGuidelinesTemplate'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationCreateCommunityGuidelinesTemplateArgs,
      'communityGuidelinesTemplateInput'
    >
  >;
  createContributionOnCallout?: Resolver<
    ResolversTypes['CalloutContribution'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationCreateContributionOnCalloutArgs,
      'contributionData'
    >
  >;
  createDiscussion?: Resolver<
    ResolversTypes['Discussion'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationCreateDiscussionArgs, 'createData'>
  >;
  createEventOnCalendar?: Resolver<
    ResolversTypes['CalendarEvent'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationCreateEventOnCalendarArgs, 'eventData'>
  >;
  createGroupOnCommunity?: Resolver<
    ResolversTypes['UserGroup'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationCreateGroupOnCommunityArgs, 'groupData'>
  >;
  createGroupOnOrganization?: Resolver<
    ResolversTypes['UserGroup'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationCreateGroupOnOrganizationArgs,
      'groupData'
    >
  >;
  createInnovationFlowTemplate?: Resolver<
    ResolversTypes['InnovationFlowTemplate'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationCreateInnovationFlowTemplateArgs,
      'innovationFlowTemplateInput'
    >
  >;
  createInnovationHub?: Resolver<
    ResolversTypes['InnovationHub'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationCreateInnovationHubArgs, 'createData'>
  >;
  createInnovationPackOnLibrary?: Resolver<
    ResolversTypes['InnovationPack'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationCreateInnovationPackOnLibraryArgs,
      'packData'
    >
  >;
  createLicensePlan?: Resolver<
    ResolversTypes['LicensePlan'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationCreateLicensePlanArgs, 'planData'>
  >;
  createOrganization?: Resolver<
    ResolversTypes['Organization'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationCreateOrganizationArgs,
      'organizationData'
    >
  >;
  createPostTemplate?: Resolver<
    ResolversTypes['PostTemplate'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationCreatePostTemplateArgs,
      'postTemplateInput'
    >
  >;
  createReferenceOnProfile?: Resolver<
    ResolversTypes['Reference'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationCreateReferenceOnProfileArgs,
      'referenceInput'
    >
  >;
  createRelationOnCollaboration?: Resolver<
    ResolversTypes['Relation'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationCreateRelationOnCollaborationArgs,
      'relationData'
    >
  >;
  createSubspace?: Resolver<
    ResolversTypes['Space'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationCreateSubspaceArgs, 'subspaceData'>
  >;
  createTagsetOnProfile?: Resolver<
    ResolversTypes['Tagset'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationCreateTagsetOnProfileArgs, 'tagsetData'>
  >;
  createUser?: Resolver<
    ResolversTypes['User'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationCreateUserArgs, 'userData'>
  >;
  createUserNewRegistration?: Resolver<
    ResolversTypes['User'],
    ParentType,
    ContextType
  >;
  createVirtualContributor?: Resolver<
    ResolversTypes['VirtualContributor'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationCreateVirtualContributorArgs,
      'virtualContributorData'
    >
  >;
  createWhiteboardTemplate?: Resolver<
    ResolversTypes['WhiteboardTemplate'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationCreateWhiteboardTemplateArgs,
      'whiteboardTemplateInput'
    >
  >;
  deleteActor?: Resolver<
    ResolversTypes['Actor'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteActorArgs, 'deleteData'>
  >;
  deleteActorGroup?: Resolver<
    ResolversTypes['ActorGroup'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteActorGroupArgs, 'deleteData'>
  >;
  deleteCalendarEvent?: Resolver<
    ResolversTypes['CalendarEvent'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteCalendarEventArgs, 'deleteData'>
  >;
  deleteCallout?: Resolver<
    ResolversTypes['Callout'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteCalloutArgs, 'deleteData'>
  >;
  deleteCalloutTemplate?: Resolver<
    ResolversTypes['CalloutTemplate'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteCalloutTemplateArgs, 'deleteData'>
  >;
  deleteCollaboration?: Resolver<
    ResolversTypes['Collaboration'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteCollaborationArgs, 'deleteData'>
  >;
  deleteCommunityGuidelinesTemplate?: Resolver<
    ResolversTypes['CommunityGuidelinesTemplate'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationDeleteCommunityGuidelinesTemplateArgs,
      'deleteData'
    >
  >;
  deleteDiscussion?: Resolver<
    ResolversTypes['Discussion'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteDiscussionArgs, 'deleteData'>
  >;
  deleteDocument?: Resolver<
    ResolversTypes['Document'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteDocumentArgs, 'deleteData'>
  >;
  deleteInnovationFlowTemplate?: Resolver<
    ResolversTypes['InnovationFlowTemplate'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationDeleteInnovationFlowTemplateArgs,
      'deleteData'
    >
  >;
  deleteInnovationHub?: Resolver<
    ResolversTypes['InnovationHub'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteInnovationHubArgs, 'deleteData'>
  >;
  deleteInnovationPack?: Resolver<
    ResolversTypes['InnovationPack'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteInnovationPackArgs, 'deleteData'>
  >;
  deleteInvitation?: Resolver<
    ResolversTypes['Invitation'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteInvitationArgs, 'deleteData'>
  >;
  deleteInvitationExternal?: Resolver<
    ResolversTypes['InvitationExternal'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationDeleteInvitationExternalArgs,
      'deleteData'
    >
  >;
  deleteLicensePlan?: Resolver<
    ResolversTypes['LicensePlan'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteLicensePlanArgs, 'deleteData'>
  >;
  deleteLink?: Resolver<
    ResolversTypes['Link'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteLinkArgs, 'deleteData'>
  >;
  deleteOrganization?: Resolver<
    ResolversTypes['Organization'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteOrganizationArgs, 'deleteData'>
  >;
  deletePost?: Resolver<
    ResolversTypes['Post'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeletePostArgs, 'deleteData'>
  >;
  deletePostTemplate?: Resolver<
    ResolversTypes['PostTemplate'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeletePostTemplateArgs, 'deleteData'>
  >;
  deleteReference?: Resolver<
    ResolversTypes['Reference'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteReferenceArgs, 'deleteData'>
  >;
  deleteRelation?: Resolver<
    ResolversTypes['Relation'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteRelationArgs, 'deleteData'>
  >;
  deleteSpace?: Resolver<
    ResolversTypes['Space'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteSpaceArgs, 'deleteData'>
  >;
  deleteStorageBucket?: Resolver<
    ResolversTypes['StorageBucket'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteStorageBucketArgs, 'deleteData'>
  >;
  deleteUser?: Resolver<
    ResolversTypes['User'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteUserArgs, 'deleteData'>
  >;
  deleteUserApplication?: Resolver<
    ResolversTypes['Application'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteUserApplicationArgs, 'deleteData'>
  >;
  deleteUserGroup?: Resolver<
    ResolversTypes['UserGroup'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteUserGroupArgs, 'deleteData'>
  >;
  deleteVirtualContributor?: Resolver<
    ResolversTypes['VirtualContributor'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationDeleteVirtualContributorArgs,
      'deleteData'
    >
  >;
  deleteWhiteboard?: Resolver<
    ResolversTypes['Whiteboard'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationDeleteWhiteboardArgs, 'whiteboardData'>
  >;
  deleteWhiteboardTemplate?: Resolver<
    ResolversTypes['WhiteboardTemplate'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationDeleteWhiteboardTemplateArgs,
      'deleteData'
    >
  >;
  eventOnApplication?: Resolver<
    ResolversTypes['Application'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationEventOnApplicationArgs,
      'applicationEventData'
    >
  >;
  eventOnCommunityInvitation?: Resolver<
    ResolversTypes['Invitation'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationEventOnCommunityInvitationArgs,
      'invitationEventData'
    >
  >;
  eventOnOrganizationVerification?: Resolver<
    ResolversTypes['OrganizationVerification'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationEventOnOrganizationVerificationArgs,
      'organizationVerificationEventData'
    >
  >;
  grantCredentialToOrganization?: Resolver<
    ResolversTypes['Organization'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationGrantCredentialToOrganizationArgs,
      'grantCredentialData'
    >
  >;
  grantCredentialToUser?: Resolver<
    ResolversTypes['User'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationGrantCredentialToUserArgs,
      'grantCredentialData'
    >
  >;
  ingest?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  ingestSpace?: Resolver<
    ResolversTypes['Space'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationIngestSpaceArgs, 'ingestSpaceData'>
  >;
  inviteContributorsForCommunityMembership?: Resolver<
    Array<ResolversTypes['Invitation']>,
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationInviteContributorsForCommunityMembershipArgs,
      'invitationData'
    >
  >;
  inviteForCommunityMembershipByEmail?: Resolver<
    ResolversTypes['AnyInvitation'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationInviteForCommunityMembershipByEmailArgs,
      'invitationData'
    >
  >;
  joinCommunity?: Resolver<
    ResolversTypes['Community'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationJoinCommunityArgs, 'joinCommunityData'>
  >;
  messageUser?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationMessageUserArgs, 'messageData'>
  >;
  moveContributionToCallout?: Resolver<
    ResolversTypes['CalloutContribution'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationMoveContributionToCalloutArgs,
      'moveContributionData'
    >
  >;
  refreshVirtualContributorBodyOfKnowledge?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationRefreshVirtualContributorBodyOfKnowledgeArgs,
      'deleteData'
    >
  >;
  removeCommunityRoleFromOrganization?: Resolver<
    ResolversTypes['Organization'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationRemoveCommunityRoleFromOrganizationArgs,
      'roleData'
    >
  >;
  removeCommunityRoleFromUser?: Resolver<
    ResolversTypes['User'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationRemoveCommunityRoleFromUserArgs,
      'roleData'
    >
  >;
  removeCommunityRoleFromVirtual?: Resolver<
    ResolversTypes['VirtualContributor'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationRemoveCommunityRoleFromVirtualArgs,
      'roleData'
    >
  >;
  removeMessageOnRoom?: Resolver<
    ResolversTypes['MessageID'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationRemoveMessageOnRoomArgs, 'messageData'>
  >;
  removeOrganizationRoleFromUser?: Resolver<
    ResolversTypes['User'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationRemoveOrganizationRoleFromUserArgs,
      'membershipData'
    >
  >;
  removePlatformRoleFromUser?: Resolver<
    ResolversTypes['User'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationRemovePlatformRoleFromUserArgs,
      'membershipData'
    >
  >;
  removeReactionToMessageInRoom?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationRemoveReactionToMessageInRoomArgs,
      'reactionData'
    >
  >;
  removeUserFromGroup?: Resolver<
    ResolversTypes['UserGroup'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationRemoveUserFromGroupArgs, 'membershipData'>
  >;
  resetChatGuidance?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >;
  revokeCredentialFromOrganization?: Resolver<
    ResolversTypes['Organization'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationRevokeCredentialFromOrganizationArgs,
      'revokeCredentialData'
    >
  >;
  revokeCredentialFromUser?: Resolver<
    ResolversTypes['User'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationRevokeCredentialFromUserArgs,
      'revokeCredentialData'
    >
  >;
  revokeLicensePlanFromAccount?: Resolver<
    ResolversTypes['Account'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationRevokeLicensePlanFromAccountArgs,
      'planData'
    >
  >;
  sendMessageReplyToRoom?: Resolver<
    ResolversTypes['Message'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationSendMessageReplyToRoomArgs, 'messageData'>
  >;
  sendMessageToCommunityLeads?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationSendMessageToCommunityLeadsArgs,
      'messageData'
    >
  >;
  sendMessageToOrganization?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationSendMessageToOrganizationArgs,
      'messageData'
    >
  >;
  sendMessageToRoom?: Resolver<
    ResolversTypes['Message'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationSendMessageToRoomArgs, 'messageData'>
  >;
  sendMessageToUser?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationSendMessageToUserArgs, 'messageData'>
  >;
  updateAccountPlatformSettings?: Resolver<
    ResolversTypes['Account'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateAccountPlatformSettingsArgs,
      'updateData'
    >
  >;
  updateActor?: Resolver<
    ResolversTypes['Actor'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateActorArgs, 'actorData'>
  >;
  updateAiPersona?: Resolver<
    ResolversTypes['AiPersona'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateAiPersonaArgs, 'aiPersonaData'>
  >;
  updateAnswerRelevance?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateAnswerRelevanceArgs, 'input'>
  >;
  updateCalendarEvent?: Resolver<
    ResolversTypes['CalendarEvent'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateCalendarEventArgs, 'eventData'>
  >;
  updateCallout?: Resolver<
    ResolversTypes['Callout'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateCalloutArgs, 'calloutData'>
  >;
  updateCalloutPublishInfo?: Resolver<
    ResolversTypes['Callout'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateCalloutPublishInfoArgs,
      'calloutData'
    >
  >;
  updateCalloutTemplate?: Resolver<
    ResolversTypes['CalloutTemplate'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateCalloutTemplateArgs,
      'calloutTemplateInput'
    >
  >;
  updateCalloutVisibility?: Resolver<
    ResolversTypes['Callout'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateCalloutVisibilityArgs,
      'calloutData'
    >
  >;
  updateCalloutsSortOrder?: Resolver<
    Array<ResolversTypes['Callout']>,
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateCalloutsSortOrderArgs,
      'sortOrderData'
    >
  >;
  updateCommunityApplicationForm?: Resolver<
    ResolversTypes['Community'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateCommunityApplicationFormArgs,
      'applicationFormData'
    >
  >;
  updateCommunityGuidelines?: Resolver<
    ResolversTypes['CommunityGuidelines'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateCommunityGuidelinesArgs,
      'communityGuidelinesData'
    >
  >;
  updateCommunityGuidelinesTemplate?: Resolver<
    ResolversTypes['CommunityGuidelinesTemplate'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateCommunityGuidelinesTemplateArgs,
      'communityGuidelinesTemplateInput'
    >
  >;
  updateDiscussion?: Resolver<
    ResolversTypes['Discussion'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateDiscussionArgs, 'updateData'>
  >;
  updateDocument?: Resolver<
    ResolversTypes['Document'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateDocumentArgs, 'documentData'>
  >;
  updateEcosystemModel?: Resolver<
    ResolversTypes['EcosystemModel'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateEcosystemModelArgs,
      'ecosystemModelData'
    >
  >;
  updateInnovationFlow?: Resolver<
    ResolversTypes['InnovationFlow'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateInnovationFlowArgs,
      'innovationFlowData'
    >
  >;
  updateInnovationFlowSelectedState?: Resolver<
    ResolversTypes['InnovationFlow'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateInnovationFlowSelectedStateArgs,
      'innovationFlowStateData'
    >
  >;
  updateInnovationFlowSingleState?: Resolver<
    ResolversTypes['InnovationFlow'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateInnovationFlowSingleStateArgs,
      'innovationFlowStateData'
    >
  >;
  updateInnovationFlowStatesFromTemplate?: Resolver<
    ResolversTypes['InnovationFlow'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateInnovationFlowStatesFromTemplateArgs,
      'innovationFlowData'
    >
  >;
  updateInnovationFlowTemplate?: Resolver<
    ResolversTypes['InnovationFlowTemplate'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateInnovationFlowTemplateArgs,
      'innovationFlowTemplateInput'
    >
  >;
  updateInnovationHub?: Resolver<
    ResolversTypes['InnovationHub'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateInnovationHubArgs, 'updateData'>
  >;
  updateInnovationHubPlatformSettings?: Resolver<
    ResolversTypes['InnovationHub'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateInnovationHubPlatformSettingsArgs,
      'updateData'
    >
  >;
  updateInnovationPack?: Resolver<
    ResolversTypes['InnovationPack'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateInnovationPackArgs,
      'innovationPackData'
    >
  >;
  updateLicensePlan?: Resolver<
    ResolversTypes['LicensePlan'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateLicensePlanArgs, 'updateData'>
  >;
  updateLink?: Resolver<
    ResolversTypes['Link'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateLinkArgs, 'linkData'>
  >;
  updateOrganization?: Resolver<
    ResolversTypes['Organization'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateOrganizationArgs,
      'organizationData'
    >
  >;
  updateOrganizationPlatformSettings?: Resolver<
    ResolversTypes['Organization'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateOrganizationPlatformSettingsArgs,
      'organizationData'
    >
  >;
  updatePost?: Resolver<
    ResolversTypes['Post'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdatePostArgs, 'postData'>
  >;
  updatePostTemplate?: Resolver<
    ResolversTypes['PostTemplate'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdatePostTemplateArgs,
      'postTemplateInput'
    >
  >;
  updatePreferenceOnOrganization?: Resolver<
    ResolversTypes['Preference'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdatePreferenceOnOrganizationArgs,
      'preferenceData'
    >
  >;
  updatePreferenceOnUser?: Resolver<
    ResolversTypes['Preference'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdatePreferenceOnUserArgs,
      'preferenceData'
    >
  >;
  updateProfile?: Resolver<
    ResolversTypes['Profile'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateProfileArgs, 'profileData'>
  >;
  updateReference?: Resolver<
    ResolversTypes['Reference'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateReferenceArgs, 'referenceData'>
  >;
  updateSpace?: Resolver<
    ResolversTypes['Space'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateSpaceArgs, 'spaceData'>
  >;
  updateSpaceDefaults?: Resolver<
    ResolversTypes['SpaceDefaults'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateSpaceDefaultsArgs,
      'spaceDefaultsData'
    >
  >;
  updateSpacePlatformSettings?: Resolver<
    ResolversTypes['Space'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateSpacePlatformSettingsArgs,
      'updateData'
    >
  >;
  updateSpaceSettings?: Resolver<
    ResolversTypes['Space'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateSpaceSettingsArgs, 'settingsData'>
  >;
  updateTagset?: Resolver<
    ResolversTypes['Tagset'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateTagsetArgs, 'updateData'>
  >;
  updateUser?: Resolver<
    ResolversTypes['User'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateUserArgs, 'userData'>
  >;
  updateUserGroup?: Resolver<
    ResolversTypes['UserGroup'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateUserGroupArgs, 'userGroupData'>
  >;
  updateUserPlatformSettings?: Resolver<
    ResolversTypes['User'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateUserPlatformSettingsArgs,
      'updateData'
    >
  >;
  updateVirtualContributor?: Resolver<
    ResolversTypes['VirtualContributor'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateVirtualContributorArgs,
      'virtualContributorData'
    >
  >;
  updateVirtualContributorPlatformSettings?: Resolver<
    ResolversTypes['VirtualContributor'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateVirtualContributorPlatformSettingsArgs,
      'updateData'
    >
  >;
  updateVisual?: Resolver<
    ResolversTypes['Visual'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateVisualArgs, 'updateData'>
  >;
  updateWhiteboard?: Resolver<
    ResolversTypes['Whiteboard'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.MutationUpdateWhiteboardArgs, 'whiteboardData'>
  >;
  updateWhiteboardContent?: Resolver<
    ResolversTypes['Whiteboard'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateWhiteboardContentArgs,
      'whiteboardData'
    >
  >;
  updateWhiteboardTemplate?: Resolver<
    ResolversTypes['WhiteboardTemplate'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUpdateWhiteboardTemplateArgs,
      'whiteboardTemplateInput'
    >
  >;
  uploadFileOnLink?: Resolver<
    ResolversTypes['Link'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUploadFileOnLinkArgs,
      'file' | 'uploadData'
    >
  >;
  uploadFileOnReference?: Resolver<
    ResolversTypes['Reference'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUploadFileOnReferenceArgs,
      'file' | 'uploadData'
    >
  >;
  uploadFileOnStorageBucket?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUploadFileOnStorageBucketArgs,
      'file' | 'uploadData'
    >
  >;
  uploadImageOnVisual?: Resolver<
    ResolversTypes['Visual'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.MutationUploadImageOnVisualArgs,
      'file' | 'uploadData'
    >
  >;
};

export type MySpaceResultsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MySpaceResults'] = ResolversParentTypes['MySpaceResults']
> = {
  latestActivity?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['ActivityLogEntry']>,
    ParentType,
    ContextType
  >;
  space?: Resolver<ResolversTypes['Space'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type NvpResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NVP'] = ResolversParentTypes['NVP']
> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface NameIdScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['NameID'], any> {
  name: 'NameID';
}

export type OrganizationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Organization'] = ResolversParentTypes['Organization']
> = {
  accounts?: Resolver<
    Array<ResolversTypes['Account']>,
    ParentType,
    ContextType
  >;
  admins?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['User']>>,
    ParentType,
    ContextType
  >;
  agent?: Resolver<ResolversTypes['Agent'], ParentType, ContextType>;
  associates?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['User']>>,
    ParentType,
    ContextType
  >;
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  contactEmail?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  domain?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  group?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['UserGroup']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.OrganizationGroupArgs, 'ID'>
  >;
  groups?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['UserGroup']>>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  legalEntityName?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  metrics?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['NVP']>>,
    ParentType,
    ContextType
  >;
  myRoles?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['OrganizationRole']>>,
    ParentType,
    ContextType
  >;
  nameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  owners?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['User']>>,
    ParentType,
    ContextType
  >;
  preferences?: Resolver<
    Array<ResolversTypes['Preference']>,
    ParentType,
    ContextType
  >;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  storageAggregator?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['StorageAggregator']>,
    ParentType,
    ContextType
  >;
  verification?: Resolver<
    ResolversTypes['OrganizationVerification'],
    ParentType,
    ContextType
  >;
  website?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrganizationVerificationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OrganizationVerification'] = ResolversParentTypes['OrganizationVerification']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  lifecycle?: Resolver<ResolversTypes['Lifecycle'], ParentType, ContextType>;
  status?: Resolver<
    ResolversTypes['OrganizationVerificationEnum'],
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OryConfigResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OryConfig'] = ResolversParentTypes['OryConfig']
> = {
  issuer?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  kratosPublicBaseURL?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PageInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PageInfo'] = ResolversParentTypes['PageInfo']
> = {
  endCursor?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  hasNextPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  hasPreviousPage?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >;
  startCursor?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaginatedOrganizationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaginatedOrganization'] = ResolversParentTypes['PaginatedOrganization']
> = {
  organization?: Resolver<
    Array<ResolversTypes['Organization']>,
    ParentType,
    ContextType
  >;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaginatedSpacesResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaginatedSpaces'] = ResolversParentTypes['PaginatedSpaces']
> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  spaces?: Resolver<Array<ResolversTypes['Space']>, ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PaginatedUsersResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaginatedUsers'] = ResolversParentTypes['PaginatedUsers']
> = {
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  users?: Resolver<Array<ResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PlatformResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Platform'] = ResolversParentTypes['Platform']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  configuration?: Resolver<ResolversTypes['Config'], ParentType, ContextType>;
  forum?: Resolver<ResolversTypes['Forum'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  innovationHub?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['InnovationHub']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.PlatformInnovationHubArgs>
  >;
  innovationHubs?: Resolver<
    Array<ResolversTypes['InnovationHub']>,
    ParentType,
    ContextType
  >;
  latestReleaseDiscussion?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['LatestReleaseDiscussion']>,
    ParentType,
    ContextType
  >;
  library?: Resolver<ResolversTypes['Library'], ParentType, ContextType>;
  licensing?: Resolver<ResolversTypes['Licensing'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['Metadata'], ParentType, ContextType>;
  storageAggregator?: Resolver<
    ResolversTypes['StorageAggregator'],
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PlatformFeatureFlagResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PlatformFeatureFlag'] = ResolversParentTypes['PlatformFeatureFlag']
> = {
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  name?: Resolver<
    ResolversTypes['PlatformFeatureFlagName'],
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PlatformLocationsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PlatformLocations'] = ResolversParentTypes['PlatformLocations']
> = {
  about?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  aup?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  blog?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  community?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  contactsupport?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  domain?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  environment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  feedback?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  forumreleases?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  foundation?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  help?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  impact?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  innovationLibrary?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >;
  inspiration?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  landing?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  newuser?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  opensource?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  privacy?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  releases?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  security?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  support?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  switchplan?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  terms?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  tips?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Post'] = ResolversParentTypes['Post']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  comments?: Resolver<ResolversTypes['Room'], ParentType, ContextType>;
  createdBy?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['User']>,
    ParentType,
    ContextType
  >;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  nameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostTemplateResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PostTemplate'] = ResolversParentTypes['PostTemplate']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  defaultDescription?: Resolver<
    ResolversTypes['Markdown'],
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PreferenceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Preference'] = ResolversParentTypes['Preference']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  definition?: Resolver<
    ResolversTypes['PreferenceDefinition'],
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PreferenceDefinitionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PreferenceDefinition'] = ResolversParentTypes['PreferenceDefinition']
> = {
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  group?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['PreferenceType'], ParentType, ContextType>;
  valueType?: Resolver<
    ResolversTypes['PreferenceValueType'],
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProfileResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Profile'] = ResolversParentTypes['Profile']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  description?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Markdown']>,
    ParentType,
    ContextType
  >;
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  location?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Location']>,
    ParentType,
    ContextType
  >;
  references?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['Reference']>>,
    ParentType,
    ContextType
  >;
  storageBucket?: Resolver<
    ResolversTypes['StorageBucket'],
    ParentType,
    ContextType
  >;
  tagline?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  tagset?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Tagset']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.ProfileTagsetArgs>
  >;
  tagsets?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['Tagset']>>,
    ParentType,
    ContextType
  >;
  type?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['ProfileType']>,
    ParentType,
    ContextType
  >;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  visual?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Visual']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.ProfileVisualArgs, 'type'>
  >;
  visuals?: Resolver<Array<ResolversTypes['Visual']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ProfileCredentialVerifiedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ProfileCredentialVerified'] = ResolversParentTypes['ProfileCredentialVerified']
> = {
  userEmail?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  vc?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type QueryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']
> = {
  account?: Resolver<
    ResolversTypes['Account'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.QueryAccountArgs, 'ID'>
  >;
  accounts?: Resolver<
    Array<ResolversTypes['Account']>,
    ParentType,
    ContextType
  >;
  activityFeed?: Resolver<
    ResolversTypes['ActivityFeed'],
    ParentType,
    ContextType,
    Partial<SchemaTypes.QueryActivityFeedArgs>
  >;
  activityFeedGrouped?: Resolver<
    Array<ResolversTypes['ActivityLogEntry']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.QueryActivityFeedGroupedArgs>
  >;
  activityLogOnCollaboration?: Resolver<
    Array<ResolversTypes['ActivityLogEntry']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.QueryActivityLogOnCollaborationArgs, 'queryData'>
  >;
  adminCommunicationMembership?: Resolver<
    ResolversTypes['CommunicationAdminMembershipResult'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.QueryAdminCommunicationMembershipArgs,
      'communicationData'
    >
  >;
  adminCommunicationOrphanedUsage?: Resolver<
    ResolversTypes['CommunicationAdminOrphanedUsageResult'],
    ParentType,
    ContextType
  >;
  aiServer?: Resolver<ResolversTypes['AiServer'], ParentType, ContextType>;
  askChatGuidanceQuestion?: Resolver<
    ResolversTypes['MessageAnswerQuestion'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.QueryAskChatGuidanceQuestionArgs, 'chatData'>
  >;
  askVirtualContributorQuestion?: Resolver<
    ResolversTypes['MessageAnswerQuestion'],
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.QueryAskVirtualContributorQuestionArgs,
      'chatData'
    >
  >;
  getSupportedVerifiedCredentialMetadata?: Resolver<
    Array<ResolversTypes['CredentialMetadataOutput']>,
    ParentType,
    ContextType
  >;
  lookup?: Resolver<
    ResolversTypes['LookupQueryResults'],
    ParentType,
    ContextType
  >;
  me?: Resolver<ResolversTypes['MeQueryResults'], ParentType, ContextType>;
  organization?: Resolver<
    ResolversTypes['Organization'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.QueryOrganizationArgs, 'ID'>
  >;
  organizations?: Resolver<
    Array<ResolversTypes['Organization']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.QueryOrganizationsArgs>
  >;
  organizationsPaginated?: Resolver<
    ResolversTypes['PaginatedOrganization'],
    ParentType,
    ContextType,
    Partial<SchemaTypes.QueryOrganizationsPaginatedArgs>
  >;
  platform?: Resolver<ResolversTypes['Platform'], ParentType, ContextType>;
  rolesOrganization?: Resolver<
    ResolversTypes['ContributorRoles'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.QueryRolesOrganizationArgs, 'rolesData'>
  >;
  rolesUser?: Resolver<
    ResolversTypes['ContributorRoles'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.QueryRolesUserArgs, 'rolesData'>
  >;
  rolesVirtualContributor?: Resolver<
    ResolversTypes['ContributorRoles'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.QueryRolesVirtualContributorArgs, 'rolesData'>
  >;
  search?: Resolver<
    ResolversTypes['ISearchResults'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.QuerySearchArgs, 'searchData'>
  >;
  space?: Resolver<
    ResolversTypes['Space'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.QuerySpaceArgs, 'ID'>
  >;
  spaces?: Resolver<
    Array<ResolversTypes['Space']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.QuerySpacesArgs>
  >;
  spacesPaginated?: Resolver<
    ResolversTypes['PaginatedSpaces'],
    ParentType,
    ContextType,
    Partial<SchemaTypes.QuerySpacesPaginatedArgs>
  >;
  task?: Resolver<
    ResolversTypes['Task'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.QueryTaskArgs, 'id'>
  >;
  tasks?: Resolver<
    Array<ResolversTypes['Task']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.QueryTasksArgs>
  >;
  user?: Resolver<
    ResolversTypes['User'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.QueryUserArgs, 'ID'>
  >;
  userAuthorizationPrivileges?: Resolver<
    Array<ResolversTypes['AuthorizationPrivilege']>,
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.QueryUserAuthorizationPrivilegesArgs,
      'userAuthorizationPrivilegesData'
    >
  >;
  users?: Resolver<
    Array<ResolversTypes['User']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.QueryUsersArgs>
  >;
  usersPaginated?: Resolver<
    ResolversTypes['PaginatedUsers'],
    ParentType,
    ContextType,
    Partial<SchemaTypes.QueryUsersPaginatedArgs>
  >;
  usersWithAuthorizationCredential?: Resolver<
    Array<ResolversTypes['User']>,
    ParentType,
    ContextType,
    RequireFields<
      SchemaTypes.QueryUsersWithAuthorizationCredentialArgs,
      'credentialsCriteriaData'
    >
  >;
  virtualContributor?: Resolver<
    ResolversTypes['VirtualContributor'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.QueryVirtualContributorArgs, 'ID'>
  >;
  virtualContributors?: Resolver<
    Array<ResolversTypes['VirtualContributor']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.QueryVirtualContributorsArgs>
  >;
};

export type QuestionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Question'] = ResolversParentTypes['Question']
> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReactionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Reaction'] = ResolversParentTypes['Reaction']
> = {
  emoji?: Resolver<ResolversTypes['Emoji'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['MessageID'], ParentType, ContextType>;
  sender?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['User']>,
    ParentType,
    ContextType
  >;
  timestamp?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReferenceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Reference'] = ResolversParentTypes['Reference']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  description?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  uri?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RelationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Relation'] = ResolversParentTypes['Relation']
> = {
  actorName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  actorRole?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  actorType?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RelayPaginatedSpaceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RelayPaginatedSpace'] = ResolversParentTypes['RelayPaginatedSpace']
> = {
  account?: Resolver<ResolversTypes['Account'], ParentType, ContextType>;
  agent?: Resolver<ResolversTypes['Agent'], ParentType, ContextType>;
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  collaboration?: Resolver<
    ResolversTypes['Collaboration'],
    ParentType,
    ContextType
  >;
  community?: Resolver<ResolversTypes['Community'], ParentType, ContextType>;
  context?: Resolver<ResolversTypes['Context'], ParentType, ContextType>;
  createdDate?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  level?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  metrics?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['NVP']>>,
    ParentType,
    ContextType
  >;
  nameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  settings?: Resolver<ResolversTypes['SpaceSettings'], ParentType, ContextType>;
  storageAggregator?: Resolver<
    ResolversTypes['StorageAggregator'],
    ParentType,
    ContextType
  >;
  subspace?: Resolver<
    ResolversTypes['Space'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.RelayPaginatedSpaceSubspaceArgs, 'ID'>
  >;
  subspaces?: Resolver<
    Array<ResolversTypes['Space']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.RelayPaginatedSpaceSubspacesArgs>
  >;
  type?: Resolver<ResolversTypes['SpaceType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RelayPaginatedSpaceEdgeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RelayPaginatedSpaceEdge'] = ResolversParentTypes['RelayPaginatedSpaceEdge']
> = {
  node?: Resolver<
    ResolversTypes['RelayPaginatedSpace'],
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RelayPaginatedSpacePageInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RelayPaginatedSpacePageInfo'] = ResolversParentTypes['RelayPaginatedSpacePageInfo']
> = {
  endCursor?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  hasNextPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  hasPreviousPage?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >;
  startCursor?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RolesResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RolesResult'] = ResolversParentTypes['RolesResult']
> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  nameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  roles?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RolesResultCommunityResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RolesResultCommunity'] = ResolversParentTypes['RolesResultCommunity']
> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  level?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  nameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  roles?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['SpaceType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RolesResultOrganizationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RolesResultOrganization'] = ResolversParentTypes['RolesResultOrganization']
> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  nameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  organizationID?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  roles?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  userGroups?: Resolver<
    Array<ResolversTypes['RolesResult']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RolesResultSpaceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RolesResultSpace'] = ResolversParentTypes['RolesResultSpace']
> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  level?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  nameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  roles?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  spaceID?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  subspaces?: Resolver<
    Array<ResolversTypes['RolesResultCommunity']>,
    ParentType,
    ContextType
  >;
  type?: Resolver<ResolversTypes['SpaceType'], ParentType, ContextType>;
  visibility?: Resolver<
    ResolversTypes['SpaceVisibility'],
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RoomResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Room'] = ResolversParentTypes['Room']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  messages?: Resolver<
    Array<ResolversTypes['Message']>,
    ParentType,
    ContextType
  >;
  messagesCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RoomEventSubscriptionResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RoomEventSubscriptionResult'] = ResolversParentTypes['RoomEventSubscriptionResult']
> = {
  message?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['RoomMessageEventSubscriptionResult']>,
    ParentType,
    ContextType
  >;
  reaction?: Resolver<
    SchemaTypes.Maybe<
      ResolversTypes['RoomMessageReactionEventSubscriptionResult']
    >,
    ParentType,
    ContextType
  >;
  roomID?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RoomMessageEventSubscriptionResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RoomMessageEventSubscriptionResult'] = ResolversParentTypes['RoomMessageEventSubscriptionResult']
> = {
  data?: Resolver<ResolversTypes['Message'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['MutationType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RoomMessageReactionEventSubscriptionResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RoomMessageReactionEventSubscriptionResult'] = ResolversParentTypes['RoomMessageReactionEventSubscriptionResult']
> = {
  data?: Resolver<ResolversTypes['Reaction'], ParentType, ContextType>;
  messageID?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  type?: Resolver<ResolversTypes['MutationType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SearchResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SearchResult'] = ResolversParentTypes['SearchResult']
> = {
  __resolveType: TypeResolveFn<
    | 'SearchResultCallout'
    | 'SearchResultOrganization'
    | 'SearchResultPost'
    | 'SearchResultSpace'
    | 'SearchResultUser'
    | 'SearchResultUserGroup',
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  score?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  terms?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['SearchResultType'], ParentType, ContextType>;
};

export type SearchResultCalloutResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SearchResultCallout'] = ResolversParentTypes['SearchResultCallout']
> = {
  callout?: Resolver<ResolversTypes['Callout'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  score?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  space?: Resolver<ResolversTypes['Space'], ParentType, ContextType>;
  terms?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['SearchResultType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SearchResultOrganizationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SearchResultOrganization'] = ResolversParentTypes['SearchResultOrganization']
> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  organization?: Resolver<
    ResolversTypes['Organization'],
    ParentType,
    ContextType
  >;
  score?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  terms?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['SearchResultType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SearchResultPostResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SearchResultPost'] = ResolversParentTypes['SearchResultPost']
> = {
  callout?: Resolver<ResolversTypes['Callout'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  post?: Resolver<ResolversTypes['Post'], ParentType, ContextType>;
  score?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  space?: Resolver<ResolversTypes['Space'], ParentType, ContextType>;
  terms?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['SearchResultType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SearchResultSpaceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SearchResultSpace'] = ResolversParentTypes['SearchResultSpace']
> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  parentSpace?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Space']>,
    ParentType,
    ContextType
  >;
  score?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  space?: Resolver<ResolversTypes['Space'], ParentType, ContextType>;
  terms?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['SearchResultType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SearchResultUserResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SearchResultUser'] = ResolversParentTypes['SearchResultUser']
> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  score?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  terms?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['SearchResultType'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SearchResultUserGroupResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SearchResultUserGroup'] = ResolversParentTypes['SearchResultUserGroup']
> = {
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  score?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  terms?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['SearchResultType'], ParentType, ContextType>;
  userGroup?: Resolver<ResolversTypes['UserGroup'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SentryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Sentry'] = ResolversParentTypes['Sentry']
> = {
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  endpoint?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  submitPII?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ServiceMetadataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ServiceMetadata'] = ResolversParentTypes['ServiceMetadata']
> = {
  name?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  version?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SpaceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Space'] = ResolversParentTypes['Space']
> = {
  account?: Resolver<ResolversTypes['Account'], ParentType, ContextType>;
  agent?: Resolver<ResolversTypes['Agent'], ParentType, ContextType>;
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  collaboration?: Resolver<
    ResolversTypes['Collaboration'],
    ParentType,
    ContextType
  >;
  community?: Resolver<ResolversTypes['Community'], ParentType, ContextType>;
  context?: Resolver<ResolversTypes['Context'], ParentType, ContextType>;
  createdDate?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  level?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  metrics?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['NVP']>>,
    ParentType,
    ContextType
  >;
  nameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  settings?: Resolver<ResolversTypes['SpaceSettings'], ParentType, ContextType>;
  storageAggregator?: Resolver<
    ResolversTypes['StorageAggregator'],
    ParentType,
    ContextType
  >;
  subspace?: Resolver<
    ResolversTypes['Space'],
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.SpaceSubspaceArgs, 'ID'>
  >;
  subspaces?: Resolver<
    Array<ResolversTypes['Space']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.SpaceSubspacesArgs>
  >;
  type?: Resolver<ResolversTypes['SpaceType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SpaceDefaultsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SpaceDefaults'] = ResolversParentTypes['SpaceDefaults']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  innovationFlowTemplate?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['InnovationFlowTemplate']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SpaceSettingsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SpaceSettings'] = ResolversParentTypes['SpaceSettings']
> = {
  collaboration?: Resolver<
    ResolversTypes['SpaceSettingsCollaboration'],
    ParentType,
    ContextType
  >;
  membership?: Resolver<
    ResolversTypes['SpaceSettingsMembership'],
    ParentType,
    ContextType
  >;
  privacy?: Resolver<
    ResolversTypes['SpaceSettingsPrivacy'],
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SpaceSettingsCollaborationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SpaceSettingsCollaboration'] = ResolversParentTypes['SpaceSettingsCollaboration']
> = {
  allowMembersToCreateCallouts?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >;
  allowMembersToCreateSubspaces?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >;
  inheritMembershipRights?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SpaceSettingsMembershipResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SpaceSettingsMembership'] = ResolversParentTypes['SpaceSettingsMembership']
> = {
  allowSubspaceAdminsToInviteMembers?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >;
  policy?: Resolver<
    ResolversTypes['CommunityMembershipPolicy'],
    ParentType,
    ContextType
  >;
  trustedOrganizations?: Resolver<
    Array<ResolversTypes['UUID']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SpaceSettingsPrivacyResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SpaceSettingsPrivacy'] = ResolversParentTypes['SpaceSettingsPrivacy']
> = {
  allowPlatformSupportAsAdmin?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >;
  mode?: Resolver<ResolversTypes['SpacePrivacyMode'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StorageAggregatorResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['StorageAggregator'] = ResolversParentTypes['StorageAggregator']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  directStorageBucket?: Resolver<
    ResolversTypes['StorageBucket'],
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  parentEntity?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['StorageAggregatorParent']>,
    ParentType,
    ContextType
  >;
  size?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  storageAggregators?: Resolver<
    Array<ResolversTypes['StorageAggregator']>,
    ParentType,
    ContextType
  >;
  storageBuckets?: Resolver<
    Array<ResolversTypes['StorageBucket']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StorageAggregatorParentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['StorageAggregatorParent'] = ResolversParentTypes['StorageAggregatorParent']
> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  level?: Resolver<ResolversTypes['SpaceLevel'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StorageBucketResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['StorageBucket'] = ResolversParentTypes['StorageBucket']
> = {
  allowedMimeTypes?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  document?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Document']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.StorageBucketDocumentArgs, 'ID'>
  >;
  documents?: Resolver<
    Array<ResolversTypes['Document']>,
    ParentType,
    ContextType,
    Partial<SchemaTypes.StorageBucketDocumentsArgs>
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  maxFileSize?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  parentEntity?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['StorageBucketParent']>,
    ParentType,
    ContextType
  >;
  size?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StorageBucketParentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['StorageBucketParent'] = ResolversParentTypes['StorageBucketParent']
> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['ProfileType'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type StorageConfigResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['StorageConfig'] = ResolversParentTypes['StorageConfig']
> = {
  file?: Resolver<ResolversTypes['FileStorageConfig'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SubscriptionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Subscription'] = ResolversParentTypes['Subscription']
> = {
  activityCreated?: SubscriptionResolver<
    ResolversTypes['ActivityCreatedSubscriptionResult'],
    'activityCreated',
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.SubscriptionActivityCreatedArgs, 'input'>
  >;
  calloutPostCreated?: SubscriptionResolver<
    ResolversTypes['CalloutPostCreated'],
    'calloutPostCreated',
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.SubscriptionCalloutPostCreatedArgs, 'calloutID'>
  >;
  forumDiscussionUpdated?: SubscriptionResolver<
    ResolversTypes['Discussion'],
    'forumDiscussionUpdated',
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.SubscriptionForumDiscussionUpdatedArgs, 'forumID'>
  >;
  profileVerifiedCredential?: SubscriptionResolver<
    ResolversTypes['ProfileCredentialVerified'],
    'profileVerifiedCredential',
    ParentType,
    ContextType
  >;
  roomEvents?: SubscriptionResolver<
    ResolversTypes['RoomEventSubscriptionResult'],
    'roomEvents',
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.SubscriptionRoomEventsArgs, 'roomID'>
  >;
  subspaceCreated?: SubscriptionResolver<
    ResolversTypes['SubspaceCreated'],
    'subspaceCreated',
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.SubscriptionSubspaceCreatedArgs, 'spaceID'>
  >;
  whiteboardSaved?: SubscriptionResolver<
    ResolversTypes['WhiteboardSavedSubscriptionResult'],
    'whiteboardSaved',
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.SubscriptionWhiteboardSavedArgs, 'whiteboardID'>
  >;
};

export type SubspaceCreatedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SubspaceCreated'] = ResolversParentTypes['SubspaceCreated']
> = {
  spaceID?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  subspace?: Resolver<ResolversTypes['Space'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TagsetResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Tagset'] = ResolversParentTypes['Tagset']
> = {
  allowedValues?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  tags?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['TagsetType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TagsetTemplateResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TagsetTemplate'] = ResolversParentTypes['TagsetTemplate']
> = {
  allowedValues?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  defaultSelectedValue?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['TagsetType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TaskResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Task'] = ResolversParentTypes['Task']
> = {
  created?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  end?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >;
  errors?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  itemsCount?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >;
  itemsDone?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >;
  progress?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >;
  results?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >;
  start?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['TaskStatus'], ParentType, ContextType>;
  type?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplatesSetResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TemplatesSet'] = ResolversParentTypes['TemplatesSet']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  calloutTemplates?: Resolver<
    Array<ResolversTypes['CalloutTemplate']>,
    ParentType,
    ContextType
  >;
  calloutTemplatesCount?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >;
  communityGuidelinesTemplate?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['CommunityGuidelinesTemplate']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.TemplatesSetCommunityGuidelinesTemplateArgs, 'ID'>
  >;
  communityGuidelinesTemplates?: Resolver<
    Array<ResolversTypes['CommunityGuidelinesTemplate']>,
    ParentType,
    ContextType
  >;
  communityGuidelinesTemplatesCount?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  innovationFlowTemplate?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['InnovationFlowTemplate']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.TemplatesSetInnovationFlowTemplateArgs, 'ID'>
  >;
  innovationFlowTemplates?: Resolver<
    Array<ResolversTypes['InnovationFlowTemplate']>,
    ParentType,
    ContextType
  >;
  innovationFlowTemplatesCount?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >;
  postTemplate?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['PostTemplate']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.TemplatesSetPostTemplateArgs, 'ID'>
  >;
  postTemplates?: Resolver<
    Array<ResolversTypes['PostTemplate']>,
    ParentType,
    ContextType
  >;
  postTemplatesCount?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >;
  whiteboardTemplate?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['WhiteboardTemplate']>,
    ParentType,
    ContextType,
    RequireFields<SchemaTypes.TemplatesSetWhiteboardTemplateArgs, 'ID'>
  >;
  whiteboardTemplates?: Resolver<
    Array<ResolversTypes['WhiteboardTemplate']>,
    ParentType,
    ContextType
  >;
  whiteboardTemplatesCount?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TimelineResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Timeline'] = ResolversParentTypes['Timeline']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  calendar?: Resolver<ResolversTypes['Calendar'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface UuidScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['UUID'], any> {
  name: 'UUID';
}

export interface Uuid_NameidScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['UUID_NAMEID'], any> {
  name: 'UUID_NAMEID';
}

export interface Uuid_Nameid_EmailScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['UUID_NAMEID_EMAIL'], any> {
  name: 'UUID_NAMEID_EMAIL';
}

export interface UploadScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['Upload'], any> {
  name: 'Upload';
}

export type UserResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']
> = {
  accountUpn?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  accounts?: Resolver<
    Array<ResolversTypes['Account']>,
    ParentType,
    ContextType
  >;
  agent?: Resolver<ResolversTypes['Agent'], ParentType, ContextType>;
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  communityRooms?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['CommunicationRoom']>>,
    ParentType,
    ContextType
  >;
  directRooms?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['DirectRoom']>>,
    ParentType,
    ContextType
  >;
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  firstName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  gender?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  isContactable?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  lastName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  nameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  phone?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  preferences?: Resolver<
    Array<ResolversTypes['Preference']>,
    ParentType,
    ContextType
  >;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  storageAggregator?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['StorageAggregator']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserGroupResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UserGroup'] = ResolversParentTypes['UserGroup']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  members?: Resolver<
    SchemaTypes.Maybe<Array<ResolversTypes['User']>>,
    ParentType,
    ContextType
  >;
  parent?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Groupable']>,
    ParentType,
    ContextType
  >;
  profile?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Profile']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VerifiedCredentialResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VerifiedCredential'] = ResolversParentTypes['VerifiedCredential']
> = {
  claims?: Resolver<
    Array<ResolversTypes['VerifiedCredentialClaim']>,
    ParentType,
    ContextType
  >;
  context?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  expires?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  issued?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  issuer?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VerifiedCredentialClaimResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VerifiedCredentialClaim'] = ResolversParentTypes['VerifiedCredentialClaim']
> = {
  name?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VirtualContributorResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VirtualContributor'] = ResolversParentTypes['VirtualContributor']
> = {
  account?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Account']>,
    ParentType,
    ContextType
  >;
  agent?: Resolver<ResolversTypes['Agent'], ParentType, ContextType>;
  aiPersona?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['AiPersona']>,
    ParentType,
    ContextType
  >;
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  listedInStore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  nameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  searchVisibility?: Resolver<
    ResolversTypes['SearchVisibility'],
    ParentType,
    ContextType
  >;
  storageAggregator?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['StorageAggregator']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VisualResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Visual'] = ResolversParentTypes['Visual']
> = {
  allowedTypes?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  alternativeText?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >;
  aspectRatio?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  maxHeight?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  maxWidth?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  minHeight?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  minWidth?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  uri?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type WhiteboardResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Whiteboard'] = ResolversParentTypes['Whiteboard']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  content?: Resolver<
    ResolversTypes['WhiteboardContent'],
    ParentType,
    ContextType
  >;
  contentUpdatePolicy?: Resolver<
    ResolversTypes['ContentUpdatePolicy'],
    ParentType,
    ContextType
  >;
  createdBy?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['User']>,
    ParentType,
    ContextType
  >;
  createdDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  isMultiUser?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  nameID?: Resolver<ResolversTypes['NameID'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  updatedDate?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface WhiteboardContentScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['WhiteboardContent'], any> {
  name: 'WhiteboardContent';
}

export type WhiteboardSavedSubscriptionResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WhiteboardSavedSubscriptionResult'] = ResolversParentTypes['WhiteboardSavedSubscriptionResult']
> = {
  updatedDate?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >;
  whiteboardID?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type WhiteboardTemplateResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WhiteboardTemplate'] = ResolversParentTypes['WhiteboardTemplate']
> = {
  authorization?: Resolver<
    SchemaTypes.Maybe<ResolversTypes['Authorization']>,
    ParentType,
    ContextType
  >;
  content?: Resolver<
    ResolversTypes['WhiteboardContent'],
    ParentType,
    ContextType
  >;
  id?: Resolver<ResolversTypes['UUID'], ParentType, ContextType>;
  profile?: Resolver<ResolversTypes['Profile'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  APM?: ApmResolvers<ContextType>;
  Account?: AccountResolvers<ContextType>;
  AccountSubscription?: AccountSubscriptionResolvers<ContextType>;
  ActivityCreatedSubscriptionResult?: ActivityCreatedSubscriptionResultResolvers<
    ContextType
  >;
  ActivityFeed?: ActivityFeedResolvers<ContextType>;
  ActivityLogEntry?: ActivityLogEntryResolvers<ContextType>;
  ActivityLogEntryCalendarEventCreated?: ActivityLogEntryCalendarEventCreatedResolvers<
    ContextType
  >;
  ActivityLogEntryCalloutDiscussionComment?: ActivityLogEntryCalloutDiscussionCommentResolvers<
    ContextType
  >;
  ActivityLogEntryCalloutLinkCreated?: ActivityLogEntryCalloutLinkCreatedResolvers<
    ContextType
  >;
  ActivityLogEntryCalloutPostComment?: ActivityLogEntryCalloutPostCommentResolvers<
    ContextType
  >;
  ActivityLogEntryCalloutPostCreated?: ActivityLogEntryCalloutPostCreatedResolvers<
    ContextType
  >;
  ActivityLogEntryCalloutPublished?: ActivityLogEntryCalloutPublishedResolvers<
    ContextType
  >;
  ActivityLogEntryCalloutWhiteboardContentModified?: ActivityLogEntryCalloutWhiteboardContentModifiedResolvers<
    ContextType
  >;
  ActivityLogEntryCalloutWhiteboardCreated?: ActivityLogEntryCalloutWhiteboardCreatedResolvers<
    ContextType
  >;
  ActivityLogEntryChallengeCreated?: ActivityLogEntryChallengeCreatedResolvers<
    ContextType
  >;
  ActivityLogEntryMemberJoined?: ActivityLogEntryMemberJoinedResolvers<
    ContextType
  >;
  ActivityLogEntryOpportunityCreated?: ActivityLogEntryOpportunityCreatedResolvers<
    ContextType
  >;
  ActivityLogEntryUpdateSent?: ActivityLogEntryUpdateSentResolvers<ContextType>;
  Actor?: ActorResolvers<ContextType>;
  ActorGroup?: ActorGroupResolvers<ContextType>;
  Agent?: AgentResolvers<ContextType>;
  AgentBeginVerifiedCredentialOfferOutput?: AgentBeginVerifiedCredentialOfferOutputResolvers<
    ContextType
  >;
  AgentBeginVerifiedCredentialRequestOutput?: AgentBeginVerifiedCredentialRequestOutputResolvers<
    ContextType
  >;
  AiPersona?: AiPersonaResolvers<ContextType>;
  AiPersonaService?: AiPersonaServiceResolvers<ContextType>;
  AiServer?: AiServerResolvers<ContextType>;
  AnyInvitation?: AnyInvitationResolvers<ContextType>;
  Application?: ApplicationResolvers<ContextType>;
  AuthenticationConfig?: AuthenticationConfigResolvers<ContextType>;
  AuthenticationProviderConfig?: AuthenticationProviderConfigResolvers<
    ContextType
  >;
  AuthenticationProviderConfigUnion?: AuthenticationProviderConfigUnionResolvers<
    ContextType
  >;
  Authorization?: AuthorizationResolvers<ContextType>;
  AuthorizationPolicyRuleCredential?: AuthorizationPolicyRuleCredentialResolvers<
    ContextType
  >;
  AuthorizationPolicyRulePrivilege?: AuthorizationPolicyRulePrivilegeResolvers<
    ContextType
  >;
  AuthorizationPolicyRuleVerifiedCredential?: AuthorizationPolicyRuleVerifiedCredentialResolvers<
    ContextType
  >;
  CID?: GraphQLScalarType;
  Calendar?: CalendarResolvers<ContextType>;
  CalendarEvent?: CalendarEventResolvers<ContextType>;
  Callout?: CalloutResolvers<ContextType>;
  CalloutContribution?: CalloutContributionResolvers<ContextType>;
  CalloutContributionDefaults?: CalloutContributionDefaultsResolvers<
    ContextType
  >;
  CalloutContributionPolicy?: CalloutContributionPolicyResolvers<ContextType>;
  CalloutFraming?: CalloutFramingResolvers<ContextType>;
  CalloutGroup?: CalloutGroupResolvers<ContextType>;
  CalloutPostCreated?: CalloutPostCreatedResolvers<ContextType>;
  CalloutTemplate?: CalloutTemplateResolvers<ContextType>;
  Collaboration?: CollaborationResolvers<ContextType>;
  Communication?: CommunicationResolvers<ContextType>;
  CommunicationAdminMembershipResult?: CommunicationAdminMembershipResultResolvers<
    ContextType
  >;
  CommunicationAdminOrphanedUsageResult?: CommunicationAdminOrphanedUsageResultResolvers<
    ContextType
  >;
  CommunicationAdminRoomMembershipResult?: CommunicationAdminRoomMembershipResultResolvers<
    ContextType
  >;
  CommunicationAdminRoomResult?: CommunicationAdminRoomResultResolvers<
    ContextType
  >;
  CommunicationRoom?: CommunicationRoomResolvers<ContextType>;
  Community?: CommunityResolvers<ContextType>;
  CommunityApplicationForRoleResult?: CommunityApplicationForRoleResultResolvers<
    ContextType
  >;
  CommunityApplicationResult?: CommunityApplicationResultResolvers<ContextType>;
  CommunityGuidelines?: CommunityGuidelinesResolvers<ContextType>;
  CommunityGuidelinesTemplate?: CommunityGuidelinesTemplateResolvers<
    ContextType
  >;
  CommunityInvitationForRoleResult?: CommunityInvitationForRoleResultResolvers<
    ContextType
  >;
  CommunityInvitationResult?: CommunityInvitationResultResolvers<ContextType>;
  CommunityPolicy?: CommunityPolicyResolvers<ContextType>;
  CommunityRolePolicy?: CommunityRolePolicyResolvers<ContextType>;
  Config?: ConfigResolvers<ContextType>;
  Context?: ContextResolvers<ContextType>;
  Contributor?: ContributorResolvers<ContextType>;
  ContributorRoles?: ContributorRolesResolvers<ContextType>;
  Credential?: CredentialResolvers<ContextType>;
  CredentialDefinition?: CredentialDefinitionResolvers<ContextType>;
  CredentialMetadataOutput?: CredentialMetadataOutputResolvers<ContextType>;
  DID?: GraphQLScalarType;
  DateTime?: GraphQLScalarType;
  DirectRoom?: DirectRoomResolvers<ContextType>;
  Discussion?: DiscussionResolvers<ContextType>;
  Document?: DocumentResolvers<ContextType>;
  EcosystemModel?: EcosystemModelResolvers<ContextType>;
  Emoji?: GraphQLScalarType;
  FileStorageConfig?: FileStorageConfigResolvers<ContextType>;
  Form?: FormResolvers<ContextType>;
  FormQuestion?: FormQuestionResolvers<ContextType>;
  Forum?: ForumResolvers<ContextType>;
  Geo?: GeoResolvers<ContextType>;
  Groupable?: GroupableResolvers<ContextType>;
  ISearchResults?: ISearchResultsResolvers<ContextType>;
  InnovationFlow?: InnovationFlowResolvers<ContextType>;
  InnovationFlowState?: InnovationFlowStateResolvers<ContextType>;
  InnovationFlowTemplate?: InnovationFlowTemplateResolvers<ContextType>;
  InnovationHub?: InnovationHubResolvers<ContextType>;
  InnovationPack?: InnovationPackResolvers<ContextType>;
  Invitation?: InvitationResolvers<ContextType>;
  InvitationExternal?: InvitationExternalResolvers<ContextType>;
  JSON?: GraphQLScalarType;
  LatestReleaseDiscussion?: LatestReleaseDiscussionResolvers<ContextType>;
  Library?: LibraryResolvers<ContextType>;
  License?: LicenseResolvers<ContextType>;
  LicensePlan?: LicensePlanResolvers<ContextType>;
  LicensePolicy?: LicensePolicyResolvers<ContextType>;
  LicensePolicyCredentialRule?: LicensePolicyCredentialRuleResolvers<
    ContextType
  >;
  Licensing?: LicensingResolvers<ContextType>;
  Lifecycle?: LifecycleResolvers<ContextType>;
  LifecycleDefinition?: GraphQLScalarType;
  Link?: LinkResolvers<ContextType>;
  Location?: LocationResolvers<ContextType>;
  LookupQueryResults?: LookupQueryResultsResolvers<ContextType>;
  Markdown?: GraphQLScalarType;
  MeQueryResults?: MeQueryResultsResolvers<ContextType>;
  Message?: MessageResolvers<ContextType>;
  MessageAnswerQuestion?: MessageAnswerQuestionResolvers<ContextType>;
  MessageAnswerToQuestionSource?: MessageAnswerToQuestionSourceResolvers<
    ContextType
  >;
  MessageID?: GraphQLScalarType;
  Metadata?: MetadataResolvers<ContextType>;
  MigrateEmbeddings?: MigrateEmbeddingsResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  MySpaceResults?: MySpaceResultsResolvers<ContextType>;
  NVP?: NvpResolvers<ContextType>;
  NameID?: GraphQLScalarType;
  Organization?: OrganizationResolvers<ContextType>;
  OrganizationVerification?: OrganizationVerificationResolvers<ContextType>;
  OryConfig?: OryConfigResolvers<ContextType>;
  PageInfo?: PageInfoResolvers<ContextType>;
  PaginatedOrganization?: PaginatedOrganizationResolvers<ContextType>;
  PaginatedSpaces?: PaginatedSpacesResolvers<ContextType>;
  PaginatedUsers?: PaginatedUsersResolvers<ContextType>;
  Platform?: PlatformResolvers<ContextType>;
  PlatformFeatureFlag?: PlatformFeatureFlagResolvers<ContextType>;
  PlatformLocations?: PlatformLocationsResolvers<ContextType>;
  Post?: PostResolvers<ContextType>;
  PostTemplate?: PostTemplateResolvers<ContextType>;
  Preference?: PreferenceResolvers<ContextType>;
  PreferenceDefinition?: PreferenceDefinitionResolvers<ContextType>;
  Profile?: ProfileResolvers<ContextType>;
  ProfileCredentialVerified?: ProfileCredentialVerifiedResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  Question?: QuestionResolvers<ContextType>;
  Reaction?: ReactionResolvers<ContextType>;
  Reference?: ReferenceResolvers<ContextType>;
  Relation?: RelationResolvers<ContextType>;
  RelayPaginatedSpace?: RelayPaginatedSpaceResolvers<ContextType>;
  RelayPaginatedSpaceEdge?: RelayPaginatedSpaceEdgeResolvers<ContextType>;
  RelayPaginatedSpacePageInfo?: RelayPaginatedSpacePageInfoResolvers<
    ContextType
  >;
  RolesResult?: RolesResultResolvers<ContextType>;
  RolesResultCommunity?: RolesResultCommunityResolvers<ContextType>;
  RolesResultOrganization?: RolesResultOrganizationResolvers<ContextType>;
  RolesResultSpace?: RolesResultSpaceResolvers<ContextType>;
  Room?: RoomResolvers<ContextType>;
  RoomEventSubscriptionResult?: RoomEventSubscriptionResultResolvers<
    ContextType
  >;
  RoomMessageEventSubscriptionResult?: RoomMessageEventSubscriptionResultResolvers<
    ContextType
  >;
  RoomMessageReactionEventSubscriptionResult?: RoomMessageReactionEventSubscriptionResultResolvers<
    ContextType
  >;
  SearchResult?: SearchResultResolvers<ContextType>;
  SearchResultCallout?: SearchResultCalloutResolvers<ContextType>;
  SearchResultOrganization?: SearchResultOrganizationResolvers<ContextType>;
  SearchResultPost?: SearchResultPostResolvers<ContextType>;
  SearchResultSpace?: SearchResultSpaceResolvers<ContextType>;
  SearchResultUser?: SearchResultUserResolvers<ContextType>;
  SearchResultUserGroup?: SearchResultUserGroupResolvers<ContextType>;
  Sentry?: SentryResolvers<ContextType>;
  ServiceMetadata?: ServiceMetadataResolvers<ContextType>;
  Space?: SpaceResolvers<ContextType>;
  SpaceDefaults?: SpaceDefaultsResolvers<ContextType>;
  SpaceSettings?: SpaceSettingsResolvers<ContextType>;
  SpaceSettingsCollaboration?: SpaceSettingsCollaborationResolvers<ContextType>;
  SpaceSettingsMembership?: SpaceSettingsMembershipResolvers<ContextType>;
  SpaceSettingsPrivacy?: SpaceSettingsPrivacyResolvers<ContextType>;
  StorageAggregator?: StorageAggregatorResolvers<ContextType>;
  StorageAggregatorParent?: StorageAggregatorParentResolvers<ContextType>;
  StorageBucket?: StorageBucketResolvers<ContextType>;
  StorageBucketParent?: StorageBucketParentResolvers<ContextType>;
  StorageConfig?: StorageConfigResolvers<ContextType>;
  Subscription?: SubscriptionResolvers<ContextType>;
  SubspaceCreated?: SubspaceCreatedResolvers<ContextType>;
  Tagset?: TagsetResolvers<ContextType>;
  TagsetTemplate?: TagsetTemplateResolvers<ContextType>;
  Task?: TaskResolvers<ContextType>;
  TemplatesSet?: TemplatesSetResolvers<ContextType>;
  Timeline?: TimelineResolvers<ContextType>;
  UUID?: GraphQLScalarType;
  UUID_NAMEID?: GraphQLScalarType;
  UUID_NAMEID_EMAIL?: GraphQLScalarType;
  Upload?: GraphQLScalarType;
  User?: UserResolvers<ContextType>;
  UserGroup?: UserGroupResolvers<ContextType>;
  VerifiedCredential?: VerifiedCredentialResolvers<ContextType>;
  VerifiedCredentialClaim?: VerifiedCredentialClaimResolvers<ContextType>;
  VirtualContributor?: VirtualContributorResolvers<ContextType>;
  Visual?: VisualResolvers<ContextType>;
  Whiteboard?: WhiteboardResolvers<ContextType>;
  WhiteboardContent?: GraphQLScalarType;
  WhiteboardSavedSubscriptionResult?: WhiteboardSavedSubscriptionResultResolvers<
    ContextType
  >;
  WhiteboardTemplate?: WhiteboardTemplateResolvers<ContextType>;
};

export type AccountDataFragment = {
  id: string;
  spaceID: string;
  authorization?:
    | {
        anonymousReadAccess: boolean;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
      }
    | undefined;
  host?:
    | {
        id: string;
        nameID: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
        };
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }
    | {
        id: string;
        nameID: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
        };
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }
    | {
        id: string;
        nameID: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
        };
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }
    | undefined;
  license: {
    visibility: SchemaTypes.SpaceVisibility;
    id: string;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  };
  library?:
    | {
        id: string;
        innovationFlowTemplates: Array<{
          id: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
          states: Array<{ description: any; displayName: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        postTemplates: Array<{
          id: string;
          defaultDescription: any;
          type: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        whiteboardTemplates: Array<{
          id: string;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }
    | undefined;
  defaults?:
    | {
        id: string;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        innovationFlowTemplate?:
          | {
              id: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
              states: Array<{ description: any; displayName: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }
          | undefined;
      }
    | undefined;
};

export type ActorDataFragment = {
  id: string;
  name: string;
  description?: string | undefined;
  value?: string | undefined;
  impact?: string | undefined;
};

export type ActorGroupDataFragment = {
  id: string;
  name: string;
  description?: string | undefined;
  actors?:
    | Array<{
        id: string;
        name: string;
        description?: string | undefined;
        value?: string | undefined;
        impact?: string | undefined;
      }>
    | undefined;
};

export type AgentDataFragment = {
  credentials?:
    | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
    | undefined;
};

export type ApplicationDataFragment = {
  id: string;
  lifecycle: {
    id: string;
    state?: string | undefined;
    nextEvents?: Array<string> | undefined;
    stateIsFinal: boolean;
    templateName?: string | undefined;
  };
  questions: Array<{ id: string }>;
  contributor:
    | {
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }
    | {};
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
};

export type AuthorizationDataFragment = {
  anonymousReadAccess: boolean;
  myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
};

export type CalloutContributionDataFragment = {
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
  createdBy?: { email: string } | undefined;
  link?:
    | {
        id: string;
        uri: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
        };
      }
    | undefined;
  post?:
    | {
        id: string;
        nameID: string;
        type: string;
        createdDate: Date;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          visual?:
            | {
                __typename: 'Visual';
                id: string;
                uri: string;
                name: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        comments: {
          id: string;
          messagesCount: number;
          messages: Array<{
            id: any;
            message: any;
            sender?: { id: string } | {} | undefined;
          }>;
        };
        createdBy?: { email: string } | undefined;
      }
    | undefined;
  whiteboard?:
    | {
        id: string;
        nameID: string;
        content: any;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          visual?:
            | {
                __typename: 'Visual';
                id: string;
                uri: string;
                name: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
      }
    | undefined;
};

export type CalloutDataFragment = {
  id: string;
  activity: number;
  nameID: string;
  publishedDate?: number | undefined;
  sortOrder: number;
  type: SchemaTypes.CalloutType;
  visibility: SchemaTypes.CalloutVisibility;
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
  comments?:
    | { id: string; messagesCount: number; messages: Array<{ message: any }> }
    | undefined;
  contributionPolicy: {
    allowedContributionTypes: Array<SchemaTypes.CalloutContributionType>;
    id: string;
    state: SchemaTypes.CalloutState;
  };
  contributions: Array<{
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    createdBy?: { email: string } | undefined;
    link?:
      | {
          id: string;
          uri: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
        }
      | undefined;
    post?:
      | {
          id: string;
          nameID: string;
          type: string;
          createdDate: Date;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            visual?:
              | {
                  __typename: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          comments: {
            id: string;
            messagesCount: number;
            messages: Array<{
              id: any;
              message: any;
              sender?: { id: string } | {} | undefined;
            }>;
          };
          createdBy?: { email: string } | undefined;
        }
      | undefined;
    whiteboard?:
      | {
          id: string;
          nameID: string;
          content: any;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            visual?:
              | {
                  __typename: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
        }
      | undefined;
  }>;
  createdBy?: { email: string } | undefined;
  framing: {
    id: string;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      storageBucket: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        parentEntity?:
          | { displayName: string; type: SchemaTypes.ProfileType }
          | undefined;
        documents: Array<{
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
    };
    whiteboard?:
      | {
          nameID: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            visual?:
              | {
                  __typename: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
        }
      | undefined;
  };
  publishedBy?: { email: string } | undefined;
};

export type CalloutOnCollaborationWithStorageConfigFragment = {
  __typename: 'Collaboration';
  id: string;
  callouts: Array<{
    __typename: 'Callout';
    id: string;
    framing: {
      __typename: 'CalloutFraming';
      profile: {
        __typename: 'Profile';
        id: string;
        storageBucket: {
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          parentEntity?:
            | { displayName: string; type: SchemaTypes.ProfileType }
            | undefined;
          documents: Array<{
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        };
      };
    };
  }>;
};

export type CommentsDataFragment = {
  id: string;
  messagesCount: number;
  messages: Array<{
    id: any;
    message: any;
    sender?: { id: string } | {} | undefined;
  }>;
};

export type ContributionsDataFragment = {
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
  createdBy?: { email: string } | undefined;
  link?:
    | {
        id: string;
        uri: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
        };
      }
    | undefined;
  post?:
    | {
        id: string;
        nameID: string;
        type: string;
        createdDate: Date;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          visual?:
            | {
                __typename: 'Visual';
                id: string;
                uri: string;
                name: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        comments: {
          id: string;
          messagesCount: number;
          messages: Array<{
            id: any;
            message: any;
            sender?: { id: string } | {} | undefined;
          }>;
        };
        createdBy?: { email: string } | undefined;
      }
    | undefined;
  whiteboard?:
    | {
        id: string;
        nameID: string;
        content: any;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          visual?:
            | {
                __typename: 'Visual';
                id: string;
                uri: string;
                name: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
      }
    | undefined;
};

export type LinkContributionInCalloutOnCollaborationWithStorageConfigFragment = {
  __typename: 'Collaboration';
  id: string;
  callouts: Array<{
    __typename: 'Callout';
    id: string;
    contributions: Array<{
      __typename: 'CalloutContribution';
      link?:
        | {
            __typename: 'Link';
            id: string;
            profile: {
              __typename: 'Profile';
              id: string;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
          }
        | undefined;
    }>;
  }>;
};

export type PostCardInCalloutOnCollaborationWithStorageConfigFragment = {
  __typename: 'Collaboration';
  id: string;
  callouts: Array<{
    __typename: 'Callout';
    id: string;
    contributions: Array<{
      __typename: 'CalloutContribution';
      post?:
        | {
            __typename: 'Post';
            id: string;
            profile: {
              __typename: 'Profile';
              id: string;
              references?:
                | Array<{ id: string; name: string; uri: string }>
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
          }
        | undefined;
    }>;
  }>;
};

export type PostDataFragment = {
  id: string;
  nameID: string;
  type: string;
  createdDate: Date;
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
  profile: {
    id: string;
    displayName: string;
    description?: any | undefined;
    tagline: string;
    references?:
      | Array<{
          id: string;
          name: string;
          uri: string;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    visual?:
      | {
          __typename: 'Visual';
          id: string;
          uri: string;
          name: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }
      | undefined;
    storageBucket: {
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      parentEntity?:
        | { displayName: string; type: SchemaTypes.ProfileType }
        | undefined;
      documents: Array<{
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
    tagsets?:
      | Array<{
          id: string;
          name: string;
          tags: Array<string>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    location?: { country: string; city: string } | undefined;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
  comments: {
    id: string;
    messagesCount: number;
    messages: Array<{
      id: any;
      message: any;
      sender?: { id: string } | {} | undefined;
    }>;
  };
  createdBy?: { email: string } | undefined;
};

export type WhiteboardInCalloutOnCollaborationWithStorageConfigFragment = {
  __typename: 'Collaboration';
  id: string;
  callouts: Array<{
    __typename: 'Callout';
    id: string;
    contributions: Array<{
      __typename: 'CalloutContribution';
      whiteboard?:
        | {
            __typename: 'Whiteboard';
            id: string;
            profile: {
              __typename: 'Profile';
              id: string;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
          }
        | undefined;
    }>;
  }>;
};

export type WhiteboardCalloutWithStorageConfigFragment = {
  __typename: 'Collaboration';
  id: string;
  callouts: Array<{
    __typename: 'Callout';
    id: string;
    framing: {
      __typename: 'CalloutFraming';
      whiteboard?:
        | {
            profile: {
              __typename: 'Profile';
              id: string;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
          }
        | undefined;
    };
  }>;
};

export type WhiteboardDataFragment = {
  id: string;
  nameID: string;
  content: any;
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
  profile: {
    id: string;
    displayName: string;
    description?: any | undefined;
    tagline: string;
    visual?:
      | {
          __typename: 'Visual';
          id: string;
          uri: string;
          name: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }
      | undefined;
    storageBucket: {
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      parentEntity?:
        | { displayName: string; type: SchemaTypes.ProfileType }
        | undefined;
      documents: Array<{
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
    references?:
      | Array<{
          id: string;
          name: string;
          uri: string;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    tagsets?:
      | Array<{
          id: string;
          name: string;
          tags: Array<string>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    location?: { country: string; city: string } | undefined;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type CollaborationDataFragment = {
  id: string;
  relations?:
    | Array<{
        id: string;
        actorName: string;
        actorRole: string;
        actorType: string;
        description: string;
        type: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>
    | undefined;
  callouts: Array<{
    id: string;
    activity: number;
    nameID: string;
    publishedDate?: number | undefined;
    sortOrder: number;
    type: SchemaTypes.CalloutType;
    visibility: SchemaTypes.CalloutVisibility;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    comments?:
      | { id: string; messagesCount: number; messages: Array<{ message: any }> }
      | undefined;
    contributionPolicy: {
      allowedContributionTypes: Array<SchemaTypes.CalloutContributionType>;
      id: string;
      state: SchemaTypes.CalloutState;
    };
    contributions: Array<{
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      createdBy?: { email: string } | undefined;
      link?:
        | {
            id: string;
            uri: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
          }
        | undefined;
      post?:
        | {
            id: string;
            nameID: string;
            type: string;
            createdDate: Date;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              visual?:
                | {
                    __typename: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            comments: {
              id: string;
              messagesCount: number;
              messages: Array<{
                id: any;
                message: any;
                sender?: { id: string } | {} | undefined;
              }>;
            };
            createdBy?: { email: string } | undefined;
          }
        | undefined;
      whiteboard?:
        | {
            id: string;
            nameID: string;
            content: any;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              visual?:
                | {
                    __typename: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
          }
        | undefined;
    }>;
    createdBy?: { email: string } | undefined;
    framing: {
      id: string;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        storageBucket: {
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          parentEntity?:
            | { displayName: string; type: SchemaTypes.ProfileType }
            | undefined;
          documents: Array<{
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        };
      };
      whiteboard?:
        | {
            nameID: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              visual?:
                | {
                    __typename: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
          }
        | undefined;
    };
    publishedBy?: { email: string } | undefined;
  }>;
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
  innovationFlow: {
    id: string;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      storageBucket: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        parentEntity?:
          | { displayName: string; type: SchemaTypes.ProfileType }
          | undefined;
        documents: Array<{
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
    };
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    currentState: { description: any; displayName: string };
    states: Array<{ description: any; displayName: string }>;
  };
};

export type CommunityDataFragment = {
  id: string;
  authorization?:
    | {
        anonymousReadAccess: boolean;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
      }
    | undefined;
  groups: Array<{
    id: string;
    members?:
      | Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    profile?:
      | {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
        }
      | undefined;
  }>;
  applications: Array<{
    id: string;
    lifecycle: {
      id: string;
      state?: string | undefined;
      nextEvents?: Array<string> | undefined;
      stateIsFinal: boolean;
      templateName?: string | undefined;
    };
    questions: Array<{ id: string }>;
    contributor:
      | {
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }
      | {};
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  }>;
  communication: {
    id: string;
    updates: {
      id: string;
      messages: Array<{
        id: any;
        message: any;
        threadID?: string | undefined;
        sender?: { id: string } | {} | undefined;
        reactions: Array<{
          id: any;
          emoji: any;
          sender?: { email: string } | undefined;
        }>;
      }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
  memberUsers: Array<{
    id: string;
    nameID: string;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    accountUpn: string;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    agent: {
      credentials?:
        | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
        | undefined;
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  }>;
  leadUsers: Array<{
    id: string;
    nameID: string;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    accountUpn: string;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    agent: {
      credentials?:
        | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
        | undefined;
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  }>;
  adminUsers: Array<{
    id: string;
    nameID: string;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    accountUpn: string;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    agent: {
      credentials?:
        | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
        | undefined;
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  }>;
  memberOrganizations: Array<{
    id: string;
    nameID: string;
    legalEntityName?: string | undefined;
    domain?: string | undefined;
    website?: string | undefined;
    contactEmail?: string | undefined;
    groups?:
      | Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>
      | undefined;
    associates?:
      | Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    verification: {
      id: string;
      status: SchemaTypes.OrganizationVerificationEnum;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      lifecycle: {
        id: string;
        state?: string | undefined;
        nextEvents?: Array<string> | undefined;
        stateIsFinal: boolean;
        templateName?: string | undefined;
      };
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  }>;
  leadOrganizations: Array<{
    id: string;
    nameID: string;
    legalEntityName?: string | undefined;
    domain?: string | undefined;
    website?: string | undefined;
    contactEmail?: string | undefined;
    groups?:
      | Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>
      | undefined;
    associates?:
      | Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    verification: {
      id: string;
      status: SchemaTypes.OrganizationVerificationEnum;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      lifecycle: {
        id: string;
        state?: string | undefined;
        nextEvents?: Array<string> | undefined;
        stateIsFinal: boolean;
        templateName?: string | undefined;
      };
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  }>;
  adminOrganizations: Array<{
    id: string;
    nameID: string;
    legalEntityName?: string | undefined;
    domain?: string | undefined;
    website?: string | undefined;
    contactEmail?: string | undefined;
    groups?:
      | Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>
      | undefined;
    associates?:
      | Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    verification: {
      id: string;
      status: SchemaTypes.OrganizationVerificationEnum;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      lifecycle: {
        id: string;
        state?: string | undefined;
        nextEvents?: Array<string> | undefined;
        stateIsFinal: boolean;
        templateName?: string | undefined;
      };
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  }>;
};

export type MembersAndLeadsDataFragment = {
  memberUsers: Array<{
    id: string;
    nameID: string;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    accountUpn: string;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    agent: {
      credentials?:
        | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
        | undefined;
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  }>;
  leadUsers: Array<{
    id: string;
    nameID: string;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    accountUpn: string;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    agent: {
      credentials?:
        | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
        | undefined;
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  }>;
  adminUsers: Array<{
    id: string;
    nameID: string;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    accountUpn: string;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    agent: {
      credentials?:
        | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
        | undefined;
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  }>;
  memberOrganizations: Array<{
    id: string;
    nameID: string;
    legalEntityName?: string | undefined;
    domain?: string | undefined;
    website?: string | undefined;
    contactEmail?: string | undefined;
    groups?:
      | Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>
      | undefined;
    associates?:
      | Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    verification: {
      id: string;
      status: SchemaTypes.OrganizationVerificationEnum;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      lifecycle: {
        id: string;
        state?: string | undefined;
        nextEvents?: Array<string> | undefined;
        stateIsFinal: boolean;
        templateName?: string | undefined;
      };
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  }>;
  leadOrganizations: Array<{
    id: string;
    nameID: string;
    legalEntityName?: string | undefined;
    domain?: string | undefined;
    website?: string | undefined;
    contactEmail?: string | undefined;
    groups?:
      | Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>
      | undefined;
    associates?:
      | Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    verification: {
      id: string;
      status: SchemaTypes.OrganizationVerificationEnum;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      lifecycle: {
        id: string;
        state?: string | undefined;
        nextEvents?: Array<string> | undefined;
        stateIsFinal: boolean;
        templateName?: string | undefined;
      };
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  }>;
  adminOrganizations: Array<{
    id: string;
    nameID: string;
    legalEntityName?: string | undefined;
    domain?: string | undefined;
    website?: string | undefined;
    contactEmail?: string | undefined;
    groups?:
      | Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>
      | undefined;
    associates?:
      | Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    verification: {
      id: string;
      status: SchemaTypes.OrganizationVerificationEnum;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      lifecycle: {
        id: string;
        state?: string | undefined;
        nextEvents?: Array<string> | undefined;
        stateIsFinal: boolean;
        templateName?: string | undefined;
      };
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  }>;
};

export type ContextDataFragment = {
  id: string;
  vision?: any | undefined;
  impact?: any | undefined;
  who?: any | undefined;
  authorization?:
    | {
        anonymousReadAccess: boolean;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
      }
    | undefined;
};

type ContributorData_Organization_Fragment = {
  id: string;
  nameID: string;
  profile: {
    id: string;
    displayName: string;
    description?: any | undefined;
    tagline: string;
    references?:
      | Array<{
          id: string;
          name: string;
          uri: string;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    tagsets?:
      | Array<{
          id: string;
          name: string;
          tags: Array<string>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    location?: { country: string; city: string } | undefined;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    storageBucket: {
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      parentEntity?:
        | { displayName: string; type: SchemaTypes.ProfileType }
        | undefined;
      documents: Array<{
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
  };
  authorization?:
    | {
        anonymousReadAccess: boolean;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
      }
    | undefined;
};

type ContributorData_User_Fragment = {
  id: string;
  nameID: string;
  profile: {
    id: string;
    displayName: string;
    description?: any | undefined;
    tagline: string;
    references?:
      | Array<{
          id: string;
          name: string;
          uri: string;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    tagsets?:
      | Array<{
          id: string;
          name: string;
          tags: Array<string>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    location?: { country: string; city: string } | undefined;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    storageBucket: {
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      parentEntity?:
        | { displayName: string; type: SchemaTypes.ProfileType }
        | undefined;
      documents: Array<{
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
  };
  authorization?:
    | {
        anonymousReadAccess: boolean;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
      }
    | undefined;
};

type ContributorData_VirtualContributor_Fragment = {
  id: string;
  nameID: string;
  profile: {
    id: string;
    displayName: string;
    description?: any | undefined;
    tagline: string;
    references?:
      | Array<{
          id: string;
          name: string;
          uri: string;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    tagsets?:
      | Array<{
          id: string;
          name: string;
          tags: Array<string>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    location?: { country: string; city: string } | undefined;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    storageBucket: {
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      parentEntity?:
        | { displayName: string; type: SchemaTypes.ProfileType }
        | undefined;
      documents: Array<{
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
  };
  authorization?:
    | {
        anonymousReadAccess: boolean;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
      }
    | undefined;
};

export type ContributorDataFragment =
  | ContributorData_Organization_Fragment
  | ContributorData_User_Fragment
  | ContributorData_VirtualContributor_Fragment;

export type CommunicationsDiscussionDataFragment = {
  id: string;
  category: SchemaTypes.ForumDiscussionCategory;
  createdBy?: string | undefined;
  profile: { displayName: string; description?: any | undefined };
  comments: {
    id: string;
    messagesCount: number;
    messages: Array<{
      id: any;
      message: any;
      threadID?: string | undefined;
      sender?: { id: string } | {} | undefined;
      reactions: Array<{
        id: any;
        emoji: any;
        sender?: { email: string } | undefined;
      }>;
    }>;
  };
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
};

export type FeatureFlagRulesFragment = {
  name?: string | undefined;
  grantedPrivileges: Array<SchemaTypes.LicensePrivilege>;
};

export type GroupDataFragment = {
  id: string;
  members?:
    | Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>
    | undefined;
  profile?:
    | {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        storageBucket: {
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          parentEntity?:
            | { displayName: string; type: SchemaTypes.ProfileType }
            | undefined;
          documents: Array<{
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        };
      }
    | undefined;
};

export type MemberDataFragment = {
  id: string;
  nameID: string;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  accountUpn: string;
  profile: {
    id: string;
    displayName: string;
    description?: any | undefined;
    tagline: string;
    references?:
      | Array<{
          id: string;
          name: string;
          uri: string;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    tagsets?:
      | Array<{
          id: string;
          name: string;
          tags: Array<string>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    location?: { country: string; city: string } | undefined;
    visuals: Array<{ id: string; name: string; uri: string }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
  agent: {
    credentials?:
      | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
      | undefined;
  };
  preferences: Array<{
    id: string;
    value: string;
    definition: {
      type: SchemaTypes.PreferenceType;
      id: string;
      displayName: string;
      description: string;
      group: string;
    };
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  }>;
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
};

export type InnovationFlowStateDataFragment = {
  description: any;
  displayName: string;
};

export type InnovationFlowDataFragment = {
  id: string;
  profile: {
    id: string;
    displayName: string;
    description?: any | undefined;
    tagline: string;
    references?:
      | Array<{
          id: string;
          name: string;
          uri: string;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    tagsets?:
      | Array<{
          id: string;
          name: string;
          tags: Array<string>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    location?: { country: string; city: string } | undefined;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    storageBucket: {
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      parentEntity?:
        | { displayName: string; type: SchemaTypes.ProfileType }
        | undefined;
      documents: Array<{
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
  };
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
  currentState: { description: any; displayName: string };
  states: Array<{ description: any; displayName: string }>;
};

export type InvitationDataFragment = {
  id: string;
  lifecycle: {
    id: string;
    state?: string | undefined;
    nextEvents?: Array<string> | undefined;
    stateIsFinal: boolean;
    templateName?: string | undefined;
  };
  createdBy: {
    id: string;
    nameID: string;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    accountUpn: string;
    agent: {
      credentials?:
        | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
        | undefined;
    };
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
  contributor:
    | {
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }
    | {};
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
};

export type InvitationDataExternalFragment = {
  id: string;
  email: string;
  profileCreated: boolean;
  firstName: string;
  lastName: string;
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
};

export type SubspaceDataFragment = {
  id: string;
  nameID: string;
  metrics?: Array<{ id: string; name: string; value: string }> | undefined;
  profile: {
    id: string;
    displayName: string;
    description?: any | undefined;
    tagline: string;
    references?:
      | Array<{
          id: string;
          name: string;
          uri: string;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    tagsets?:
      | Array<{
          id: string;
          name: string;
          tags: Array<string>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    location?: { country: string; city: string } | undefined;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    storageBucket: {
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      parentEntity?:
        | { displayName: string; type: SchemaTypes.ProfileType }
        | undefined;
      documents: Array<{
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
  };
  collaboration: {
    id: string;
    relations?:
      | Array<{
          id: string;
          actorName: string;
          actorRole: string;
          actorType: string;
          description: string;
          type: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    callouts: Array<{
      id: string;
      activity: number;
      nameID: string;
      publishedDate?: number | undefined;
      sortOrder: number;
      type: SchemaTypes.CalloutType;
      visibility: SchemaTypes.CalloutVisibility;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      comments?:
        | {
            id: string;
            messagesCount: number;
            messages: Array<{ message: any }>;
          }
        | undefined;
      contributionPolicy: {
        allowedContributionTypes: Array<SchemaTypes.CalloutContributionType>;
        id: string;
        state: SchemaTypes.CalloutState;
      };
      contributions: Array<{
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        createdBy?: { email: string } | undefined;
        link?:
          | {
              id: string;
              uri: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
            }
          | undefined;
        post?:
          | {
              id: string;
              nameID: string;
              type: string;
              createdDate: Date;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                visual?:
                  | {
                      __typename: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              comments: {
                id: string;
                messagesCount: number;
                messages: Array<{
                  id: any;
                  message: any;
                  sender?: { id: string } | {} | undefined;
                }>;
              };
              createdBy?: { email: string } | undefined;
            }
          | undefined;
        whiteboard?:
          | {
              id: string;
              nameID: string;
              content: any;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                visual?:
                  | {
                      __typename: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
            }
          | undefined;
      }>;
      createdBy?: { email: string } | undefined;
      framing: {
        id: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
        };
        whiteboard?:
          | {
              nameID: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                visual?:
                  | {
                      __typename: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
            }
          | undefined;
      };
      publishedBy?: { email: string } | undefined;
    }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    innovationFlow: {
      id: string;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        storageBucket: {
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          parentEntity?:
            | { displayName: string; type: SchemaTypes.ProfileType }
            | undefined;
          documents: Array<{
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        };
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      currentState: { description: any; displayName: string };
      states: Array<{ description: any; displayName: string }>;
    };
  };
  authorization?:
    | {
        anonymousReadAccess: boolean;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
      }
    | undefined;
  community: {
    id: string;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
    groups: Array<{
      id: string;
      members?:
        | Array<{
            id: string;
            nameID: string;
            firstName: string;
            lastName: string;
            email: string;
            phone: string;
            accountUpn: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            agent: {
              credentials?:
                | Array<{
                    resourceID: string;
                    type: SchemaTypes.CredentialType;
                  }>
                | undefined;
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      profile?:
        | {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          }
        | undefined;
    }>;
    applications: Array<{
      id: string;
      lifecycle: {
        id: string;
        state?: string | undefined;
        nextEvents?: Array<string> | undefined;
        stateIsFinal: boolean;
        templateName?: string | undefined;
      };
      questions: Array<{ id: string }>;
      contributor:
        | {
            id: string;
            nameID: string;
            firstName: string;
            lastName: string;
            email: string;
            phone: string;
            accountUpn: string;
            agent: {
              credentials?:
                | Array<{
                    resourceID: string;
                    type: SchemaTypes.CredentialType;
                  }>
                | undefined;
            };
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | {};
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    communication: {
      id: string;
      updates: {
        id: string;
        messages: Array<{
          id: any;
          message: any;
          threadID?: string | undefined;
          sender?: { id: string } | {} | undefined;
          reactions: Array<{
            id: any;
            emoji: any;
            sender?: { email: string } | undefined;
          }>;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    memberUsers: Array<{
      id: string;
      nameID: string;
      firstName: string;
      lastName: string;
      email: string;
      phone: string;
      accountUpn: string;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        visuals: Array<{ id: string; name: string; uri: string }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      agent: {
        credentials?:
          | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
          | undefined;
      };
      preferences: Array<{
        id: string;
        value: string;
        definition: {
          type: SchemaTypes.PreferenceType;
          id: string;
          displayName: string;
          description: string;
          group: string;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    leadUsers: Array<{
      id: string;
      nameID: string;
      firstName: string;
      lastName: string;
      email: string;
      phone: string;
      accountUpn: string;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        visuals: Array<{ id: string; name: string; uri: string }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      agent: {
        credentials?:
          | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
          | undefined;
      };
      preferences: Array<{
        id: string;
        value: string;
        definition: {
          type: SchemaTypes.PreferenceType;
          id: string;
          displayName: string;
          description: string;
          group: string;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    adminUsers: Array<{
      id: string;
      nameID: string;
      firstName: string;
      lastName: string;
      email: string;
      phone: string;
      accountUpn: string;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        visuals: Array<{ id: string; name: string; uri: string }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      agent: {
        credentials?:
          | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
          | undefined;
      };
      preferences: Array<{
        id: string;
        value: string;
        definition: {
          type: SchemaTypes.PreferenceType;
          id: string;
          displayName: string;
          description: string;
          group: string;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    memberOrganizations: Array<{
      id: string;
      nameID: string;
      legalEntityName?: string | undefined;
      domain?: string | undefined;
      website?: string | undefined;
      contactEmail?: string | undefined;
      groups?:
        | Array<{
            id: string;
            members?:
              | Array<{
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            profile?:
              | {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                }
              | undefined;
          }>
        | undefined;
      associates?:
        | Array<{
            id: string;
            nameID: string;
            firstName: string;
            lastName: string;
            email: string;
            phone: string;
            accountUpn: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            agent: {
              credentials?:
                | Array<{
                    resourceID: string;
                    type: SchemaTypes.CredentialType;
                  }>
                | undefined;
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        visuals: Array<{ id: string; name: string; uri: string }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      verification: {
        id: string;
        status: SchemaTypes.OrganizationVerificationEnum;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        lifecycle: {
          id: string;
          state?: string | undefined;
          nextEvents?: Array<string> | undefined;
          stateIsFinal: boolean;
          templateName?: string | undefined;
        };
      };
      preferences: Array<{
        id: string;
        value: string;
        definition: {
          type: SchemaTypes.PreferenceType;
          id: string;
          displayName: string;
          description: string;
          group: string;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    leadOrganizations: Array<{
      id: string;
      nameID: string;
      legalEntityName?: string | undefined;
      domain?: string | undefined;
      website?: string | undefined;
      contactEmail?: string | undefined;
      groups?:
        | Array<{
            id: string;
            members?:
              | Array<{
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            profile?:
              | {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                }
              | undefined;
          }>
        | undefined;
      associates?:
        | Array<{
            id: string;
            nameID: string;
            firstName: string;
            lastName: string;
            email: string;
            phone: string;
            accountUpn: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            agent: {
              credentials?:
                | Array<{
                    resourceID: string;
                    type: SchemaTypes.CredentialType;
                  }>
                | undefined;
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        visuals: Array<{ id: string; name: string; uri: string }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      verification: {
        id: string;
        status: SchemaTypes.OrganizationVerificationEnum;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        lifecycle: {
          id: string;
          state?: string | undefined;
          nextEvents?: Array<string> | undefined;
          stateIsFinal: boolean;
          templateName?: string | undefined;
        };
      };
      preferences: Array<{
        id: string;
        value: string;
        definition: {
          type: SchemaTypes.PreferenceType;
          id: string;
          displayName: string;
          description: string;
          group: string;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    adminOrganizations: Array<{
      id: string;
      nameID: string;
      legalEntityName?: string | undefined;
      domain?: string | undefined;
      website?: string | undefined;
      contactEmail?: string | undefined;
      groups?:
        | Array<{
            id: string;
            members?:
              | Array<{
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            profile?:
              | {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                }
              | undefined;
          }>
        | undefined;
      associates?:
        | Array<{
            id: string;
            nameID: string;
            firstName: string;
            lastName: string;
            email: string;
            phone: string;
            accountUpn: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            agent: {
              credentials?:
                | Array<{
                    resourceID: string;
                    type: SchemaTypes.CredentialType;
                  }>
                | undefined;
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        visuals: Array<{ id: string; name: string; uri: string }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      verification: {
        id: string;
        status: SchemaTypes.OrganizationVerificationEnum;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        lifecycle: {
          id: string;
          state?: string | undefined;
          nextEvents?: Array<string> | undefined;
          stateIsFinal: boolean;
          templateName?: string | undefined;
        };
      };
      preferences: Array<{
        id: string;
        value: string;
        definition: {
          type: SchemaTypes.PreferenceType;
          id: string;
          displayName: string;
          description: string;
          group: string;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
  };
  context: {
    id: string;
    vision?: any | undefined;
    impact?: any | undefined;
    who?: any | undefined;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  };
};

export type LicenseDataFragment = {
  visibility: SchemaTypes.SpaceVisibility;
  id: string;
  authorization?:
    | {
        anonymousReadAccess: boolean;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
      }
    | undefined;
};

export type SpaceDataFragment = {
  id: string;
  nameID: string;
  metrics?: Array<{ id: string; name: string; value: string }> | undefined;
  account: {
    id: string;
    spaceID: string;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
    host?:
      | {
          id: string;
          nameID: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }
      | {
          id: string;
          nameID: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }
      | {
          id: string;
          nameID: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }
      | undefined;
    license: {
      visibility: SchemaTypes.SpaceVisibility;
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    library?:
      | {
          id: string;
          innovationFlowTemplates: Array<{
            id: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            states: Array<{ description: any; displayName: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          postTemplates: Array<{
            id: string;
            defaultDescription: any;
            type: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          whiteboardTemplates: Array<{
            id: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }
      | undefined;
    defaults?:
      | {
          id: string;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          innovationFlowTemplate?:
            | {
                id: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                };
                states: Array<{ description: any; displayName: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }
            | undefined;
        }
      | undefined;
  };
  authorization?:
    | {
        anonymousReadAccess: boolean;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
      }
    | undefined;
  context: {
    id: string;
    vision?: any | undefined;
    impact?: any | undefined;
    who?: any | undefined;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  };
  community: {
    id: string;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
    groups: Array<{
      id: string;
      members?:
        | Array<{
            id: string;
            nameID: string;
            firstName: string;
            lastName: string;
            email: string;
            phone: string;
            accountUpn: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            agent: {
              credentials?:
                | Array<{
                    resourceID: string;
                    type: SchemaTypes.CredentialType;
                  }>
                | undefined;
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      profile?:
        | {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          }
        | undefined;
    }>;
    applications: Array<{
      id: string;
      lifecycle: {
        id: string;
        state?: string | undefined;
        nextEvents?: Array<string> | undefined;
        stateIsFinal: boolean;
        templateName?: string | undefined;
      };
      questions: Array<{ id: string }>;
      contributor:
        | {
            id: string;
            nameID: string;
            firstName: string;
            lastName: string;
            email: string;
            phone: string;
            accountUpn: string;
            agent: {
              credentials?:
                | Array<{
                    resourceID: string;
                    type: SchemaTypes.CredentialType;
                  }>
                | undefined;
            };
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | {};
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    communication: {
      id: string;
      updates: {
        id: string;
        messages: Array<{
          id: any;
          message: any;
          threadID?: string | undefined;
          sender?: { id: string } | {} | undefined;
          reactions: Array<{
            id: any;
            emoji: any;
            sender?: { email: string } | undefined;
          }>;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    memberUsers: Array<{
      id: string;
      nameID: string;
      firstName: string;
      lastName: string;
      email: string;
      phone: string;
      accountUpn: string;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        visuals: Array<{ id: string; name: string; uri: string }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      agent: {
        credentials?:
          | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
          | undefined;
      };
      preferences: Array<{
        id: string;
        value: string;
        definition: {
          type: SchemaTypes.PreferenceType;
          id: string;
          displayName: string;
          description: string;
          group: string;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    leadUsers: Array<{
      id: string;
      nameID: string;
      firstName: string;
      lastName: string;
      email: string;
      phone: string;
      accountUpn: string;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        visuals: Array<{ id: string; name: string; uri: string }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      agent: {
        credentials?:
          | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
          | undefined;
      };
      preferences: Array<{
        id: string;
        value: string;
        definition: {
          type: SchemaTypes.PreferenceType;
          id: string;
          displayName: string;
          description: string;
          group: string;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    adminUsers: Array<{
      id: string;
      nameID: string;
      firstName: string;
      lastName: string;
      email: string;
      phone: string;
      accountUpn: string;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        visuals: Array<{ id: string; name: string; uri: string }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      agent: {
        credentials?:
          | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
          | undefined;
      };
      preferences: Array<{
        id: string;
        value: string;
        definition: {
          type: SchemaTypes.PreferenceType;
          id: string;
          displayName: string;
          description: string;
          group: string;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    memberOrganizations: Array<{
      id: string;
      nameID: string;
      legalEntityName?: string | undefined;
      domain?: string | undefined;
      website?: string | undefined;
      contactEmail?: string | undefined;
      groups?:
        | Array<{
            id: string;
            members?:
              | Array<{
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            profile?:
              | {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                }
              | undefined;
          }>
        | undefined;
      associates?:
        | Array<{
            id: string;
            nameID: string;
            firstName: string;
            lastName: string;
            email: string;
            phone: string;
            accountUpn: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            agent: {
              credentials?:
                | Array<{
                    resourceID: string;
                    type: SchemaTypes.CredentialType;
                  }>
                | undefined;
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        visuals: Array<{ id: string; name: string; uri: string }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      verification: {
        id: string;
        status: SchemaTypes.OrganizationVerificationEnum;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        lifecycle: {
          id: string;
          state?: string | undefined;
          nextEvents?: Array<string> | undefined;
          stateIsFinal: boolean;
          templateName?: string | undefined;
        };
      };
      preferences: Array<{
        id: string;
        value: string;
        definition: {
          type: SchemaTypes.PreferenceType;
          id: string;
          displayName: string;
          description: string;
          group: string;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    leadOrganizations: Array<{
      id: string;
      nameID: string;
      legalEntityName?: string | undefined;
      domain?: string | undefined;
      website?: string | undefined;
      contactEmail?: string | undefined;
      groups?:
        | Array<{
            id: string;
            members?:
              | Array<{
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            profile?:
              | {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                }
              | undefined;
          }>
        | undefined;
      associates?:
        | Array<{
            id: string;
            nameID: string;
            firstName: string;
            lastName: string;
            email: string;
            phone: string;
            accountUpn: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            agent: {
              credentials?:
                | Array<{
                    resourceID: string;
                    type: SchemaTypes.CredentialType;
                  }>
                | undefined;
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        visuals: Array<{ id: string; name: string; uri: string }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      verification: {
        id: string;
        status: SchemaTypes.OrganizationVerificationEnum;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        lifecycle: {
          id: string;
          state?: string | undefined;
          nextEvents?: Array<string> | undefined;
          stateIsFinal: boolean;
          templateName?: string | undefined;
        };
      };
      preferences: Array<{
        id: string;
        value: string;
        definition: {
          type: SchemaTypes.PreferenceType;
          id: string;
          displayName: string;
          description: string;
          group: string;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    adminOrganizations: Array<{
      id: string;
      nameID: string;
      legalEntityName?: string | undefined;
      domain?: string | undefined;
      website?: string | undefined;
      contactEmail?: string | undefined;
      groups?:
        | Array<{
            id: string;
            members?:
              | Array<{
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            profile?:
              | {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                }
              | undefined;
          }>
        | undefined;
      associates?:
        | Array<{
            id: string;
            nameID: string;
            firstName: string;
            lastName: string;
            email: string;
            phone: string;
            accountUpn: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            agent: {
              credentials?:
                | Array<{
                    resourceID: string;
                    type: SchemaTypes.CredentialType;
                  }>
                | undefined;
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        visuals: Array<{ id: string; name: string; uri: string }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      verification: {
        id: string;
        status: SchemaTypes.OrganizationVerificationEnum;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        lifecycle: {
          id: string;
          state?: string | undefined;
          nextEvents?: Array<string> | undefined;
          stateIsFinal: boolean;
          templateName?: string | undefined;
        };
      };
      preferences: Array<{
        id: string;
        value: string;
        definition: {
          type: SchemaTypes.PreferenceType;
          id: string;
          displayName: string;
          description: string;
          group: string;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
  };
  collaboration: {
    id: string;
    relations?:
      | Array<{
          id: string;
          actorName: string;
          actorRole: string;
          actorType: string;
          description: string;
          type: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    callouts: Array<{
      id: string;
      activity: number;
      nameID: string;
      publishedDate?: number | undefined;
      sortOrder: number;
      type: SchemaTypes.CalloutType;
      visibility: SchemaTypes.CalloutVisibility;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      comments?:
        | {
            id: string;
            messagesCount: number;
            messages: Array<{ message: any }>;
          }
        | undefined;
      contributionPolicy: {
        allowedContributionTypes: Array<SchemaTypes.CalloutContributionType>;
        id: string;
        state: SchemaTypes.CalloutState;
      };
      contributions: Array<{
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        createdBy?: { email: string } | undefined;
        link?:
          | {
              id: string;
              uri: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
            }
          | undefined;
        post?:
          | {
              id: string;
              nameID: string;
              type: string;
              createdDate: Date;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                visual?:
                  | {
                      __typename: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              comments: {
                id: string;
                messagesCount: number;
                messages: Array<{
                  id: any;
                  message: any;
                  sender?: { id: string } | {} | undefined;
                }>;
              };
              createdBy?: { email: string } | undefined;
            }
          | undefined;
        whiteboard?:
          | {
              id: string;
              nameID: string;
              content: any;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                visual?:
                  | {
                      __typename: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
            }
          | undefined;
      }>;
      createdBy?: { email: string } | undefined;
      framing: {
        id: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
        };
        whiteboard?:
          | {
              nameID: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                visual?:
                  | {
                      __typename: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
            }
          | undefined;
      };
      publishedBy?: { email: string } | undefined;
    }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    innovationFlow: {
      id: string;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        storageBucket: {
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          parentEntity?:
            | { displayName: string; type: SchemaTypes.ProfileType }
            | undefined;
          documents: Array<{
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        };
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      currentState: { description: any; displayName: string };
      states: Array<{ description: any; displayName: string }>;
    };
  };
  subspaces: Array<{
    id: string;
    nameID: string;
    metrics?: Array<{ id: string; name: string; value: string }> | undefined;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      storageBucket: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        parentEntity?:
          | { displayName: string; type: SchemaTypes.ProfileType }
          | undefined;
        documents: Array<{
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
    };
    collaboration: {
      id: string;
      relations?:
        | Array<{
            id: string;
            actorName: string;
            actorRole: string;
            actorType: string;
            description: string;
            type: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      callouts: Array<{
        id: string;
        activity: number;
        nameID: string;
        publishedDate?: number | undefined;
        sortOrder: number;
        type: SchemaTypes.CalloutType;
        visibility: SchemaTypes.CalloutVisibility;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        comments?:
          | {
              id: string;
              messagesCount: number;
              messages: Array<{ message: any }>;
            }
          | undefined;
        contributionPolicy: {
          allowedContributionTypes: Array<SchemaTypes.CalloutContributionType>;
          id: string;
          state: SchemaTypes.CalloutState;
        };
        contributions: Array<{
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          createdBy?: { email: string } | undefined;
          link?:
            | {
                id: string;
                uri: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                };
              }
            | undefined;
          post?:
            | {
                id: string;
                nameID: string;
                type: string;
                createdDate: Date;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  visual?:
                    | {
                        __typename: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                comments: {
                  id: string;
                  messagesCount: number;
                  messages: Array<{
                    id: any;
                    message: any;
                    sender?: { id: string } | {} | undefined;
                  }>;
                };
                createdBy?: { email: string } | undefined;
              }
            | undefined;
          whiteboard?:
            | {
                id: string;
                nameID: string;
                content: any;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  visual?:
                    | {
                        __typename: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        }>;
        createdBy?: { email: string } | undefined;
        framing: {
          id: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
          whiteboard?:
            | {
                nameID: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  visual?:
                    | {
                        __typename: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        };
        publishedBy?: { email: string } | undefined;
      }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      innovationFlow: {
        id: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        currentState: { description: any; displayName: string };
        states: Array<{ description: any; displayName: string }>;
      };
    };
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
    community: {
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      groups: Array<{
        id: string;
        members?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile?:
          | {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            }
          | undefined;
      }>;
      applications: Array<{
        id: string;
        lifecycle: {
          id: string;
          state?: string | undefined;
          nextEvents?: Array<string> | undefined;
          stateIsFinal: boolean;
          templateName?: string | undefined;
        };
        questions: Array<{ id: string }>;
        contributor:
          | {
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }
          | {};
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      communication: {
        id: string;
        updates: {
          id: string;
          messages: Array<{
            id: any;
            message: any;
            threadID?: string | undefined;
            sender?: { id: string } | {} | undefined;
            reactions: Array<{
              id: any;
              emoji: any;
              sender?: { email: string } | undefined;
            }>;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      memberUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      leadUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      adminUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      memberOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      leadOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      adminOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
    context: {
      id: string;
      vision?: any | undefined;
      impact?: any | undefined;
      who?: any | undefined;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
  }>;
  settings: {
    privacy: {
      mode: SchemaTypes.SpacePrivacyMode;
      allowPlatformSupportAsAdmin: boolean;
    };
    membership: {
      allowSubspaceAdminsToInviteMembers: boolean;
      policy: SchemaTypes.CommunityMembershipPolicy;
      trustedOrganizations: Array<string>;
    };
    collaboration: {
      allowMembersToCreateCallouts: boolean;
      allowMembersToCreateSubspaces: boolean;
      inheritMembershipRights: boolean;
    };
  };
  profile: {
    id: string;
    displayName: string;
    description?: any | undefined;
    tagline: string;
    references?:
      | Array<{
          id: string;
          name: string;
          uri: string;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    tagsets?:
      | Array<{
          id: string;
          name: string;
          tags: Array<string>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    location?: { country: string; city: string } | undefined;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    storageBucket: {
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      parentEntity?:
        | { displayName: string; type: SchemaTypes.ProfileType }
        | undefined;
      documents: Array<{
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
  };
};

export type DefaultDataFragment = {
  id: string;
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
  innovationFlowTemplate?:
    | {
        id: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
        };
        states: Array<{ description: any; displayName: string }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }
    | undefined;
};

export type AssignLicensePlanToAccountMutationVariables = SchemaTypes.Exact<{
  planData: SchemaTypes.AssignLicensePlanToAccount;
}>;

export type AssignLicensePlanToAccountMutation = {
  assignLicensePlanToAccount: {
    id: string;
    spaceID: string;
    activeSubscription?:
      | { expires?: Date | undefined; name: SchemaTypes.LicenseCredential }
      | undefined;
    subscriptions: Array<{
      expires?: Date | undefined;
      name: SchemaTypes.LicenseCredential;
    }>;
    virtualContributors: Array<{
      account?:
        | {
            id: string;
            spaceID: string;
            host?:
              | { nameID: string; id: string }
              | { nameID: string; id: string }
              | { nameID: string; id: string }
              | undefined;
          }
        | undefined;
    }>;
    agent: { id: string };
    defaults?: { id: string } | undefined;
    host?:
      | { id: string; nameID: string }
      | { id: string; nameID: string }
      | { id: string; nameID: string }
      | undefined;
    library?: { id: string } | undefined;
    license: { id: string; visibility: SchemaTypes.SpaceVisibility };
  };
};

export type LicensePlanDataFragment = {
  id: string;
  name: string;
  enabled: boolean;
  isFree: boolean;
  licenseCredential: SchemaTypes.LicenseCredential;
  pricePerMonth?: number | undefined;
  requiresContactSupport: boolean;
  requiresPaymentMethod: boolean;
  sortOrder: number;
  trialEnabled: boolean;
};

export type LicensePolicyDataFragment = {
  id: string;
  authorization?:
    | {
        anonymousReadAccess: boolean;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
      }
    | undefined;
};

export type LicensingDataFragment = {
  id: string;
  plans: Array<{
    id: string;
    name: string;
    enabled: boolean;
    isFree: boolean;
    licenseCredential: SchemaTypes.LicenseCredential;
    pricePerMonth?: number | undefined;
    requiresContactSupport: boolean;
    requiresPaymentMethod: boolean;
    sortOrder: number;
    trialEnabled: boolean;
  }>;
  policy: {
    id: string;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  };
  authorization?:
    | {
        anonymousReadAccess: boolean;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
      }
    | undefined;
};

export type RevokeLicensePlanFromAccountMutationVariables = SchemaTypes.Exact<{
  planData: SchemaTypes.RevokeLicensePlanFromAccount;
}>;

export type RevokeLicensePlanFromAccountMutation = {
  revokeLicensePlanFromAccount: {
    id: string;
    spaceID: string;
    activeSubscription?:
      | { expires?: Date | undefined; name: SchemaTypes.LicenseCredential }
      | undefined;
    subscriptions: Array<{
      expires?: Date | undefined;
      name: SchemaTypes.LicenseCredential;
    }>;
    virtualContributors: Array<{
      account?:
        | {
            id: string;
            spaceID: string;
            host?:
              | { nameID: string; id: string }
              | { nameID: string; id: string }
              | { nameID: string; id: string }
              | undefined;
          }
        | undefined;
    }>;
    agent: { id: string };
    defaults?: { id: string } | undefined;
    host?:
      | { id: string; nameID: string }
      | { id: string; nameID: string }
      | { id: string; nameID: string }
      | undefined;
    library?: { id: string } | undefined;
    license: { id: string; visibility: SchemaTypes.SpaceVisibility };
  };
};

export type LifecycleDataFragment = {
  id: string;
  state?: string | undefined;
  nextEvents?: Array<string> | undefined;
  stateIsFinal: boolean;
  templateName?: string | undefined;
};

export type LinkDataFragment = {
  id: string;
  uri: string;
  profile: {
    id: string;
    displayName: string;
    description?: any | undefined;
    tagline: string;
    references?:
      | Array<{
          id: string;
          name: string;
          uri: string;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    tagsets?:
      | Array<{
          id: string;
          name: string;
          tags: Array<string>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    location?: { country: string; city: string } | undefined;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    storageBucket: {
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      parentEntity?:
        | { displayName: string; type: SchemaTypes.ProfileType }
        | undefined;
      documents: Array<{
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
  };
};

export type MessageDataFragment = {
  id: any;
  message: any;
  threadID?: string | undefined;
  sender?: { id: string } | {} | undefined;
  reactions: Array<{
    id: any;
    emoji: any;
    sender?: { email: string } | undefined;
  }>;
};

export type ReactionDataFragment = {
  id: any;
  emoji: any;
  sender?: { email: string } | undefined;
};

export type OrganizationDataFragment = {
  id: string;
  nameID: string;
  legalEntityName?: string | undefined;
  domain?: string | undefined;
  website?: string | undefined;
  contactEmail?: string | undefined;
  groups?:
    | Array<{
        id: string;
        members?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile?:
          | {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            }
          | undefined;
      }>
    | undefined;
  associates?:
    | Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>
    | undefined;
  profile: {
    id: string;
    displayName: string;
    description?: any | undefined;
    tagline: string;
    references?:
      | Array<{
          id: string;
          name: string;
          uri: string;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    tagsets?:
      | Array<{
          id: string;
          name: string;
          tags: Array<string>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    location?: { country: string; city: string } | undefined;
    visuals: Array<{ id: string; name: string; uri: string }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
  verification: {
    id: string;
    status: SchemaTypes.OrganizationVerificationEnum;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
    lifecycle: {
      id: string;
      state?: string | undefined;
      nextEvents?: Array<string> | undefined;
      stateIsFinal: boolean;
      templateName?: string | undefined;
    };
  };
  preferences: Array<{
    id: string;
    value: string;
    definition: {
      type: SchemaTypes.PreferenceType;
      id: string;
      displayName: string;
      description: string;
      group: string;
    };
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  }>;
  authorization?:
    | {
        anonymousReadAccess: boolean;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
      }
    | undefined;
};

export type PreferenceDataFragment = {
  id: string;
  value: string;
  definition: {
    type: SchemaTypes.PreferenceType;
    id: string;
    displayName: string;
    description: string;
    group: string;
  };
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
};

export type ProfileDataFragment = {
  id: string;
  displayName: string;
  description?: any | undefined;
  tagline: string;
  references?:
    | Array<{
        id: string;
        name: string;
        uri: string;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>
    | undefined;
  tagsets?:
    | Array<{
        id: string;
        name: string;
        tags: Array<string>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>
    | undefined;
  location?: { country: string; city: string } | undefined;
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
  storageBucket: {
    id: string;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
    parentEntity?:
      | { displayName: string; type: SchemaTypes.ProfileType }
      | undefined;
    documents: Array<{
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
  };
};

export type ProfileDataUserFragment = {
  id: string;
  displayName: string;
  description?: any | undefined;
  tagline: string;
  references?:
    | Array<{
        id: string;
        name: string;
        uri: string;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>
    | undefined;
  tagsets?:
    | Array<{
        id: string;
        name: string;
        tags: Array<string>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>
    | undefined;
  location?: { country: string; city: string } | undefined;
  visuals: Array<{ id: string; name: string; uri: string }>;
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
};

export type ProfileStorageConfigFragment = {
  id: string;
  storageBucket: {
    id: string;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
    parentEntity?:
      | { displayName: string; type: SchemaTypes.ProfileType }
      | undefined;
    documents: Array<{
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
  };
};

export type ReferenceDataFragment = { id: string; name: string; uri: string };

export type RelationDataFragment = {
  id: string;
  actorName: string;
  actorRole: string;
  actorType: string;
  description: string;
  type: string;
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
};

export type SettingsDataFragment = {
  privacy: {
    mode: SchemaTypes.SpacePrivacyMode;
    allowPlatformSupportAsAdmin: boolean;
  };
  membership: {
    allowSubspaceAdminsToInviteMembers: boolean;
    policy: SchemaTypes.CommunityMembershipPolicy;
    trustedOrganizations: Array<string>;
  };
  collaboration: {
    allowMembersToCreateCallouts: boolean;
    allowMembersToCreateSubspaces: boolean;
    inheritMembershipRights: boolean;
  };
};

export type TagsetDataFragment = {
  id: string;
  name: string;
  tags: Array<string>;
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
};

export type InnovationFlowTemplateDataFragment = {
  id: string;
  profile: {
    id: string;
    displayName: string;
    description?: any | undefined;
    tagline: string;
    references?:
      | Array<{
          id: string;
          name: string;
          uri: string;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    tagsets?:
      | Array<{
          id: string;
          name: string;
          tags: Array<string>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    location?: { country: string; city: string } | undefined;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    storageBucket: {
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      parentEntity?:
        | { displayName: string; type: SchemaTypes.ProfileType }
        | undefined;
      documents: Array<{
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
  };
  states: Array<{ description: any; displayName: string }>;
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
};

export type PostTemplateDataFragment = {
  id: string;
  defaultDescription: any;
  type: string;
  profile: {
    id: string;
    displayName: string;
    description?: any | undefined;
    tagline: string;
    references?:
      | Array<{
          id: string;
          name: string;
          uri: string;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    tagsets?:
      | Array<{
          id: string;
          name: string;
          tags: Array<string>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    location?: { country: string; city: string } | undefined;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    storageBucket: {
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      parentEntity?:
        | { displayName: string; type: SchemaTypes.ProfileType }
        | undefined;
      documents: Array<{
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
  };
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
};

export type TemplatesSetDataFragment = {
  id: string;
  innovationFlowTemplates: Array<{
    id: string;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      storageBucket: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        parentEntity?:
          | { displayName: string; type: SchemaTypes.ProfileType }
          | undefined;
        documents: Array<{
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
    };
    states: Array<{ description: any; displayName: string }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  }>;
  postTemplates: Array<{
    id: string;
    defaultDescription: any;
    type: string;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      storageBucket: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        parentEntity?:
          | { displayName: string; type: SchemaTypes.ProfileType }
          | undefined;
        documents: Array<{
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
    };
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  }>;
  whiteboardTemplates: Array<{
    id: string;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  }>;
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
};

export type UserDataFragment = {
  id: string;
  nameID: string;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  accountUpn: string;
  agent: {
    credentials?:
      | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
      | undefined;
  };
  profile: {
    id: string;
    displayName: string;
    description?: any | undefined;
    tagline: string;
    references?:
      | Array<{
          id: string;
          name: string;
          uri: string;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    tagsets?:
      | Array<{
          id: string;
          name: string;
          tags: Array<string>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    location?: { country: string; city: string } | undefined;
    visuals: Array<{ id: string; name: string; uri: string }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
  preferences: Array<{
    id: string;
    value: string;
    definition: {
      type: SchemaTypes.PreferenceType;
      id: string;
      displayName: string;
      description: string;
      group: string;
    };
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  }>;
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
};

export type VisualUriFragment = {
  id: string;
  uri: string;
  name: string;
  authorization?:
    | {
        anonymousReadAccess: boolean;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
      }
    | undefined;
};

export type CreateAccountMutationVariables = SchemaTypes.Exact<{
  accountData: SchemaTypes.CreateAccountInput;
}>;

export type CreateAccountMutation = {
  createAccount: { id: string; spaceID: string };
};

export type AssignOrganizationRoleToUserMutationVariables = SchemaTypes.Exact<{
  membershipData: SchemaTypes.AssignOrganizationRoleToUserInput;
}>;

export type AssignOrganizationRoleToUserMutation = {
  assignOrganizationRoleToUser: {
    id: string;
    email: string;
    agent: {
      credentials?:
        | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
        | undefined;
    };
  };
};

export type AssignPlatformRoleToUserMutationVariables = SchemaTypes.Exact<{
  input: SchemaTypes.AssignPlatformRoleToUserInput;
}>;

export type AssignPlatformRoleToUserMutation = {
  assignPlatformRoleToUser: { id: string; email: string };
};

export type RemoveOrganizationRoleFromUserMutationVariables = SchemaTypes.Exact<{
  membershipData: SchemaTypes.RemoveOrganizationRoleFromUserInput;
}>;

export type RemoveOrganizationRoleFromUserMutation = {
  removeOrganizationRoleFromUser: {
    id: string;
    email: string;
    agent: {
      credentials?:
        | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
        | undefined;
    };
  };
};

export type RemovePlatformRoleFromUserMutationVariables = SchemaTypes.Exact<{
  input: SchemaTypes.RemovePlatformRoleFromUserInput;
}>;

export type RemovePlatformRoleFromUserMutation = {
  removePlatformRoleFromUser: { id: string; email: string };
};

export type CreateCalloutOnCollaborationMutationVariables = SchemaTypes.Exact<{
  calloutData: SchemaTypes.CreateCalloutOnCollaborationInput;
}>;

export type CreateCalloutOnCollaborationMutation = {
  createCalloutOnCollaboration: {
    id: string;
    activity: number;
    nameID: string;
    publishedDate?: number | undefined;
    sortOrder: number;
    type: SchemaTypes.CalloutType;
    visibility: SchemaTypes.CalloutVisibility;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    comments?:
      | { id: string; messagesCount: number; messages: Array<{ message: any }> }
      | undefined;
    contributionPolicy: {
      allowedContributionTypes: Array<SchemaTypes.CalloutContributionType>;
      id: string;
      state: SchemaTypes.CalloutState;
    };
    contributions: Array<{
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      createdBy?: { email: string } | undefined;
      link?:
        | {
            id: string;
            uri: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
          }
        | undefined;
      post?:
        | {
            id: string;
            nameID: string;
            type: string;
            createdDate: Date;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              visual?:
                | {
                    __typename: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            comments: {
              id: string;
              messagesCount: number;
              messages: Array<{
                id: any;
                message: any;
                sender?: { id: string } | {} | undefined;
              }>;
            };
            createdBy?: { email: string } | undefined;
          }
        | undefined;
      whiteboard?:
        | {
            id: string;
            nameID: string;
            content: any;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              visual?:
                | {
                    __typename: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
          }
        | undefined;
    }>;
    createdBy?: { email: string } | undefined;
    framing: {
      id: string;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        storageBucket: {
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          parentEntity?:
            | { displayName: string; type: SchemaTypes.ProfileType }
            | undefined;
          documents: Array<{
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        };
      };
      whiteboard?:
        | {
            nameID: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              visual?:
                | {
                    __typename: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
          }
        | undefined;
    };
    publishedBy?: { email: string } | undefined;
  };
};

export type DeleteCalloutMutationVariables = SchemaTypes.Exact<{
  calloutId: SchemaTypes.Scalars['UUID'];
}>;

export type DeleteCalloutMutation = { deleteCallout: { id: string } };

export type DeletePostMutationVariables = SchemaTypes.Exact<{
  deleteData: SchemaTypes.DeletePostInput;
}>;

export type DeletePostMutation = { deletePost: { id: string } };

export type DeleteWhiteboardMutationVariables = SchemaTypes.Exact<{
  input: SchemaTypes.DeleteWhiteboardInput;
}>;

export type DeleteWhiteboardMutation = { deleteWhiteboard: { id: string } };

export type UpdateCalloutMutationVariables = SchemaTypes.Exact<{
  calloutData: SchemaTypes.UpdateCalloutInput;
}>;

export type UpdateCalloutMutation = {
  updateCallout: {
    id: string;
    activity: number;
    nameID: string;
    publishedDate?: number | undefined;
    sortOrder: number;
    type: SchemaTypes.CalloutType;
    visibility: SchemaTypes.CalloutVisibility;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    comments?:
      | { id: string; messagesCount: number; messages: Array<{ message: any }> }
      | undefined;
    contributionPolicy: {
      allowedContributionTypes: Array<SchemaTypes.CalloutContributionType>;
      id: string;
      state: SchemaTypes.CalloutState;
    };
    contributions: Array<{
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      createdBy?: { email: string } | undefined;
      link?:
        | {
            id: string;
            uri: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
          }
        | undefined;
      post?:
        | {
            id: string;
            nameID: string;
            type: string;
            createdDate: Date;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              visual?:
                | {
                    __typename: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            comments: {
              id: string;
              messagesCount: number;
              messages: Array<{
                id: any;
                message: any;
                sender?: { id: string } | {} | undefined;
              }>;
            };
            createdBy?: { email: string } | undefined;
          }
        | undefined;
      whiteboard?:
        | {
            id: string;
            nameID: string;
            content: any;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              visual?:
                | {
                    __typename: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
          }
        | undefined;
    }>;
    createdBy?: { email: string } | undefined;
    framing: {
      id: string;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        storageBucket: {
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          parentEntity?:
            | { displayName: string; type: SchemaTypes.ProfileType }
            | undefined;
          documents: Array<{
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        };
      };
      whiteboard?:
        | {
            nameID: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              visual?:
                | {
                    __typename: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
          }
        | undefined;
    };
    publishedBy?: { email: string } | undefined;
  };
};

export type UpdateCalloutVisibilityMutationVariables = SchemaTypes.Exact<{
  calloutData: SchemaTypes.UpdateCalloutVisibilityInput;
}>;

export type UpdateCalloutVisibilityMutation = {
  updateCalloutVisibility: {
    id: string;
    activity: number;
    nameID: string;
    publishedDate?: number | undefined;
    sortOrder: number;
    type: SchemaTypes.CalloutType;
    visibility: SchemaTypes.CalloutVisibility;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    comments?:
      | { id: string; messagesCount: number; messages: Array<{ message: any }> }
      | undefined;
    contributionPolicy: {
      allowedContributionTypes: Array<SchemaTypes.CalloutContributionType>;
      id: string;
      state: SchemaTypes.CalloutState;
    };
    contributions: Array<{
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      createdBy?: { email: string } | undefined;
      link?:
        | {
            id: string;
            uri: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
          }
        | undefined;
      post?:
        | {
            id: string;
            nameID: string;
            type: string;
            createdDate: Date;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              visual?:
                | {
                    __typename: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            comments: {
              id: string;
              messagesCount: number;
              messages: Array<{
                id: any;
                message: any;
                sender?: { id: string } | {} | undefined;
              }>;
            };
            createdBy?: { email: string } | undefined;
          }
        | undefined;
      whiteboard?:
        | {
            id: string;
            nameID: string;
            content: any;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              visual?:
                | {
                    __typename: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
          }
        | undefined;
    }>;
    createdBy?: { email: string } | undefined;
    framing: {
      id: string;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        storageBucket: {
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          parentEntity?:
            | { displayName: string; type: SchemaTypes.ProfileType }
            | undefined;
          documents: Array<{
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        };
      };
      whiteboard?:
        | {
            nameID: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              visual?:
                | {
                    __typename: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
          }
        | undefined;
    };
    publishedBy?: { email: string } | undefined;
  };
};

export type CreateContributionOnCalloutMutationVariables = SchemaTypes.Exact<{
  contributionData: SchemaTypes.CreateContributionOnCalloutInput;
}>;

export type CreateContributionOnCalloutMutation = {
  createContributionOnCallout: {
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    createdBy?: { email: string } | undefined;
    link?:
      | {
          id: string;
          uri: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
        }
      | undefined;
    post?:
      | {
          id: string;
          nameID: string;
          type: string;
          createdDate: Date;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            visual?:
              | {
                  __typename: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          comments: {
            id: string;
            messagesCount: number;
            messages: Array<{
              id: any;
              message: any;
              sender?: { id: string } | {} | undefined;
            }>;
          };
          createdBy?: { email: string } | undefined;
        }
      | undefined;
    whiteboard?:
      | {
          id: string;
          nameID: string;
          content: any;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            visual?:
              | {
                  __typename: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
        }
      | undefined;
  };
};

export type CreatePostTemplateMutationVariables = SchemaTypes.Exact<{
  postTemplateInput: SchemaTypes.CreatePostTemplateOnTemplatesSetInput;
}>;

export type CreatePostTemplateMutation = {
  createPostTemplate: {
    id: string;
    defaultDescription: any;
    type: string;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      storageBucket: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        parentEntity?:
          | { displayName: string; type: SchemaTypes.ProfileType }
          | undefined;
        documents: Array<{
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
    };
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type CreateWhiteboardTemplateMutationVariables = SchemaTypes.Exact<{
  whiteboardTemplateInput: SchemaTypes.CreateWhiteboardTemplateOnTemplatesSetInput;
}>;

export type CreateWhiteboardTemplateMutation = {
  createWhiteboardTemplate: {
    profile: { id: string; displayName: string; description?: any | undefined };
  };
};

export type DeletePostTemplateMutationVariables = SchemaTypes.Exact<{
  deleteData: SchemaTypes.DeletePostTemplateInput;
}>;

export type DeletePostTemplateMutation = {
  deletePostTemplate: { type: string };
};

export type UpdatePostTemplateMutationVariables = SchemaTypes.Exact<{
  postTemplateInput: SchemaTypes.UpdatePostTemplateInput;
}>;

export type UpdatePostTemplateMutation = {
  updatePostTemplate: {
    id: string;
    defaultDescription: any;
    type: string;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      storageBucket: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        parentEntity?:
          | { displayName: string; type: SchemaTypes.ProfileType }
          | undefined;
        documents: Array<{
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
    };
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type AddReactionToMessageInRoomMutationVariables = SchemaTypes.Exact<{
  reactionData: SchemaTypes.RoomAddReactionToMessageInput;
}>;

export type AddReactionToMessageInRoomMutation = {
  addReactionToMessageInRoom: {
    id: any;
    emoji: any;
    sender?: { email: string } | undefined;
  };
};

export type CreateDiscussionMutationVariables = SchemaTypes.Exact<{
  createData: SchemaTypes.ForumCreateDiscussionInput;
}>;

export type CreateDiscussionMutation = {
  createDiscussion: {
    id: string;
    category: SchemaTypes.ForumDiscussionCategory;
    createdBy?: string | undefined;
    profile: { displayName: string; description?: any | undefined };
    comments: {
      id: string;
      messagesCount: number;
      messages: Array<{
        id: any;
        message: any;
        threadID?: string | undefined;
        sender?: { id: string } | {} | undefined;
        reactions: Array<{
          id: any;
          emoji: any;
          sender?: { email: string } | undefined;
        }>;
      }>;
    };
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type DeleteDiscussionMutationVariables = SchemaTypes.Exact<{
  deleteData: SchemaTypes.DeleteDiscussionInput;
}>;

export type DeleteDiscussionMutation = { deleteDiscussion: { id: string } };

export type RemoveMessageOnRoomMutationVariables = SchemaTypes.Exact<{
  messageData: SchemaTypes.RoomRemoveMessageInput;
}>;

export type RemoveMessageOnRoomMutation = { removeMessageOnRoom: any };

export type RemoveReactionToMessageInRoomMutationVariables = SchemaTypes.Exact<{
  reactionData: SchemaTypes.RoomRemoveReactionToMessageInput;
}>;

export type RemoveReactionToMessageInRoomMutation = {
  removeReactionToMessageInRoom: boolean;
};

export type SendMessageReplyToRoomMutationVariables = SchemaTypes.Exact<{
  messageData: SchemaTypes.RoomSendMessageReplyInput;
}>;

export type SendMessageReplyToRoomMutation = {
  sendMessageReplyToRoom: {
    id: any;
    message: any;
    threadID?: string | undefined;
    sender?: { id: string } | {} | undefined;
    reactions: Array<{
      id: any;
      emoji: any;
      sender?: { email: string } | undefined;
    }>;
  };
};

export type SendMessageToCommunityLeadsMutationVariables = SchemaTypes.Exact<{
  messageData: SchemaTypes.CommunicationSendMessageToCommunityLeadsInput;
}>;

export type SendMessageToCommunityLeadsMutation = {
  sendMessageToCommunityLeads: boolean;
};

export type SendMessageToOrganizationMutationVariables = SchemaTypes.Exact<{
  messageData: SchemaTypes.CommunicationSendMessageToOrganizationInput;
}>;

export type SendMessageToOrganizationMutation = {
  sendMessageToOrganization: boolean;
};

export type SendMessageToRoomMutationVariables = SchemaTypes.Exact<{
  messageData: SchemaTypes.RoomSendMessageInput;
}>;

export type SendMessageToRoomMutation = {
  sendMessageToRoom: {
    id: any;
    message: any;
    threadID?: string | undefined;
    sender?: { id: string } | {} | undefined;
    reactions: Array<{
      id: any;
      emoji: any;
      sender?: { email: string } | undefined;
    }>;
  };
};

export type SendMessageToUserMutationVariables = SchemaTypes.Exact<{
  messageData: SchemaTypes.CommunicationSendMessageToUserInput;
}>;

export type SendMessageToUserMutation = { sendMessageToUser: boolean };

export type UpdateDiscussionMutationVariables = SchemaTypes.Exact<{
  updateData: SchemaTypes.UpdateDiscussionInput;
}>;

export type UpdateDiscussionMutation = {
  updateDiscussion: {
    id: string;
    category: SchemaTypes.ForumDiscussionCategory;
    createdBy?: string | undefined;
    profile: { displayName: string; description?: any | undefined };
    comments: {
      id: string;
      messagesCount: number;
      messages: Array<{
        id: any;
        message: any;
        threadID?: string | undefined;
        sender?: { id: string } | {} | undefined;
        reactions: Array<{
          id: any;
          emoji: any;
          sender?: { email: string } | undefined;
        }>;
      }>;
    };
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type AssignCommunityRoleToUserMutationVariables = SchemaTypes.Exact<{
  roleData: SchemaTypes.AssignCommunityRoleToUserInput;
}>;

export type AssignCommunityRoleToUserMutation = {
  assignCommunityRoleToUser: {
    id: string;
    nameID: string;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    accountUpn: string;
    agent: {
      credentials?:
        | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
        | undefined;
    };
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type RemoveCommunityRoleFromUserMutationVariables = SchemaTypes.Exact<{
  roleData: SchemaTypes.RemoveCommunityRoleFromUserInput;
}>;

export type RemoveCommunityRoleFromUserMutation = {
  removeCommunityRoleFromUser: {
    id: string;
    nameID: string;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    accountUpn: string;
    agent: {
      credentials?:
        | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
        | undefined;
    };
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type JoinCommunityMutationVariables = SchemaTypes.Exact<{
  joinCommunityData: SchemaTypes.CommunityJoinInput;
}>;

export type JoinCommunityMutation = { joinCommunity: { id: string } };

export type UpdatePostMutationVariables = SchemaTypes.Exact<{
  postData: SchemaTypes.UpdatePostInput;
}>;

export type UpdatePostMutation = {
  updatePost: {
    id: string;
    nameID: string;
    type: string;
    createdDate: Date;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      visual?:
        | {
            __typename: 'Visual';
            id: string;
            uri: string;
            name: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | undefined;
      storageBucket: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        parentEntity?:
          | { displayName: string; type: SchemaTypes.ProfileType }
          | undefined;
        documents: Array<{
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    comments: {
      id: string;
      messagesCount: number;
      messages: Array<{
        id: any;
        message: any;
        sender?: { id: string } | {} | undefined;
      }>;
    };
    createdBy?: { email: string } | undefined;
  };
};

export type ConvertChallengeToSpaceMutationVariables = SchemaTypes.Exact<{
  convertData: SchemaTypes.ConvertSubspaceToSpaceInput;
}>;

export type ConvertChallengeToSpaceMutation = {
  convertChallengeToSpace: {
    id: string;
    nameID: string;
    metrics?: Array<{ id: string; name: string; value: string }> | undefined;
    account: {
      id: string;
      spaceID: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      host?:
        | {
            id: string;
            nameID: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | {
            id: string;
            nameID: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | {
            id: string;
            nameID: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | undefined;
      license: {
        visibility: SchemaTypes.SpaceVisibility;
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      library?:
        | {
            id: string;
            innovationFlowTemplates: Array<{
              id: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
              states: Array<{ description: any; displayName: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            postTemplates: Array<{
              id: string;
              defaultDescription: any;
              type: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            whiteboardTemplates: Array<{
              id: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | undefined;
      defaults?:
        | {
            id: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            innovationFlowTemplate?:
              | {
                  id: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  };
                  states: Array<{ description: any; displayName: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }
              | undefined;
          }
        | undefined;
    };
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
    context: {
      id: string;
      vision?: any | undefined;
      impact?: any | undefined;
      who?: any | undefined;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    community: {
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      groups: Array<{
        id: string;
        members?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile?:
          | {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            }
          | undefined;
      }>;
      applications: Array<{
        id: string;
        lifecycle: {
          id: string;
          state?: string | undefined;
          nextEvents?: Array<string> | undefined;
          stateIsFinal: boolean;
          templateName?: string | undefined;
        };
        questions: Array<{ id: string }>;
        contributor:
          | {
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }
          | {};
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      communication: {
        id: string;
        updates: {
          id: string;
          messages: Array<{
            id: any;
            message: any;
            threadID?: string | undefined;
            sender?: { id: string } | {} | undefined;
            reactions: Array<{
              id: any;
              emoji: any;
              sender?: { email: string } | undefined;
            }>;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      memberUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      leadUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      adminUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      memberOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      leadOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      adminOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
    collaboration: {
      id: string;
      relations?:
        | Array<{
            id: string;
            actorName: string;
            actorRole: string;
            actorType: string;
            description: string;
            type: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      callouts: Array<{
        id: string;
        activity: number;
        nameID: string;
        publishedDate?: number | undefined;
        sortOrder: number;
        type: SchemaTypes.CalloutType;
        visibility: SchemaTypes.CalloutVisibility;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        comments?:
          | {
              id: string;
              messagesCount: number;
              messages: Array<{ message: any }>;
            }
          | undefined;
        contributionPolicy: {
          allowedContributionTypes: Array<SchemaTypes.CalloutContributionType>;
          id: string;
          state: SchemaTypes.CalloutState;
        };
        contributions: Array<{
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          createdBy?: { email: string } | undefined;
          link?:
            | {
                id: string;
                uri: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                };
              }
            | undefined;
          post?:
            | {
                id: string;
                nameID: string;
                type: string;
                createdDate: Date;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  visual?:
                    | {
                        __typename: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                comments: {
                  id: string;
                  messagesCount: number;
                  messages: Array<{
                    id: any;
                    message: any;
                    sender?: { id: string } | {} | undefined;
                  }>;
                };
                createdBy?: { email: string } | undefined;
              }
            | undefined;
          whiteboard?:
            | {
                id: string;
                nameID: string;
                content: any;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  visual?:
                    | {
                        __typename: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        }>;
        createdBy?: { email: string } | undefined;
        framing: {
          id: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
          whiteboard?:
            | {
                nameID: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  visual?:
                    | {
                        __typename: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        };
        publishedBy?: { email: string } | undefined;
      }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      innovationFlow: {
        id: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        currentState: { description: any; displayName: string };
        states: Array<{ description: any; displayName: string }>;
      };
    };
    subspaces: Array<{
      id: string;
      nameID: string;
      metrics?: Array<{ id: string; name: string; value: string }> | undefined;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        storageBucket: {
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          parentEntity?:
            | { displayName: string; type: SchemaTypes.ProfileType }
            | undefined;
          documents: Array<{
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        };
      };
      collaboration: {
        id: string;
        relations?:
          | Array<{
              id: string;
              actorName: string;
              actorRole: string;
              actorType: string;
              description: string;
              type: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        callouts: Array<{
          id: string;
          activity: number;
          nameID: string;
          publishedDate?: number | undefined;
          sortOrder: number;
          type: SchemaTypes.CalloutType;
          visibility: SchemaTypes.CalloutVisibility;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          comments?:
            | {
                id: string;
                messagesCount: number;
                messages: Array<{ message: any }>;
              }
            | undefined;
          contributionPolicy: {
            allowedContributionTypes: Array<
              SchemaTypes.CalloutContributionType
            >;
            id: string;
            state: SchemaTypes.CalloutState;
          };
          contributions: Array<{
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            createdBy?: { email: string } | undefined;
            link?:
              | {
                  id: string;
                  uri: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  };
                }
              | undefined;
            post?:
              | {
                  id: string;
                  nameID: string;
                  type: string;
                  createdDate: Date;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  comments: {
                    id: string;
                    messagesCount: number;
                    messages: Array<{
                      id: any;
                      message: any;
                      sender?: { id: string } | {} | undefined;
                    }>;
                  };
                  createdBy?: { email: string } | undefined;
                }
              | undefined;
            whiteboard?:
              | {
                  id: string;
                  nameID: string;
                  content: any;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          }>;
          createdBy?: { email: string } | undefined;
          framing: {
            id: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            whiteboard?:
              | {
                  nameID: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          };
          publishedBy?: { email: string } | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        innovationFlow: {
          id: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          currentState: { description: any; displayName: string };
          states: Array<{ description: any; displayName: string }>;
        };
      };
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      community: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        groups: Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>;
        applications: Array<{
          id: string;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
          questions: Array<{ id: string }>;
          contributor:
            | {
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }
            | {};
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        communication: {
          id: string;
          updates: {
            id: string;
            messages: Array<{
              id: any;
              message: any;
              threadID?: string | undefined;
              sender?: { id: string } | {} | undefined;
              reactions: Array<{
                id: any;
                emoji: any;
                sender?: { email: string } | undefined;
              }>;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        memberUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        leadUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        adminUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        memberOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        leadOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        adminOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
      context: {
        id: string;
        vision?: any | undefined;
        impact?: any | undefined;
        who?: any | undefined;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
    }>;
    settings: {
      privacy: {
        mode: SchemaTypes.SpacePrivacyMode;
        allowPlatformSupportAsAdmin: boolean;
      };
      membership: {
        allowSubspaceAdminsToInviteMembers: boolean;
        policy: SchemaTypes.CommunityMembershipPolicy;
        trustedOrganizations: Array<string>;
      };
      collaboration: {
        allowMembersToCreateCallouts: boolean;
        allowMembersToCreateSubspaces: boolean;
        inheritMembershipRights: boolean;
      };
    };
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      storageBucket: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        parentEntity?:
          | { displayName: string; type: SchemaTypes.ProfileType }
          | undefined;
        documents: Array<{
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
    };
  };
};

export type DeleteDocumentMutationVariables = SchemaTypes.Exact<{
  deleteData: SchemaTypes.DeleteDocumentInput;
}>;

export type DeleteDocumentMutation = { deleteDocument: { id: string } };

export type CreateSubspaceMutationVariables = SchemaTypes.Exact<{
  subspaceData: SchemaTypes.CreateSubspaceInput;
}>;

export type CreateSubspaceMutation = {
  createSubspace: {
    id: string;
    nameID: string;
    metrics?: Array<{ id: string; name: string; value: string }> | undefined;
    account: {
      id: string;
      spaceID: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      host?:
        | {
            id: string;
            nameID: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | {
            id: string;
            nameID: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | {
            id: string;
            nameID: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | undefined;
      license: {
        visibility: SchemaTypes.SpaceVisibility;
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      library?:
        | {
            id: string;
            innovationFlowTemplates: Array<{
              id: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
              states: Array<{ description: any; displayName: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            postTemplates: Array<{
              id: string;
              defaultDescription: any;
              type: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            whiteboardTemplates: Array<{
              id: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | undefined;
      defaults?:
        | {
            id: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            innovationFlowTemplate?:
              | {
                  id: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  };
                  states: Array<{ description: any; displayName: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }
              | undefined;
          }
        | undefined;
    };
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
    context: {
      id: string;
      vision?: any | undefined;
      impact?: any | undefined;
      who?: any | undefined;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    community: {
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      groups: Array<{
        id: string;
        members?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile?:
          | {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            }
          | undefined;
      }>;
      applications: Array<{
        id: string;
        lifecycle: {
          id: string;
          state?: string | undefined;
          nextEvents?: Array<string> | undefined;
          stateIsFinal: boolean;
          templateName?: string | undefined;
        };
        questions: Array<{ id: string }>;
        contributor:
          | {
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }
          | {};
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      communication: {
        id: string;
        updates: {
          id: string;
          messages: Array<{
            id: any;
            message: any;
            threadID?: string | undefined;
            sender?: { id: string } | {} | undefined;
            reactions: Array<{
              id: any;
              emoji: any;
              sender?: { email: string } | undefined;
            }>;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      memberUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      leadUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      adminUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      memberOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      leadOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      adminOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
    collaboration: {
      id: string;
      relations?:
        | Array<{
            id: string;
            actorName: string;
            actorRole: string;
            actorType: string;
            description: string;
            type: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      callouts: Array<{
        id: string;
        activity: number;
        nameID: string;
        publishedDate?: number | undefined;
        sortOrder: number;
        type: SchemaTypes.CalloutType;
        visibility: SchemaTypes.CalloutVisibility;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        comments?:
          | {
              id: string;
              messagesCount: number;
              messages: Array<{ message: any }>;
            }
          | undefined;
        contributionPolicy: {
          allowedContributionTypes: Array<SchemaTypes.CalloutContributionType>;
          id: string;
          state: SchemaTypes.CalloutState;
        };
        contributions: Array<{
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          createdBy?: { email: string } | undefined;
          link?:
            | {
                id: string;
                uri: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                };
              }
            | undefined;
          post?:
            | {
                id: string;
                nameID: string;
                type: string;
                createdDate: Date;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  visual?:
                    | {
                        __typename: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                comments: {
                  id: string;
                  messagesCount: number;
                  messages: Array<{
                    id: any;
                    message: any;
                    sender?: { id: string } | {} | undefined;
                  }>;
                };
                createdBy?: { email: string } | undefined;
              }
            | undefined;
          whiteboard?:
            | {
                id: string;
                nameID: string;
                content: any;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  visual?:
                    | {
                        __typename: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        }>;
        createdBy?: { email: string } | undefined;
        framing: {
          id: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
          whiteboard?:
            | {
                nameID: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  visual?:
                    | {
                        __typename: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        };
        publishedBy?: { email: string } | undefined;
      }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      innovationFlow: {
        id: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        currentState: { description: any; displayName: string };
        states: Array<{ description: any; displayName: string }>;
      };
    };
    subspaces: Array<{
      id: string;
      nameID: string;
      metrics?: Array<{ id: string; name: string; value: string }> | undefined;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        storageBucket: {
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          parentEntity?:
            | { displayName: string; type: SchemaTypes.ProfileType }
            | undefined;
          documents: Array<{
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        };
      };
      collaboration: {
        id: string;
        relations?:
          | Array<{
              id: string;
              actorName: string;
              actorRole: string;
              actorType: string;
              description: string;
              type: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        callouts: Array<{
          id: string;
          activity: number;
          nameID: string;
          publishedDate?: number | undefined;
          sortOrder: number;
          type: SchemaTypes.CalloutType;
          visibility: SchemaTypes.CalloutVisibility;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          comments?:
            | {
                id: string;
                messagesCount: number;
                messages: Array<{ message: any }>;
              }
            | undefined;
          contributionPolicy: {
            allowedContributionTypes: Array<
              SchemaTypes.CalloutContributionType
            >;
            id: string;
            state: SchemaTypes.CalloutState;
          };
          contributions: Array<{
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            createdBy?: { email: string } | undefined;
            link?:
              | {
                  id: string;
                  uri: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  };
                }
              | undefined;
            post?:
              | {
                  id: string;
                  nameID: string;
                  type: string;
                  createdDate: Date;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  comments: {
                    id: string;
                    messagesCount: number;
                    messages: Array<{
                      id: any;
                      message: any;
                      sender?: { id: string } | {} | undefined;
                    }>;
                  };
                  createdBy?: { email: string } | undefined;
                }
              | undefined;
            whiteboard?:
              | {
                  id: string;
                  nameID: string;
                  content: any;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          }>;
          createdBy?: { email: string } | undefined;
          framing: {
            id: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            whiteboard?:
              | {
                  nameID: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          };
          publishedBy?: { email: string } | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        innovationFlow: {
          id: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          currentState: { description: any; displayName: string };
          states: Array<{ description: any; displayName: string }>;
        };
      };
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      community: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        groups: Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>;
        applications: Array<{
          id: string;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
          questions: Array<{ id: string }>;
          contributor:
            | {
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }
            | {};
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        communication: {
          id: string;
          updates: {
            id: string;
            messages: Array<{
              id: any;
              message: any;
              threadID?: string | undefined;
              sender?: { id: string } | {} | undefined;
              reactions: Array<{
                id: any;
                emoji: any;
                sender?: { email: string } | undefined;
              }>;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        memberUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        leadUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        adminUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        memberOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        leadOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        adminOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
      context: {
        id: string;
        vision?: any | undefined;
        impact?: any | undefined;
        who?: any | undefined;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
    }>;
    settings: {
      privacy: {
        mode: SchemaTypes.SpacePrivacyMode;
        allowPlatformSupportAsAdmin: boolean;
      };
      membership: {
        allowSubspaceAdminsToInviteMembers: boolean;
        policy: SchemaTypes.CommunityMembershipPolicy;
        trustedOrganizations: Array<string>;
      };
      collaboration: {
        allowMembersToCreateCallouts: boolean;
        allowMembersToCreateSubspaces: boolean;
        inheritMembershipRights: boolean;
      };
    };
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      storageBucket: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        parentEntity?:
          | { displayName: string; type: SchemaTypes.ProfileType }
          | undefined;
        documents: Array<{
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
    };
  };
};

export type DeleteSpaceMutationVariables = SchemaTypes.Exact<{
  deleteData: SchemaTypes.DeleteSpaceInput;
}>;

export type DeleteSpaceMutation = { deleteSpace: { id: string } };

export type UpdateSpaceMutationVariables = SchemaTypes.Exact<{
  spaceData: SchemaTypes.UpdateSpaceInput;
}>;

export type UpdateSpaceMutation = {
  updateSpace: {
    id: string;
    nameID: string;
    metrics?: Array<{ id: string; name: string; value: string }> | undefined;
    account: {
      id: string;
      spaceID: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      host?:
        | {
            id: string;
            nameID: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | {
            id: string;
            nameID: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | {
            id: string;
            nameID: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | undefined;
      license: {
        visibility: SchemaTypes.SpaceVisibility;
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      library?:
        | {
            id: string;
            innovationFlowTemplates: Array<{
              id: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
              states: Array<{ description: any; displayName: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            postTemplates: Array<{
              id: string;
              defaultDescription: any;
              type: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            whiteboardTemplates: Array<{
              id: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | undefined;
      defaults?:
        | {
            id: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            innovationFlowTemplate?:
              | {
                  id: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  };
                  states: Array<{ description: any; displayName: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }
              | undefined;
          }
        | undefined;
    };
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
    context: {
      id: string;
      vision?: any | undefined;
      impact?: any | undefined;
      who?: any | undefined;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    community: {
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      groups: Array<{
        id: string;
        members?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile?:
          | {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            }
          | undefined;
      }>;
      applications: Array<{
        id: string;
        lifecycle: {
          id: string;
          state?: string | undefined;
          nextEvents?: Array<string> | undefined;
          stateIsFinal: boolean;
          templateName?: string | undefined;
        };
        questions: Array<{ id: string }>;
        contributor:
          | {
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }
          | {};
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      communication: {
        id: string;
        updates: {
          id: string;
          messages: Array<{
            id: any;
            message: any;
            threadID?: string | undefined;
            sender?: { id: string } | {} | undefined;
            reactions: Array<{
              id: any;
              emoji: any;
              sender?: { email: string } | undefined;
            }>;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      memberUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      leadUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      adminUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      memberOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      leadOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      adminOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
    collaboration: {
      id: string;
      relations?:
        | Array<{
            id: string;
            actorName: string;
            actorRole: string;
            actorType: string;
            description: string;
            type: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      callouts: Array<{
        id: string;
        activity: number;
        nameID: string;
        publishedDate?: number | undefined;
        sortOrder: number;
        type: SchemaTypes.CalloutType;
        visibility: SchemaTypes.CalloutVisibility;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        comments?:
          | {
              id: string;
              messagesCount: number;
              messages: Array<{ message: any }>;
            }
          | undefined;
        contributionPolicy: {
          allowedContributionTypes: Array<SchemaTypes.CalloutContributionType>;
          id: string;
          state: SchemaTypes.CalloutState;
        };
        contributions: Array<{
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          createdBy?: { email: string } | undefined;
          link?:
            | {
                id: string;
                uri: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                };
              }
            | undefined;
          post?:
            | {
                id: string;
                nameID: string;
                type: string;
                createdDate: Date;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  visual?:
                    | {
                        __typename: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                comments: {
                  id: string;
                  messagesCount: number;
                  messages: Array<{
                    id: any;
                    message: any;
                    sender?: { id: string } | {} | undefined;
                  }>;
                };
                createdBy?: { email: string } | undefined;
              }
            | undefined;
          whiteboard?:
            | {
                id: string;
                nameID: string;
                content: any;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  visual?:
                    | {
                        __typename: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        }>;
        createdBy?: { email: string } | undefined;
        framing: {
          id: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
          whiteboard?:
            | {
                nameID: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  visual?:
                    | {
                        __typename: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        };
        publishedBy?: { email: string } | undefined;
      }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      innovationFlow: {
        id: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        currentState: { description: any; displayName: string };
        states: Array<{ description: any; displayName: string }>;
      };
    };
    subspaces: Array<{
      id: string;
      nameID: string;
      metrics?: Array<{ id: string; name: string; value: string }> | undefined;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        storageBucket: {
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          parentEntity?:
            | { displayName: string; type: SchemaTypes.ProfileType }
            | undefined;
          documents: Array<{
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        };
      };
      collaboration: {
        id: string;
        relations?:
          | Array<{
              id: string;
              actorName: string;
              actorRole: string;
              actorType: string;
              description: string;
              type: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        callouts: Array<{
          id: string;
          activity: number;
          nameID: string;
          publishedDate?: number | undefined;
          sortOrder: number;
          type: SchemaTypes.CalloutType;
          visibility: SchemaTypes.CalloutVisibility;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          comments?:
            | {
                id: string;
                messagesCount: number;
                messages: Array<{ message: any }>;
              }
            | undefined;
          contributionPolicy: {
            allowedContributionTypes: Array<
              SchemaTypes.CalloutContributionType
            >;
            id: string;
            state: SchemaTypes.CalloutState;
          };
          contributions: Array<{
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            createdBy?: { email: string } | undefined;
            link?:
              | {
                  id: string;
                  uri: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  };
                }
              | undefined;
            post?:
              | {
                  id: string;
                  nameID: string;
                  type: string;
                  createdDate: Date;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  comments: {
                    id: string;
                    messagesCount: number;
                    messages: Array<{
                      id: any;
                      message: any;
                      sender?: { id: string } | {} | undefined;
                    }>;
                  };
                  createdBy?: { email: string } | undefined;
                }
              | undefined;
            whiteboard?:
              | {
                  id: string;
                  nameID: string;
                  content: any;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          }>;
          createdBy?: { email: string } | undefined;
          framing: {
            id: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            whiteboard?:
              | {
                  nameID: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          };
          publishedBy?: { email: string } | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        innovationFlow: {
          id: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          currentState: { description: any; displayName: string };
          states: Array<{ description: any; displayName: string }>;
        };
      };
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      community: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        groups: Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>;
        applications: Array<{
          id: string;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
          questions: Array<{ id: string }>;
          contributor:
            | {
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }
            | {};
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        communication: {
          id: string;
          updates: {
            id: string;
            messages: Array<{
              id: any;
              message: any;
              threadID?: string | undefined;
              sender?: { id: string } | {} | undefined;
              reactions: Array<{
                id: any;
                emoji: any;
                sender?: { email: string } | undefined;
              }>;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        memberUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        leadUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        adminUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        memberOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        leadOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        adminOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
      context: {
        id: string;
        vision?: any | undefined;
        impact?: any | undefined;
        who?: any | undefined;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
    }>;
    settings: {
      privacy: {
        mode: SchemaTypes.SpacePrivacyMode;
        allowPlatformSupportAsAdmin: boolean;
      };
      membership: {
        allowSubspaceAdminsToInviteMembers: boolean;
        policy: SchemaTypes.CommunityMembershipPolicy;
        trustedOrganizations: Array<string>;
      };
      collaboration: {
        allowMembersToCreateCallouts: boolean;
        allowMembersToCreateSubspaces: boolean;
        inheritMembershipRights: boolean;
      };
    };
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      storageBucket: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        parentEntity?:
          | { displayName: string; type: SchemaTypes.ProfileType }
          | undefined;
        documents: Array<{
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
    };
  };
};

export type CreateLicensePlanMutationVariables = SchemaTypes.Exact<{
  LicensePlan: SchemaTypes.CreateLicensePlanOnLicensingInput;
}>;

export type CreateLicensePlanMutation = {
  createLicensePlan: {
    id: string;
    name: string;
    enabled: boolean;
    isFree: boolean;
    licenseCredential: SchemaTypes.LicenseCredential;
    pricePerMonth?: number | undefined;
    requiresContactSupport: boolean;
    requiresPaymentMethod: boolean;
    sortOrder: number;
    trialEnabled: boolean;
  };
};

export type DeleteLicensePlanMutationVariables = SchemaTypes.Exact<{
  LicensePlan: SchemaTypes.DeleteLicensePlanInput;
}>;

export type DeleteLicensePlanMutation = {
  deleteLicensePlan: {
    id: string;
    name: string;
    enabled: boolean;
    isFree: boolean;
    licenseCredential: SchemaTypes.LicenseCredential;
    pricePerMonth?: number | undefined;
    requiresContactSupport: boolean;
    requiresPaymentMethod: boolean;
    sortOrder: number;
    trialEnabled: boolean;
  };
};

export type UpdateLicensePlanMutationVariables = SchemaTypes.Exact<{
  LicensePlan: SchemaTypes.UpdateLicensePlanInput;
}>;

export type UpdateLicensePlanMutation = {
  updateLicensePlan: {
    id: string;
    name: string;
    enabled: boolean;
    isFree: boolean;
    licenseCredential: SchemaTypes.LicenseCredential;
    pricePerMonth?: number | undefined;
    requiresContactSupport: boolean;
    requiresPaymentMethod: boolean;
    sortOrder: number;
    trialEnabled: boolean;
  };
};

export type CreateInnovationFlowTemplateMutationVariables = SchemaTypes.Exact<{
  templatesSetId: SchemaTypes.Scalars['UUID'];
  profile: SchemaTypes.CreateProfileInput;
  states?: SchemaTypes.InputMaybe<
    | Array<SchemaTypes.UpdateInnovationFlowStateInput>
    | SchemaTypes.UpdateInnovationFlowStateInput
  >;
  tags?: SchemaTypes.InputMaybe<
    Array<SchemaTypes.Scalars['String']> | SchemaTypes.Scalars['String']
  >;
}>;

export type CreateInnovationFlowTemplateMutation = {
  createInnovationFlowTemplate: {
    id: string;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      storageBucket: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        parentEntity?:
          | { displayName: string; type: SchemaTypes.ProfileType }
          | undefined;
        documents: Array<{
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
    };
    states: Array<{ description: any; displayName: string }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type EventOnApplicationMutationVariables = SchemaTypes.Exact<{
  input: SchemaTypes.ApplicationEventInput;
}>;

export type EventOnApplicationMutation = {
  eventOnApplication: {
    id: string;
    lifecycle: {
      id: string;
      state?: string | undefined;
      nextEvents?: Array<string> | undefined;
      stateIsFinal: boolean;
      templateName?: string | undefined;
    };
  };
};

export type InvitationStateEventMutationVariables = SchemaTypes.Exact<{
  input: SchemaTypes.InvitationEventInput;
}>;

export type InvitationStateEventMutation = {
  eventOnCommunityInvitation: {
    id: string;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    lifecycle: {
      id: string;
      state?: string | undefined;
      nextEvents?: Array<string> | undefined;
      stateIsFinal: boolean;
      templateName?: string | undefined;
    };
  };
};

export type EventOnOrganizationVerificationMutationVariables = SchemaTypes.Exact<{
  organizationVerificationEventData: SchemaTypes.OrganizationVerificationEventInput;
}>;

export type EventOnOrganizationVerificationMutation = {
  eventOnOrganizationVerification: {
    id: string;
    lifecycle: {
      id: string;
      state?: string | undefined;
      nextEvents?: Array<string> | undefined;
      stateIsFinal: boolean;
      templateName?: string | undefined;
    };
  };
};

export type UpdateInnovationFlowSelectedStateMutationVariables = SchemaTypes.Exact<{
  innovationFlowId: SchemaTypes.Scalars['UUID'];
  selectedState: SchemaTypes.Scalars['String'];
}>;

export type UpdateInnovationFlowSelectedStateMutation = {
  updateInnovationFlowSelectedState: {
    id: string;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      storageBucket: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        parentEntity?:
          | { displayName: string; type: SchemaTypes.ProfileType }
          | undefined;
        documents: Array<{
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
    };
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
    currentState: { description: any; displayName: string };
    states: Array<{ description: any; displayName: string }>;
  };
};

export type UpdateInnovationFlowStatesFromTemplateMutationVariables = SchemaTypes.Exact<{
  input: SchemaTypes.UpdateInnovationFlowFromTemplateInput;
}>;

export type UpdateInnovationFlowStatesFromTemplateMutation = {
  updateInnovationFlowStatesFromTemplate: {
    id: string;
    currentState: { displayName: string };
  };
};

export type UpdateInnovationFlowTemplateMutationVariables = SchemaTypes.Exact<{
  templateId: SchemaTypes.Scalars['UUID'];
  profile: SchemaTypes.UpdateProfileInput;
  states?: SchemaTypes.InputMaybe<
    | Array<SchemaTypes.UpdateInnovationFlowStateInput>
    | SchemaTypes.UpdateInnovationFlowStateInput
  >;
}>;

export type UpdateInnovationFlowTemplateMutation = {
  updateInnovationFlowTemplate: {
    id: string;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      storageBucket: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        parentEntity?:
          | { displayName: string; type: SchemaTypes.ProfileType }
          | undefined;
        documents: Array<{
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
    };
    states: Array<{ description: any; displayName: string }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type ApplyForCommunityMembershipMutationVariables = SchemaTypes.Exact<{
  applicationData: SchemaTypes.CommunityApplyInput;
}>;

export type ApplyForCommunityMembershipMutation = {
  applyForCommunityMembership: {
    id: string;
    lifecycle: {
      id: string;
      state?: string | undefined;
      nextEvents?: Array<string> | undefined;
      stateIsFinal: boolean;
      templateName?: string | undefined;
    };
    questions: Array<{ id: string }>;
    contributor:
      | {
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }
      | {};
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type DeleteUserApplicationMutationVariables = SchemaTypes.Exact<{
  deleteData: SchemaTypes.DeleteApplicationInput;
}>;

export type DeleteUserApplicationMutation = {
  deleteUserApplication: { id: string };
};

export type DeleteExternalInvitationMutationVariables = SchemaTypes.Exact<{
  invitationId: SchemaTypes.Scalars['UUID'];
}>;

export type DeleteExternalInvitationMutation = {
  deleteInvitationExternal: { id: string };
};

export type DeleteInvitationMutationVariables = SchemaTypes.Exact<{
  deleteData: SchemaTypes.DeleteInvitationInput;
}>;

export type DeleteInvitationMutation = { deleteInvitation: { id: string } };

export type InviteContributorsMutationVariables = SchemaTypes.Exact<{
  communityId: SchemaTypes.Scalars['UUID'];
  contributorIds:
    | Array<SchemaTypes.Scalars['UUID']>
    | SchemaTypes.Scalars['UUID'];
  message?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['String']>;
}>;

export type InviteContributorsMutation = {
  inviteContributorsForCommunityMembership: Array<{
    __typename: 'Invitation';
    id: string;
    lifecycle: { state?: string | undefined };
  }>;
};

export type InviteExternalUserMutationVariables = SchemaTypes.Exact<{
  communityId: SchemaTypes.Scalars['UUID'];
  email: SchemaTypes.Scalars['String'];
  message?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['String']>;
}>;

export type InviteExternalUserMutation = {
  inviteForCommunityMembershipByEmail:
    | { __typename: 'Invitation'; id: string }
    | { __typename: 'InvitationExternal'; id: string };
};

export type AssignCommunityRoleToOrganizationMutationVariables = SchemaTypes.Exact<{
  roleData: SchemaTypes.AssignCommunityRoleToOrganizationInput;
}>;

export type AssignCommunityRoleToOrganizationMutation = {
  assignCommunityRoleToOrganization: {
    id: string;
    nameID: string;
    legalEntityName?: string | undefined;
    domain?: string | undefined;
    website?: string | undefined;
    contactEmail?: string | undefined;
    groups?:
      | Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>
      | undefined;
    associates?:
      | Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    verification: {
      id: string;
      status: SchemaTypes.OrganizationVerificationEnum;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      lifecycle: {
        id: string;
        state?: string | undefined;
        nextEvents?: Array<string> | undefined;
        stateIsFinal: boolean;
        templateName?: string | undefined;
      };
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  };
};

export type AssignOrganizationAsCommunityLeadMutationVariables = SchemaTypes.Exact<{
  roleData: SchemaTypes.AssignCommunityRoleToOrganizationInput;
}>;

export type AssignOrganizationAsCommunityLeadMutation = {
  assignCommunityRoleToOrganization: {
    id: string;
    nameID: string;
    legalEntityName?: string | undefined;
    domain?: string | undefined;
    website?: string | undefined;
    contactEmail?: string | undefined;
    groups?:
      | Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>
      | undefined;
    associates?:
      | Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    verification: {
      id: string;
      status: SchemaTypes.OrganizationVerificationEnum;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      lifecycle: {
        id: string;
        state?: string | undefined;
        nextEvents?: Array<string> | undefined;
        stateIsFinal: boolean;
        templateName?: string | undefined;
      };
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  };
};

export type AssignOrganizationAsCommunityMemberMutationVariables = SchemaTypes.Exact<{
  roleData: SchemaTypes.AssignCommunityRoleToOrganizationInput;
}>;

export type AssignOrganizationAsCommunityMemberMutation = {
  assignCommunityRoleToOrganization: {
    id: string;
    nameID: string;
    legalEntityName?: string | undefined;
    domain?: string | undefined;
    website?: string | undefined;
    contactEmail?: string | undefined;
    groups?:
      | Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>
      | undefined;
    associates?:
      | Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    verification: {
      id: string;
      status: SchemaTypes.OrganizationVerificationEnum;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      lifecycle: {
        id: string;
        state?: string | undefined;
        nextEvents?: Array<string> | undefined;
        stateIsFinal: boolean;
        templateName?: string | undefined;
      };
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  };
};

export type CreateOrganizationMutationVariables = SchemaTypes.Exact<{
  organizationData: SchemaTypes.CreateOrganizationInput;
}>;

export type CreateOrganizationMutation = {
  createOrganization: {
    id: string;
    nameID: string;
    legalEntityName?: string | undefined;
    domain?: string | undefined;
    website?: string | undefined;
    contactEmail?: string | undefined;
    groups?:
      | Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>
      | undefined;
    associates?:
      | Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    verification: {
      id: string;
      status: SchemaTypes.OrganizationVerificationEnum;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      lifecycle: {
        id: string;
        state?: string | undefined;
        nextEvents?: Array<string> | undefined;
        stateIsFinal: boolean;
        templateName?: string | undefined;
      };
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  };
};

export type DeleteOrganizationMutationVariables = SchemaTypes.Exact<{
  deleteData: SchemaTypes.DeleteOrganizationInput;
}>;

export type DeleteOrganizationMutation = { deleteOrganization: { id: string } };

export type RemoveCommunityRoleFromOrganizationMutationVariables = SchemaTypes.Exact<{
  roleData: SchemaTypes.RemoveCommunityRoleFromOrganizationInput;
}>;

export type RemoveCommunityRoleFromOrganizationMutation = {
  removeCommunityRoleFromOrganization: {
    id: string;
    nameID: string;
    legalEntityName?: string | undefined;
    domain?: string | undefined;
    website?: string | undefined;
    contactEmail?: string | undefined;
    groups?:
      | Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>
      | undefined;
    associates?:
      | Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    verification: {
      id: string;
      status: SchemaTypes.OrganizationVerificationEnum;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      lifecycle: {
        id: string;
        state?: string | undefined;
        nextEvents?: Array<string> | undefined;
        stateIsFinal: boolean;
        templateName?: string | undefined;
      };
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  };
};

export type UpdateOrganizationMutationVariables = SchemaTypes.Exact<{
  organizationData: SchemaTypes.UpdateOrganizationInput;
}>;

export type UpdateOrganizationMutation = {
  updateOrganization: {
    id: string;
    nameID: string;
    legalEntityName?: string | undefined;
    domain?: string | undefined;
    website?: string | undefined;
    contactEmail?: string | undefined;
    groups?:
      | Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>
      | undefined;
    associates?:
      | Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    verification: {
      id: string;
      status: SchemaTypes.OrganizationVerificationEnum;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      lifecycle: {
        id: string;
        state?: string | undefined;
        nextEvents?: Array<string> | undefined;
        stateIsFinal: boolean;
        templateName?: string | undefined;
      };
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  };
};

export type CreateInnovationHubMutationVariables = SchemaTypes.Exact<{
  input: SchemaTypes.CreateInnovationHubInput;
}>;

export type CreateInnovationHubMutation = {
  createInnovationHub: {
    id: string;
    nameID: string;
    type: SchemaTypes.InnovationHubType;
    spaceVisibilityFilter?: SchemaTypes.SpaceVisibility | undefined;
    profile: { displayName: string; visuals: Array<{ id: string }> };
    spaceListFilter?:
      | Array<{ id: string; nameID: string; profile: { displayName: string } }>
      | undefined;
  };
};

export type CreateInnovationPackOnLibraryMutationVariables = SchemaTypes.Exact<{
  data: SchemaTypes.CreateInnovationPackOnLibraryInput;
}>;

export type CreateInnovationPackOnLibraryMutation = {
  createInnovationPackOnLibrary: {
    id: string;
    nameID: string;
    provider?: { id: string; nameID: string } | undefined;
    templates?:
      | {
          id: string;
          postTemplates: Array<{ id: string }>;
          whiteboardTemplates: Array<{ id: string }>;
        }
      | undefined;
  };
};

export type DeleteInnovationFlowTemplateMutationVariables = SchemaTypes.Exact<{
  deleteData: SchemaTypes.DeleteInnovationFlowTemplateInput;
}>;

export type DeleteInnovationFlowTemplateMutation = {
  deleteInnovationFlowTemplate: { id: string };
};

export type DeleteInnovationHubMutationVariables = SchemaTypes.Exact<{
  input: SchemaTypes.DeleteInnovationHubInput;
}>;

export type DeleteInnovationHubMutation = {
  deleteInnovationHub: { id: string };
};

export type UpdateAccountPlatformSettingsMutationVariables = SchemaTypes.Exact<{
  accountID: SchemaTypes.Scalars['UUID'];
  hostID?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['UUID_NAMEID']>;
  license?: SchemaTypes.InputMaybe<SchemaTypes.UpdateLicenseInput>;
}>;

export type UpdateAccountPlatformSettingsMutation = {
  updateAccountPlatformSettings: {
    id: string;
    spaceID: string;
    license: { id: string; visibility: SchemaTypes.SpaceVisibility };
    host?: { id: string } | { id: string } | { id: string } | undefined;
  };
};

export type UpdateSpacePlatformSettingsMutationVariables = SchemaTypes.Exact<{
  spaceID: SchemaTypes.Scalars['UUID'];
  nameID: SchemaTypes.Scalars['NameID'];
}>;

export type UpdateSpacePlatformSettingsMutation = {
  updateSpacePlatformSettings: { id: string; nameID: string };
};

export type UpdatePreferenceOnOrganizationMutationVariables = SchemaTypes.Exact<{
  preferenceData: SchemaTypes.UpdateOrganizationPreferenceInput;
}>;

export type UpdatePreferenceOnOrganizationMutation = {
  updatePreferenceOnOrganization: {
    id: string;
    value: string;
    definition: {
      type: SchemaTypes.PreferenceType;
      id: string;
      displayName: string;
      description: string;
      group: string;
    };
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type UpdatePreferenceOnUserMutationVariables = SchemaTypes.Exact<{
  preferenceData: SchemaTypes.UpdateUserPreferenceInput;
}>;

export type UpdatePreferenceOnUserMutation = {
  updatePreferenceOnUser: {
    id: string;
    value: string;
    definition: {
      type: SchemaTypes.PreferenceType;
      id: string;
      displayName: string;
      description: string;
      group: string;
    };
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type CreateReferenceOnProfileMutationVariables = SchemaTypes.Exact<{
  referenceInput: SchemaTypes.CreateReferenceOnProfileInput;
}>;

export type CreateReferenceOnProfileMutation = {
  createReferenceOnProfile: { id: string; name: string; uri: string };
};

export type DeleteReferenceMutationVariables = SchemaTypes.Exact<{
  deleteData: SchemaTypes.DeleteReferenceInput;
}>;

export type DeleteReferenceMutation = { deleteReference: { id: string } };

export type CreateRelationOnCollaborationMutationVariables = SchemaTypes.Exact<{
  data: SchemaTypes.CreateRelationOnCollaborationInput;
}>;

export type CreateRelationOnCollaborationMutation = {
  createRelationOnCollaboration: {
    id: string;
    actorName: string;
    actorRole: string;
    actorType: string;
    description: string;
    type: string;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type DeleteRelationMutationVariables = SchemaTypes.Exact<{
  deleteData: SchemaTypes.DeleteRelationInput;
}>;

export type DeleteRelationMutation = { deleteRelation: { id: string } };

export type UpdateSpaceSettingsMutationVariables = SchemaTypes.Exact<{
  settingsData: SchemaTypes.UpdateSpaceSettingsInput;
}>;

export type UpdateSpaceSettingsMutation = {
  updateSpaceSettings: {
    id: string;
    settings: {
      privacy: {
        mode: SchemaTypes.SpacePrivacyMode;
        allowPlatformSupportAsAdmin: boolean;
      };
      membership: {
        allowSubspaceAdminsToInviteMembers: boolean;
        policy: SchemaTypes.CommunityMembershipPolicy;
        trustedOrganizations: Array<string>;
      };
      collaboration: {
        allowMembersToCreateCallouts: boolean;
        allowMembersToCreateSubspaces: boolean;
        inheritMembershipRights: boolean;
      };
    };
  };
};

export type CreateUserMutationVariables = SchemaTypes.Exact<{
  userData: SchemaTypes.CreateUserInput;
}>;

export type CreateUserMutation = {
  createUser: {
    id: string;
    nameID: string;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    accountUpn: string;
    agent: {
      credentials?:
        | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
        | undefined;
    };
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type DeleteUserMutationVariables = SchemaTypes.Exact<{
  deleteData: SchemaTypes.DeleteUserInput;
}>;

export type DeleteUserMutation = { deleteUser: { id: string } };

export type UpdateUserMutationVariables = SchemaTypes.Exact<{
  userData: SchemaTypes.UpdateUserInput;
}>;

export type UpdateUserMutation = {
  updateUser: {
    id: string;
    nameID: string;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    accountUpn: string;
    agent: {
      credentials?:
        | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
        | undefined;
    };
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type GetActivityLogOnCollaborationQueryVariables = SchemaTypes.Exact<{
  queryData: SchemaTypes.ActivityLogInput;
}>;

export type GetActivityLogOnCollaborationQuery = {
  activityLogOnCollaboration: Array<
    | {
        collaborationID: string;
        description: string;
        type: SchemaTypes.ActivityEventType;
        triggeredBy: { id: string };
      }
    | {
        collaborationID: string;
        description: string;
        type: SchemaTypes.ActivityEventType;
        triggeredBy: { id: string };
      }
    | {
        collaborationID: string;
        description: string;
        type: SchemaTypes.ActivityEventType;
        triggeredBy: { id: string };
      }
    | {
        collaborationID: string;
        description: string;
        type: SchemaTypes.ActivityEventType;
        triggeredBy: { id: string };
      }
    | {
        collaborationID: string;
        description: string;
        type: SchemaTypes.ActivityEventType;
        triggeredBy: { id: string };
      }
    | {
        collaborationID: string;
        description: string;
        type: SchemaTypes.ActivityEventType;
        triggeredBy: { id: string };
      }
    | {
        collaborationID: string;
        description: string;
        type: SchemaTypes.ActivityEventType;
        triggeredBy: { id: string };
      }
    | {
        collaborationID: string;
        description: string;
        type: SchemaTypes.ActivityEventType;
        triggeredBy: { id: string };
      }
    | {
        collaborationID: string;
        description: string;
        type: SchemaTypes.ActivityEventType;
        triggeredBy: { id: string };
      }
    | {
        collaborationID: string;
        description: string;
        type: SchemaTypes.ActivityEventType;
        triggeredBy: { id: string };
      }
    | {
        collaborationID: string;
        description: string;
        type: SchemaTypes.ActivityEventType;
        triggeredBy: { id: string };
      }
    | {
        collaborationID: string;
        description: string;
        type: SchemaTypes.ActivityEventType;
        triggeredBy: { id: string };
      }
  >;
};

export type SpaceCalloutQueryVariables = SchemaTypes.Exact<{
  spaceNameId: SchemaTypes.Scalars['UUID_NAMEID'];
  calloutId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type SpaceCalloutQuery = {
  space: {
    id: string;
    collaboration: {
      callouts: Array<{
        id: string;
        activity: number;
        nameID: string;
        publishedDate?: number | undefined;
        sortOrder: number;
        type: SchemaTypes.CalloutType;
        visibility: SchemaTypes.CalloutVisibility;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        comments?:
          | {
              id: string;
              messagesCount: number;
              messages: Array<{ message: any }>;
            }
          | undefined;
        contributionPolicy: {
          allowedContributionTypes: Array<SchemaTypes.CalloutContributionType>;
          id: string;
          state: SchemaTypes.CalloutState;
        };
        contributions: Array<{
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          createdBy?: { email: string } | undefined;
          link?:
            | {
                id: string;
                uri: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                };
              }
            | undefined;
          post?:
            | {
                id: string;
                nameID: string;
                type: string;
                createdDate: Date;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  visual?:
                    | {
                        __typename: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                comments: {
                  id: string;
                  messagesCount: number;
                  messages: Array<{
                    id: any;
                    message: any;
                    sender?: { id: string } | {} | undefined;
                  }>;
                };
                createdBy?: { email: string } | undefined;
              }
            | undefined;
          whiteboard?:
            | {
                id: string;
                nameID: string;
                content: any;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  visual?:
                    | {
                        __typename: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        }>;
        createdBy?: { email: string } | undefined;
        framing: {
          id: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
          whiteboard?:
            | {
                nameID: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  visual?:
                    | {
                        __typename: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        };
        publishedBy?: { email: string } | undefined;
      }>;
    };
  };
};

export type CalloutDetailsQueryVariables = SchemaTypes.Exact<{
  calloutId: SchemaTypes.Scalars['UUID'];
}>;

export type CalloutDetailsQuery = {
  lookup: {
    __typename: 'LookupQueryResults';
    callout?:
      | {
          __typename: 'Callout';
          id: string;
          nameID: string;
          type: SchemaTypes.CalloutType;
          sortOrder: number;
          activity: number;
          visibility: SchemaTypes.CalloutVisibility;
          framing: {
            __typename: 'CalloutFraming';
            profile: {
              __typename: 'Profile';
              id: string;
              displayName: string;
              description?: any | undefined;
              tagset?:
                | {
                    __typename: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: SchemaTypes.TagsetType;
                  }
                | undefined;
              tagsets?:
                | Array<{
                    __typename: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: SchemaTypes.TagsetType;
                  }>
                | undefined;
              references?:
                | Array<{
                    __typename: 'Reference';
                    id: string;
                    name: string;
                    uri: string;
                    description?: string | undefined;
                  }>
                | undefined;
            };
            whiteboard?:
              | {
                  __typename: 'Whiteboard';
                  id: string;
                  nameID: string;
                  createdDate: Date;
                  contentUpdatePolicy: SchemaTypes.ContentUpdatePolicy;
                  profile: {
                    __typename: 'Profile';
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          allowedTypes: Array<string>;
                          aspectRatio: number;
                          maxHeight: number;
                          maxWidth: number;
                          minHeight: number;
                          minWidth: number;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    preview?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          allowedTypes: Array<string>;
                          aspectRatio: number;
                          maxHeight: number;
                          maxWidth: number;
                          minHeight: number;
                          minWidth: number;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: SchemaTypes.TagsetType;
                        }
                      | undefined;
                    storageBucket: { __typename: 'StorageBucket'; id: string };
                  };
                  authorization?:
                    | {
                        __typename: 'Authorization';
                        id: string;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                        anonymousReadAccess: boolean;
                      }
                    | undefined;
                  createdBy?:
                    | {
                        __typename: 'User';
                        id: string;
                        profile: {
                          __typename: 'Profile';
                          id: string;
                          displayName: string;
                          url: string;
                          location?:
                            | {
                                __typename: 'Location';
                                id: string;
                                country: string;
                                city: string;
                              }
                            | undefined;
                          avatar?:
                            | { __typename: 'Visual'; id: string; uri: string }
                            | undefined;
                        };
                      }
                    | undefined;
                }
              | undefined;
          };
          contributionPolicy: {
            __typename: 'CalloutContributionPolicy';
            state: SchemaTypes.CalloutState;
          };
          contributionDefaults: {
            __typename: 'CalloutContributionDefaults';
            id: string;
            postDescription?: any | undefined;
            whiteboardContent?: any | undefined;
          };
          contributions: Array<{
            __typename: 'CalloutContribution';
            link?:
              | {
                  __typename: 'Link';
                  id: string;
                  uri: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                  };
                  authorization?:
                    | {
                        id: string;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }
              | undefined;
          }>;
          comments?:
            | {
                __typename: 'Room';
                id: string;
                messagesCount: number;
                authorization?:
                  | {
                      id: string;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                      anonymousReadAccess: boolean;
                    }
                  | undefined;
                messages: Array<{
                  id: any;
                  message: any;
                  timestamp: number;
                  threadID?: string | undefined;
                  reactions: Array<{
                    id: any;
                    emoji: any;
                    sender?:
                      | { id: string; firstName: string; lastName: string }
                      | undefined;
                  }>;
                  sender?:
                    | {
                        id: string;
                        nameID: string;
                        firstName: string;
                        lastName: string;
                        email: string;
                        phone: string;
                        accountUpn: string;
                        agent: {
                          credentials?:
                            | Array<{
                                resourceID: string;
                                type: SchemaTypes.CredentialType;
                              }>
                            | undefined;
                        };
                        profile: {
                          id: string;
                          displayName: string;
                          description?: any | undefined;
                          tagline: string;
                          references?:
                            | Array<{
                                id: string;
                                name: string;
                                uri: string;
                                authorization?:
                                  | {
                                      myPrivileges?:
                                        | Array<
                                            SchemaTypes.AuthorizationPrivilege
                                          >
                                        | undefined;
                                    }
                                  | undefined;
                              }>
                            | undefined;
                          tagsets?:
                            | Array<{
                                id: string;
                                name: string;
                                tags: Array<string>;
                                authorization?:
                                  | {
                                      myPrivileges?:
                                        | Array<
                                            SchemaTypes.AuthorizationPrivilege
                                          >
                                        | undefined;
                                    }
                                  | undefined;
                              }>
                            | undefined;
                          location?:
                            | { country: string; city: string }
                            | undefined;
                          visuals: Array<{
                            id: string;
                            name: string;
                            uri: string;
                          }>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        };
                        preferences: Array<{
                          id: string;
                          value: string;
                          definition: {
                            type: SchemaTypes.PreferenceType;
                            id: string;
                            displayName: string;
                            description: string;
                            group: string;
                          };
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | {}
                    | undefined;
                }>;
              }
            | undefined;
          authorization?:
            | {
                __typename: 'Authorization';
                id: string;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }
      | undefined;
  };
};

export type CalloutDetailsFragment = {
  __typename: 'Callout';
  id: string;
  nameID: string;
  type: SchemaTypes.CalloutType;
  sortOrder: number;
  activity: number;
  visibility: SchemaTypes.CalloutVisibility;
  framing: {
    __typename: 'CalloutFraming';
    profile: {
      __typename: 'Profile';
      id: string;
      displayName: string;
      description?: any | undefined;
      tagset?:
        | {
            __typename: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: SchemaTypes.TagsetType;
          }
        | undefined;
      tagsets?:
        | Array<{
            __typename: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: SchemaTypes.TagsetType;
          }>
        | undefined;
      references?:
        | Array<{
            __typename: 'Reference';
            id: string;
            name: string;
            uri: string;
            description?: string | undefined;
          }>
        | undefined;
    };
    whiteboard?:
      | {
          __typename: 'Whiteboard';
          id: string;
          nameID: string;
          createdDate: Date;
          contentUpdatePolicy: SchemaTypes.ContentUpdatePolicy;
          profile: {
            __typename: 'Profile';
            id: string;
            displayName: string;
            description?: any | undefined;
            visual?:
              | {
                  __typename: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  allowedTypes: Array<string>;
                  aspectRatio: number;
                  maxHeight: number;
                  maxWidth: number;
                  minHeight: number;
                  minWidth: number;
                  alternativeText?: string | undefined;
                }
              | undefined;
            preview?:
              | {
                  __typename: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  allowedTypes: Array<string>;
                  aspectRatio: number;
                  maxHeight: number;
                  maxWidth: number;
                  minHeight: number;
                  minWidth: number;
                  alternativeText?: string | undefined;
                }
              | undefined;
            tagset?:
              | {
                  __typename: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: SchemaTypes.TagsetType;
                }
              | undefined;
            storageBucket: { __typename: 'StorageBucket'; id: string };
          };
          authorization?:
            | {
                __typename: 'Authorization';
                id: string;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
                anonymousReadAccess: boolean;
              }
            | undefined;
          createdBy?:
            | {
                __typename: 'User';
                id: string;
                profile: {
                  __typename: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  location?:
                    | {
                        __typename: 'Location';
                        id: string;
                        country: string;
                        city: string;
                      }
                    | undefined;
                  avatar?:
                    | { __typename: 'Visual'; id: string; uri: string }
                    | undefined;
                };
              }
            | undefined;
        }
      | undefined;
  };
  contributionPolicy: {
    __typename: 'CalloutContributionPolicy';
    state: SchemaTypes.CalloutState;
  };
  contributionDefaults: {
    __typename: 'CalloutContributionDefaults';
    id: string;
    postDescription?: any | undefined;
    whiteboardContent?: any | undefined;
  };
  contributions: Array<{
    __typename: 'CalloutContribution';
    link?:
      | {
          __typename: 'Link';
          id: string;
          uri: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
          };
          authorization?:
            | {
                id: string;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }
      | undefined;
  }>;
  comments?:
    | {
        __typename: 'Room';
        id: string;
        messagesCount: number;
        authorization?:
          | {
              id: string;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
              anonymousReadAccess: boolean;
            }
          | undefined;
        messages: Array<{
          id: any;
          message: any;
          timestamp: number;
          threadID?: string | undefined;
          reactions: Array<{
            id: any;
            emoji: any;
            sender?:
              | { id: string; firstName: string; lastName: string }
              | undefined;
          }>;
          sender?:
            | {
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }
            | {}
            | undefined;
        }>;
      }
    | undefined;
  authorization?:
    | {
        __typename: 'Authorization';
        id: string;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
      }
    | undefined;
};

export type TagsetDetailsFragment = {
  __typename: 'Tagset';
  id: string;
  name: string;
  tags: Array<string>;
  allowedValues: Array<string>;
  type: SchemaTypes.TagsetType;
};

export type ReferenceDetailsFragment = {
  __typename: 'Reference';
  id: string;
  name: string;
  uri: string;
  description?: string | undefined;
};

export type WhiteboardDetailsFragment = {
  __typename: 'Whiteboard';
  id: string;
  nameID: string;
  createdDate: Date;
  contentUpdatePolicy: SchemaTypes.ContentUpdatePolicy;
  profile: {
    __typename: 'Profile';
    id: string;
    displayName: string;
    description?: any | undefined;
    visual?:
      | {
          __typename: 'Visual';
          id: string;
          uri: string;
          name: string;
          allowedTypes: Array<string>;
          aspectRatio: number;
          maxHeight: number;
          maxWidth: number;
          minHeight: number;
          minWidth: number;
          alternativeText?: string | undefined;
        }
      | undefined;
    preview?:
      | {
          __typename: 'Visual';
          id: string;
          uri: string;
          name: string;
          allowedTypes: Array<string>;
          aspectRatio: number;
          maxHeight: number;
          maxWidth: number;
          minHeight: number;
          minWidth: number;
          alternativeText?: string | undefined;
        }
      | undefined;
    tagset?:
      | {
          __typename: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: SchemaTypes.TagsetType;
        }
      | undefined;
    storageBucket: { __typename: 'StorageBucket'; id: string };
  };
  authorization?:
    | {
        __typename: 'Authorization';
        id: string;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        anonymousReadAccess: boolean;
      }
    | undefined;
  createdBy?:
    | {
        __typename: 'User';
        id: string;
        profile: {
          __typename: 'Profile';
          id: string;
          displayName: string;
          url: string;
          location?:
            | {
                __typename: 'Location';
                id: string;
                country: string;
                city: string;
              }
            | undefined;
          avatar?:
            | { __typename: 'Visual'; id: string; uri: string }
            | undefined;
        };
      }
    | undefined;
};

export type WhiteboardProfileFragment = {
  __typename: 'Profile';
  id: string;
  displayName: string;
  description?: any | undefined;
  visual?:
    | {
        __typename: 'Visual';
        id: string;
        uri: string;
        name: string;
        allowedTypes: Array<string>;
        aspectRatio: number;
        maxHeight: number;
        maxWidth: number;
        minHeight: number;
        minWidth: number;
        alternativeText?: string | undefined;
      }
    | undefined;
  preview?:
    | {
        __typename: 'Visual';
        id: string;
        uri: string;
        name: string;
        allowedTypes: Array<string>;
        aspectRatio: number;
        maxHeight: number;
        maxWidth: number;
        minHeight: number;
        minWidth: number;
        alternativeText?: string | undefined;
      }
    | undefined;
  tagset?:
    | {
        __typename: 'Tagset';
        id: string;
        name: string;
        tags: Array<string>;
        allowedValues: Array<string>;
        type: SchemaTypes.TagsetType;
      }
    | undefined;
  storageBucket: { __typename: 'StorageBucket'; id: string };
};

export type LinkDetailsWithAuthorizationFragment = {
  id: string;
  uri: string;
  profile: { id: string; displayName: string; description?: any | undefined };
  authorization?:
    | {
        id: string;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
      }
    | undefined;
};

export type CommentsWithMessagesFragment = {
  id: string;
  messagesCount: number;
  authorization?:
    | {
        id: string;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        anonymousReadAccess: boolean;
      }
    | undefined;
  messages: Array<{
    id: any;
    message: any;
    timestamp: number;
    threadID?: string | undefined;
    reactions: Array<{
      id: any;
      emoji: any;
      sender?: { id: string; firstName: string; lastName: string } | undefined;
    }>;
    sender?:
      | {
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }
      | {}
      | undefined;
  }>;
};

export type MessageDetailsFragment = {
  id: any;
  message: any;
  timestamp: number;
  threadID?: string | undefined;
  reactions: Array<{
    id: any;
    emoji: any;
    sender?: { id: string; firstName: string; lastName: string } | undefined;
  }>;
  sender?:
    | {
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }
    | {}
    | undefined;
};

export type ReactionDetailsFragment = {
  id: any;
  emoji: any;
  sender?: { id: string; firstName: string; lastName: string } | undefined;
};

export type CalloutStorageConfigQueryVariables = SchemaTypes.Exact<{
  calloutId: SchemaTypes.Scalars['UUID'];
}>;

export type CalloutStorageConfigQuery = {
  lookup: {
    __typename: 'LookupQueryResults';
    callout?:
      | {
          __typename: 'Callout';
          id: string;
          framing: {
            __typename: 'CalloutFraming';
            id: string;
            profile: {
              __typename: 'Profile';
              id: string;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
          };
        }
      | undefined;
  };
};

export type CalloutLinkContributionStorageConfigQueryVariables = SchemaTypes.Exact<{
  linkId: SchemaTypes.Scalars['UUID'];
  calloutId: SchemaTypes.Scalars['UUID'];
}>;

export type CalloutLinkContributionStorageConfigQuery = {
  lookup: {
    __typename: 'LookupQueryResults';
    callout?:
      | {
          __typename: 'Callout';
          id: string;
          contributions: Array<{
            __typename: 'CalloutContribution';
            link?:
              | {
                  __typename: 'Link';
                  id: string;
                  profile: {
                    __typename: 'Profile';
                    id: string;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  };
                }
              | undefined;
          }>;
        }
      | undefined;
  };
};

export type CalloutPostStorageConfigQueryVariables = SchemaTypes.Exact<{
  postId: SchemaTypes.Scalars['UUID_NAMEID'];
  calloutId: SchemaTypes.Scalars['UUID'];
}>;

export type CalloutPostStorageConfigQuery = {
  lookup: {
    __typename: 'LookupQueryResults';
    callout?:
      | {
          __typename: 'Callout';
          id: string;
          contributions: Array<{
            __typename: 'CalloutContribution';
            post?:
              | {
                  __typename: 'Post';
                  id: string;
                  profile: {
                    __typename: 'Profile';
                    id: string;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  };
                }
              | undefined;
          }>;
        }
      | undefined;
  };
};

export type GetCalloutPostsQueryVariables = SchemaTypes.Exact<{
  calloutId: SchemaTypes.Scalars['UUID'];
}>;

export type GetCalloutPostsQuery = {
  lookup: {
    __typename: 'LookupQueryResults';
    callout?:
      | {
          __typename: 'Callout';
          id: string;
          contributions: Array<{
            __typename: 'CalloutContribution';
            post?:
              | {
                  __typename: 'Post';
                  id: string;
                  type: string;
                  createdDate: Date;
                  authorization?:
                    | {
                        __typename: 'Authorization';
                        id: string;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  createdBy?:
                    | {
                        __typename: 'User';
                        id: string;
                        profile: {
                          __typename: 'Profile';
                          id: string;
                          displayName: string;
                        };
                      }
                    | undefined;
                  comments: {
                    __typename: 'Room';
                    id: string;
                    messagesCount: number;
                  };
                  profile: {
                    __typename: 'Profile';
                    id: string;
                    url: string;
                    displayName: string;
                    description?: any | undefined;
                    visuals: Array<{
                      __typename: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      allowedTypes: Array<string>;
                      aspectRatio: number;
                      maxHeight: number;
                      maxWidth: number;
                      minHeight: number;
                      minWidth: number;
                      alternativeText?: string | undefined;
                    }>;
                    tagset?:
                      | {
                          __typename: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: SchemaTypes.TagsetType;
                        }
                      | undefined;
                    references?:
                      | Array<{
                          __typename: 'Reference';
                          id: string;
                          name: string;
                          uri: string;
                          description?: string | undefined;
                        }>
                      | undefined;
                  };
                }
              | undefined;
          }>;
        }
      | undefined;
  };
};

export type ContributeTabPostFragment = {
  __typename: 'Post';
  id: string;
  type: string;
  createdDate: Date;
  authorization?:
    | {
        __typename: 'Authorization';
        id: string;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
      }
    | undefined;
  createdBy?:
    | {
        __typename: 'User';
        id: string;
        profile: { __typename: 'Profile'; id: string; displayName: string };
      }
    | undefined;
  comments: { __typename: 'Room'; id: string; messagesCount: number };
  profile: {
    __typename: 'Profile';
    id: string;
    url: string;
    displayName: string;
    description?: any | undefined;
    visuals: Array<{
      __typename: 'Visual';
      id: string;
      uri: string;
      name: string;
      allowedTypes: Array<string>;
      aspectRatio: number;
      maxHeight: number;
      maxWidth: number;
      minHeight: number;
      minWidth: number;
      alternativeText?: string | undefined;
    }>;
    tagset?:
      | {
          __typename: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: SchemaTypes.TagsetType;
        }
      | undefined;
    references?:
      | Array<{
          __typename: 'Reference';
          id: string;
          name: string;
          uri: string;
          description?: string | undefined;
        }>
      | undefined;
  };
};

export type PostCardFragment = {
  __typename: 'Post';
  id: string;
  type: string;
  createdDate: Date;
  createdBy?:
    | {
        __typename: 'User';
        id: string;
        profile: { __typename: 'Profile'; id: string; displayName: string };
      }
    | undefined;
  comments: { __typename: 'Room'; id: string; messagesCount: number };
  profile: {
    __typename: 'Profile';
    id: string;
    url: string;
    displayName: string;
    description?: any | undefined;
    visuals: Array<{
      __typename: 'Visual';
      id: string;
      uri: string;
      name: string;
      allowedTypes: Array<string>;
      aspectRatio: number;
      maxHeight: number;
      maxWidth: number;
      minHeight: number;
      minWidth: number;
      alternativeText?: string | undefined;
    }>;
    tagset?:
      | {
          __typename: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: SchemaTypes.TagsetType;
        }
      | undefined;
    references?:
      | Array<{
          __typename: 'Reference';
          id: string;
          name: string;
          uri: string;
          description?: string | undefined;
        }>
      | undefined;
  };
};

export type VisualFullFragment = {
  __typename: 'Visual';
  id: string;
  uri: string;
  name: string;
  allowedTypes: Array<string>;
  aspectRatio: number;
  maxHeight: number;
  maxWidth: number;
  minHeight: number;
  minWidth: number;
  alternativeText?: string | undefined;
};

export type CalloutWhiateboardStorageConfigQueryVariables = SchemaTypes.Exact<{
  whiteboardId: SchemaTypes.Scalars['UUID_NAMEID'];
  calloutId: SchemaTypes.Scalars['UUID'];
}>;

export type CalloutWhiateboardStorageConfigQuery = {
  lookup: {
    __typename: 'LookupQueryResults';
    callout?:
      | {
          __typename: 'Callout';
          id: string;
          contributions: Array<{
            __typename: 'CalloutContribution';
            whiteboard?:
              | {
                  __typename: 'Whiteboard';
                  id: string;
                  profile: {
                    __typename: 'Profile';
                    id: string;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  };
                }
              | undefined;
          }>;
        }
      | undefined;
  };
};

export type GetCalloutsQueryVariables = SchemaTypes.Exact<{
  collaborationId: SchemaTypes.Scalars['UUID'];
  groups?: SchemaTypes.InputMaybe<
    Array<SchemaTypes.Scalars['String']> | SchemaTypes.Scalars['String']
  >;
  calloutIds?: SchemaTypes.InputMaybe<
    | Array<SchemaTypes.Scalars['UUID_NAMEID']>
    | SchemaTypes.Scalars['UUID_NAMEID']
  >;
}>;

export type GetCalloutsQuery = {
  lookup: {
    __typename: 'LookupQueryResults';
    collaboration?:
      | {
          __typename: 'Collaboration';
          id: string;
          authorization?:
            | {
                __typename: 'Authorization';
                id: string;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          callouts: Array<{
            __typename: 'Callout';
            id: string;
            nameID: string;
            type: SchemaTypes.CalloutType;
            sortOrder: number;
            activity: number;
            visibility: SchemaTypes.CalloutVisibility;
            authorization?:
              | {
                  __typename: 'Authorization';
                  id: string;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            framing: {
              __typename: 'CalloutFraming';
              id: string;
              profile: {
                __typename: 'Profile';
                id: string;
                url: string;
                displayName: string;
                tagsets?:
                  | Array<{
                      __typename: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: SchemaTypes.TagsetType;
                    }>
                  | undefined;
              };
            };
          }>;
        }
      | undefined;
  };
};

export type CollaborationWithCalloutsFragment = {
  __typename: 'Collaboration';
  id: string;
  authorization?:
    | {
        __typename: 'Authorization';
        id: string;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
      }
    | undefined;
  callouts: Array<{
    __typename: 'Callout';
    id: string;
    nameID: string;
    type: SchemaTypes.CalloutType;
    sortOrder: number;
    activity: number;
    visibility: SchemaTypes.CalloutVisibility;
    authorization?:
      | {
          __typename: 'Authorization';
          id: string;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
    framing: {
      __typename: 'CalloutFraming';
      id: string;
      profile: {
        __typename: 'Profile';
        id: string;
        url: string;
        displayName: string;
        tagsets?:
          | Array<{
              __typename: 'Tagset';
              id: string;
              name: string;
              tags: Array<string>;
              allowedValues: Array<string>;
              type: SchemaTypes.TagsetType;
            }>
          | undefined;
      };
    };
  }>;
};

export type CalloutFragment = {
  __typename: 'Callout';
  id: string;
  nameID: string;
  type: SchemaTypes.CalloutType;
  sortOrder: number;
  activity: number;
  visibility: SchemaTypes.CalloutVisibility;
  authorization?:
    | {
        __typename: 'Authorization';
        id: string;
        myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
      }
    | undefined;
  framing: {
    __typename: 'CalloutFraming';
    id: string;
    profile: {
      __typename: 'Profile';
      id: string;
      url: string;
      displayName: string;
      tagsets?:
        | Array<{
            __typename: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: SchemaTypes.TagsetType;
          }>
        | undefined;
    };
  };
};

export type CalloutQueryVariables = SchemaTypes.Exact<{
  collaborationId: SchemaTypes.Scalars['UUID'];
  groups?: SchemaTypes.InputMaybe<
    Array<SchemaTypes.Scalars['String']> | SchemaTypes.Scalars['String']
  >;
  calloutIds?: SchemaTypes.InputMaybe<
    | Array<SchemaTypes.Scalars['UUID_NAMEID']>
    | SchemaTypes.Scalars['UUID_NAMEID']
  >;
}>;

export type CalloutQuery = {
  lookup: {
    __typename: 'LookupQueryResults';
    collaboration?:
      | {
          __typename: 'Collaboration';
          id: string;
          authorization?:
            | {
                __typename: 'Authorization';
                id: string;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          callouts: Array<{
            __typename: 'Callout';
            id: string;
            nameID: string;
            type: SchemaTypes.CalloutType;
            sortOrder: number;
            activity: number;
            visibility: SchemaTypes.CalloutVisibility;
            authorization?:
              | {
                  __typename: 'Authorization';
                  id: string;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            framing: {
              __typename: 'CalloutFraming';
              id: string;
              profile: {
                __typename: 'Profile';
                id: string;
                url: string;
                displayName: string;
                tagsets?:
                  | Array<{
                      __typename: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: SchemaTypes.TagsetType;
                    }>
                  | undefined;
              };
            };
          }>;
        }
      | undefined;
  };
};

export type GetPostDataQueryVariables = SchemaTypes.Exact<{
  postId: SchemaTypes.Scalars['UUID'];
}>;

export type GetPostDataQuery = {
  lookup: {
    post?:
      | {
          id: string;
          nameID: string;
          type: string;
          createdDate: Date;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            visual?:
              | {
                  __typename: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          comments: {
            id: string;
            messagesCount: number;
            messages: Array<{
              id: any;
              message: any;
              sender?: { id: string } | {} | undefined;
            }>;
          };
          createdBy?: { email: string } | undefined;
        }
      | undefined;
  };
};

export type GetPostPerJourneyQueryVariables = SchemaTypes.Exact<{
  spaceId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetPostPerJourneyQuery = {
  space: {
    collaboration: {
      callouts: Array<{
        posts?:
          | Array<{
              id: string;
              nameID: string;
              type: string;
              createdDate: Date;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                visual?:
                  | {
                      __typename: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              comments: {
                id: string;
                messagesCount: number;
                messages: Array<{
                  id: any;
                  message: any;
                  sender?: { id: string } | {} | undefined;
                }>;
              };
              createdBy?: { email: string } | undefined;
            }>
          | undefined;
      }>;
    };
  };
};

export type WhiteboardCalloutStorageConfigQueryVariables = SchemaTypes.Exact<{
  calloutId: SchemaTypes.Scalars['UUID'];
}>;

export type WhiteboardCalloutStorageConfigQuery = {
  lookup: {
    callout?:
      | {
          id: string;
          framing: {
            whiteboard?:
              | {
                  profile: {
                    id: string;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  };
                }
              | undefined;
          };
        }
      | undefined;
  };
};

export type GetPlatformDiscussionsDataQueryVariables = SchemaTypes.Exact<{
  [key: string]: never;
}>;

export type GetPlatformDiscussionsDataQuery = {
  platform: {
    forum: {
      id: string;
      discussions?:
        | Array<{
            id: string;
            category: SchemaTypes.ForumDiscussionCategory;
            createdBy?: string | undefined;
            profile: { displayName: string; description?: any | undefined };
            comments: {
              id: string;
              messagesCount: number;
              messages: Array<{
                id: any;
                message: any;
                threadID?: string | undefined;
                sender?: { id: string } | {} | undefined;
                reactions: Array<{
                  id: any;
                  emoji: any;
                  sender?: { email: string } | undefined;
                }>;
              }>;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
    };
  };
};

export type GetPlatformDiscussionsDataByIdQueryVariables = SchemaTypes.Exact<{
  discussionId: SchemaTypes.Scalars['String'];
}>;

export type GetPlatformDiscussionsDataByIdQuery = {
  platform: {
    forum: {
      id: string;
      discussion?:
        | {
            id: string;
            category: SchemaTypes.ForumDiscussionCategory;
            createdBy?: string | undefined;
            profile: { displayName: string; description?: any | undefined };
            comments: {
              id: string;
              messagesCount: number;
              messages: Array<{
                id: any;
                message: any;
                threadID?: string | undefined;
                sender?: { id: string } | {} | undefined;
                reactions: Array<{
                  id: any;
                  emoji: any;
                  sender?: { email: string } | undefined;
                }>;
              }>;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | undefined;
    };
  };
};

export type GetPlatformForumDataQueryVariables = SchemaTypes.Exact<{
  [key: string]: never;
}>;

export type GetPlatformForumDataQuery = {
  platform: {
    id: string;
    forum: {
      id: string;
      discussions?:
        | Array<{
            id: string;
            comments: {
              id: string;
              messages: Array<{
                message: any;
                reactions: Array<{
                  id: any;
                  emoji: any;
                  sender?: { email: string } | undefined;
                }>;
              }>;
            };
          }>
        | undefined;
    };
  };
};

export type GetSubspaceAvailableMembersQueryVariables = SchemaTypes.Exact<{
  spaceId: SchemaTypes.Scalars['UUID_NAMEID'];
  subspaceId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetSubspaceAvailableMembersQuery = {
  space: {
    id: string;
    subspace: {
      community: {
        id: string;
        memberUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        leadUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        adminUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        memberOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        leadOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        adminOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
    };
  };
};

export type GetSubspaceCommunityQueryVariables = SchemaTypes.Exact<{
  spaceId: SchemaTypes.Scalars['UUID_NAMEID'];
  subspaceId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetSubspaceCommunityQuery = {
  space: {
    id: string;
    subspace: {
      community: {
        id: string;
        memberUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        leadUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        adminUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        memberOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        leadOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        adminOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
    };
  };
};

export type CommunityAvailableMembersQueryVariables = SchemaTypes.Exact<{
  communityId: SchemaTypes.Scalars['UUID'];
  first: SchemaTypes.Scalars['Int'];
  after?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['UUID']>;
  filter?: SchemaTypes.InputMaybe<SchemaTypes.UserFilterInput>;
}>;

export type CommunityAvailableMembersQuery = {
  lookup: {
    __typename: 'LookupQueryResults';
    availableMembers?:
      | {
          __typename: 'Community';
          id: string;
          availableMemberUsers: {
            __typename: 'PaginatedUsers';
            users: Array<{
              __typename: 'User';
              id: string;
              email: string;
              profile: {
                __typename: 'Profile';
                id: string;
                displayName: string;
              };
            }>;
            pageInfo: {
              __typename: 'PageInfo';
              startCursor?: string | undefined;
              endCursor?: string | undefined;
              hasNextPage: boolean;
            };
          };
        }
      | undefined;
  };
};

export type CommunityAvailableMemberUsersFragment = {
  __typename: 'Community';
  id: string;
  availableMemberUsers: {
    __typename: 'PaginatedUsers';
    users: Array<{
      __typename: 'User';
      id: string;
      email: string;
      profile: { __typename: 'Profile'; id: string; displayName: string };
    }>;
    pageInfo: {
      __typename: 'PageInfo';
      startCursor?: string | undefined;
      endCursor?: string | undefined;
      hasNextPage: boolean;
    };
  };
};

export type AvailableUserFragment = {
  __typename: 'User';
  id: string;
  email: string;
  profile: { __typename: 'Profile'; id: string; displayName: string };
};

export type PageInfoFragment = {
  __typename: 'PageInfo';
  startCursor?: string | undefined;
  endCursor?: string | undefined;
  hasNextPage: boolean;
};

export type CommunityApplicationsInvitationsQueryVariables = SchemaTypes.Exact<{
  communityId: SchemaTypes.Scalars['UUID'];
}>;

export type CommunityApplicationsInvitationsQuery = {
  lookup: {
    community?:
      | {
          id: string;
          applications: Array<{
            id: string;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
            questions: Array<{ id: string }>;
            contributor:
              | {
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }
              | {};
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          invitations: Array<{
            id: string;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
            createdBy: {
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            contributor:
              | {
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }
              | {};
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          invitationsExternal: Array<{
            id: string;
            email: string;
            profileCreated: boolean;
            firstName: string;
            lastName: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        }
      | undefined;
  };
};

export type CommunityMembersListQueryVariables = SchemaTypes.Exact<{
  communityId: SchemaTypes.Scalars['UUID'];
  spaceId?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['UUID_NAMEID']>;
  includeSpaceHost?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['Boolean']>;
}>;

export type CommunityMembersListQuery = {
  space?: {
    __typename: 'Space';
    account: {
      __typename: 'Account';
      host?:
        | {
            __typename: 'Organization';
            id: string;
            nameID: string;
            profile: { __typename: 'Profile'; id: string; displayName: string };
          }
        | { __typename: 'User' }
        | { __typename: 'VirtualContributor' }
        | undefined;
    };
  };
  lookup: {
    __typename: 'LookupQueryResults';
    community?:
      | {
          __typename: 'Community';
          id: string;
          memberUsers: Array<{
            __typename: 'User';
            id: string;
            nameID: string;
            email: string;
            firstName: string;
            lastName: string;
            profile: { id: string; displayName: string };
          }>;
          leadUsers: Array<{
            __typename: 'User';
            id: string;
            nameID: string;
            email: string;
            firstName: string;
            lastName: string;
            profile: { id: string; displayName: string };
          }>;
          memberOrganizations: Array<{
            __typename: 'Organization';
            id: string;
            nameID: string;
            profile: { __typename: 'Profile'; id: string; displayName: string };
          }>;
          leadOrganizations: Array<{
            __typename: 'Organization';
            id: string;
            nameID: string;
            profile: { __typename: 'Profile'; id: string; displayName: string };
          }>;
          virtualContributorsInRole: Array<{
            __typename: 'VirtualContributor';
            id: string;
            nameID: string;
            profile: { id: string; displayName: string };
          }>;
        }
      | undefined;
  };
};

export type OrganizationDetailsFragment = {
  __typename: 'Organization';
  id: string;
  nameID: string;
  profile: { __typename: 'Profile'; id: string; displayName: string };
};

export type CommunityMembersDetailsFragment = {
  __typename: 'Community';
  id: string;
  memberUsers: Array<{
    __typename: 'User';
    id: string;
    nameID: string;
    email: string;
    firstName: string;
    lastName: string;
    profile: { id: string; displayName: string };
  }>;
  leadUsers: Array<{
    __typename: 'User';
    id: string;
    nameID: string;
    email: string;
    firstName: string;
    lastName: string;
    profile: { id: string; displayName: string };
  }>;
  memberOrganizations: Array<{
    __typename: 'Organization';
    id: string;
    nameID: string;
    profile: { __typename: 'Profile'; id: string; displayName: string };
  }>;
  leadOrganizations: Array<{
    __typename: 'Organization';
    id: string;
    nameID: string;
    profile: { __typename: 'Profile'; id: string; displayName: string };
  }>;
  virtualContributorsInRole: Array<{
    __typename: 'VirtualContributor';
    id: string;
    nameID: string;
    profile: { id: string; displayName: string };
  }>;
};

export type CommunityMemberUserFragment = {
  __typename: 'User';
  id: string;
  nameID: string;
  email: string;
  firstName: string;
  lastName: string;
  profile: { id: string; displayName: string };
};

export type CommunityMemberVirtualContributorFragment = {
  __typename: 'VirtualContributor';
  id: string;
  nameID: string;
  profile: { id: string; displayName: string };
};

export type CommunityUserPrivilegesQueryVariables = SchemaTypes.Exact<{
  communityId: SchemaTypes.Scalars['UUID'];
}>;

export type CommunityUserPrivilegesQuery = {
  lookup: {
    community?:
      | {
          id: string;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }
      | undefined;
  };
};

export type CommunityUserPrivilegesToChallengeQueryVariables = SchemaTypes.Exact<{
  spaceId: SchemaTypes.Scalars['UUID_NAMEID'];
  subspaceId: SchemaTypes.Scalars['UUID_NAMEID'];
  includeDetails?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['Boolean']>;
}>;

export type CommunityUserPrivilegesToChallengeQuery = {
  space: {
    id: string;
    subspace: {
      id: string;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      profile: { id: string; displayName: string };
      community: {
        id: string;
        myMembershipStatus?: SchemaTypes.CommunityMembershipStatus | undefined;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        communication: {
          id: string;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
      };
    };
  };
};

export type CommunityDetailsFragment = {
  id: string;
  myMembershipStatus?: SchemaTypes.CommunityMembershipStatus | undefined;
  authorization?:
    | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
    | undefined;
  communication: {
    id: string;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type CommunityUserPrivilegesToOpportunityQueryVariables = SchemaTypes.Exact<{
  spaceId: SchemaTypes.Scalars['UUID_NAMEID'];
  opportunityId: SchemaTypes.Scalars['UUID_NAMEID'];
  includeDetails?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['Boolean']>;
}>;

export type CommunityUserPrivilegesToOpportunityQuery = {
  space: { id: string };
};

export type CommunityUserPrivilegesToSpaceQueryVariables = SchemaTypes.Exact<{
  spaceNameId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type CommunityUserPrivilegesToSpaceQuery = {
  space: {
    id: string;
    spaceCommunity: {
      id: string;
      myMembershipStatus?: SchemaTypes.CommunityMembershipStatus | undefined;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
  };
};

export type GetOpportunityAvailableMembersQueryVariables = SchemaTypes.Exact<{
  spaceId: SchemaTypes.Scalars['UUID_NAMEID'];
  opportunityId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetOpportunityAvailableMembersQuery = { space: { id: string } };

export type GetSpaceAvailableMembersQueryVariables = SchemaTypes.Exact<{
  spaceId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetSpaceAvailableMembersQuery = {
  space: {
    id: string;
    community: {
      id: string;
      memberUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      leadUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      adminUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      memberOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      leadOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      adminOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
  };
};

export type GetSpaceCommunityQueryVariables = SchemaTypes.Exact<{
  spaceId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetSpaceCommunityQuery = {
  space: {
    id: string;
    community: {
      id: string;
      memberUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      leadUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      adminUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      memberOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      leadOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      adminOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
  };
};

export type GetSpaceInvitationsQueryVariables = SchemaTypes.Exact<{
  spaceId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetSpaceInvitationsQuery = {
  space: {
    id: string;
    community: {
      invitations: Array<{
        id: string;
        lifecycle: {
          id: string;
          state?: string | undefined;
          nextEvents?: Array<string> | undefined;
          stateIsFinal: boolean;
          templateName?: string | undefined;
        };
        createdBy: {
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        contributor:
          | {
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }
          | {};
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      invitationsExternal: Array<{
        id: string;
        email: string;
        profileCreated: boolean;
        firstName: string;
        lastName: string;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
  };
};

export type PendingMembershipsSpaceQueryVariables = SchemaTypes.Exact<{
  spaceId: SchemaTypes.Scalars['UUID_NAMEID'];
  fetchDetails?: SchemaTypes.Scalars['Boolean'];
}>;

export type PendingMembershipsSpaceQuery = {
  space: {
    __typename: 'Space';
    id: string;
    nameID: string;
    profile: {
      tagline: string;
      id: string;
      displayName: string;
      tagset?: { id: string; tags: Array<string> } | undefined;
      cardBanner?: { id: string; uri: string } | undefined;
    };
  };
};

export type PendingMembershipsJourneyProfileFragment = {
  tagline: string;
  id: string;
  displayName: string;
  tagset?: { id: string; tags: Array<string> } | undefined;
  cardBanner?: { id: string; uri: string } | undefined;
};

export type ConfigurationQueryVariables = SchemaTypes.Exact<{
  [key: string]: never;
}>;

export type ConfigurationQuery = {
  platform: {
    configuration: {
      authentication: {
        providers: Array<{
          name: string;
          label: string;
          icon: string;
          enabled: boolean;
          config: {
            __typename: 'OryConfig';
            issuer: string;
            kratosPublicBaseURL: string;
          };
        }>;
      };
    };
  };
};

export type GetContextDataQueryVariables = SchemaTypes.Exact<{
  spaceId: SchemaTypes.Scalars['UUID_NAMEID'];
  subspaceId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetContextDataQuery = {
  space: {
    subspace: {
      id: string;
      nameID: string;
      metrics?: Array<{ id: string; name: string; value: string }> | undefined;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        storageBucket: {
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          parentEntity?:
            | { displayName: string; type: SchemaTypes.ProfileType }
            | undefined;
          documents: Array<{
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        };
      };
      collaboration: {
        id: string;
        relations?:
          | Array<{
              id: string;
              actorName: string;
              actorRole: string;
              actorType: string;
              description: string;
              type: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        callouts: Array<{
          id: string;
          activity: number;
          nameID: string;
          publishedDate?: number | undefined;
          sortOrder: number;
          type: SchemaTypes.CalloutType;
          visibility: SchemaTypes.CalloutVisibility;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          comments?:
            | {
                id: string;
                messagesCount: number;
                messages: Array<{ message: any }>;
              }
            | undefined;
          contributionPolicy: {
            allowedContributionTypes: Array<
              SchemaTypes.CalloutContributionType
            >;
            id: string;
            state: SchemaTypes.CalloutState;
          };
          contributions: Array<{
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            createdBy?: { email: string } | undefined;
            link?:
              | {
                  id: string;
                  uri: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  };
                }
              | undefined;
            post?:
              | {
                  id: string;
                  nameID: string;
                  type: string;
                  createdDate: Date;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  comments: {
                    id: string;
                    messagesCount: number;
                    messages: Array<{
                      id: any;
                      message: any;
                      sender?: { id: string } | {} | undefined;
                    }>;
                  };
                  createdBy?: { email: string } | undefined;
                }
              | undefined;
            whiteboard?:
              | {
                  id: string;
                  nameID: string;
                  content: any;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          }>;
          createdBy?: { email: string } | undefined;
          framing: {
            id: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            whiteboard?:
              | {
                  nameID: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          };
          publishedBy?: { email: string } | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        innovationFlow: {
          id: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          currentState: { description: any; displayName: string };
          states: Array<{ description: any; displayName: string }>;
        };
      };
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      community: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        groups: Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>;
        applications: Array<{
          id: string;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
          questions: Array<{ id: string }>;
          contributor:
            | {
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }
            | {};
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        communication: {
          id: string;
          updates: {
            id: string;
            messages: Array<{
              id: any;
              message: any;
              threadID?: string | undefined;
              sender?: { id: string } | {} | undefined;
              reactions: Array<{
                id: any;
                emoji: any;
                sender?: { email: string } | undefined;
              }>;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        memberUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        leadUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        adminUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        memberOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        leadOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        adminOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
      context: {
        id: string;
        vision?: any | undefined;
        impact?: any | undefined;
        who?: any | undefined;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
    };
  };
};

export type GetChallengeDocumentAndStorageDataQueryVariables = SchemaTypes.Exact<{
  ID: SchemaTypes.Scalars['UUID_NAMEID'];
  challengeID: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetChallengeDocumentAndStorageDataQuery = {
  space: {
    subspace: {
      profile: {
        storageBucket: {
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          parentEntity?:
            | {
                displayName: string;
                id: string;
                type: SchemaTypes.ProfileType;
                url: string;
              }
            | undefined;
          documents: Array<{
            id: string;
            displayName: string;
            url: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            createdBy?: { email: string } | undefined;
          }>;
        };
        visuals: Array<{
          id: string;
          name: string;
          uri: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
    };
  };
};

export type PrivateSpaceDataQueryVariables = SchemaTypes.Exact<{
  nameId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type PrivateSpaceDataQuery = {
  space: {
    nameID: string;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  };
};

export type GetSpaceDataQueryVariables = SchemaTypes.Exact<{
  spaceId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetSpaceDataQuery = {
  space: {
    id: string;
    nameID: string;
    metrics?: Array<{ id: string; name: string; value: string }> | undefined;
    account: {
      id: string;
      spaceID: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      host?:
        | {
            id: string;
            nameID: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | {
            id: string;
            nameID: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | {
            id: string;
            nameID: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | undefined;
      license: {
        visibility: SchemaTypes.SpaceVisibility;
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      library?:
        | {
            id: string;
            innovationFlowTemplates: Array<{
              id: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
              states: Array<{ description: any; displayName: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            postTemplates: Array<{
              id: string;
              defaultDescription: any;
              type: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            whiteboardTemplates: Array<{
              id: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }
        | undefined;
      defaults?:
        | {
            id: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            innovationFlowTemplate?:
              | {
                  id: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  };
                  states: Array<{ description: any; displayName: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }
              | undefined;
          }
        | undefined;
    };
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
    context: {
      id: string;
      vision?: any | undefined;
      impact?: any | undefined;
      who?: any | undefined;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    community: {
      id: string;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      groups: Array<{
        id: string;
        members?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile?:
          | {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            }
          | undefined;
      }>;
      applications: Array<{
        id: string;
        lifecycle: {
          id: string;
          state?: string | undefined;
          nextEvents?: Array<string> | undefined;
          stateIsFinal: boolean;
          templateName?: string | undefined;
        };
        questions: Array<{ id: string }>;
        contributor:
          | {
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }
          | {};
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      communication: {
        id: string;
        updates: {
          id: string;
          messages: Array<{
            id: any;
            message: any;
            threadID?: string | undefined;
            sender?: { id: string } | {} | undefined;
            reactions: Array<{
              id: any;
              emoji: any;
              sender?: { email: string } | undefined;
            }>;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      memberUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      leadUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      adminUsers: Array<{
        id: string;
        nameID: string;
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        accountUpn: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        agent: {
          credentials?:
            | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
            | undefined;
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      memberOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      leadOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      adminOrganizations: Array<{
        id: string;
        nameID: string;
        legalEntityName?: string | undefined;
        domain?: string | undefined;
        website?: string | undefined;
        contactEmail?: string | undefined;
        groups?:
          | Array<{
              id: string;
              members?:
                | Array<{
                    id: string;
                    nameID: string;
                    firstName: string;
                    lastName: string;
                    email: string;
                    phone: string;
                    accountUpn: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      visuals: Array<{ id: string; name: string; uri: string }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    agent: {
                      credentials?:
                        | Array<{
                            resourceID: string;
                            type: SchemaTypes.CredentialType;
                          }>
                        | undefined;
                    };
                    preferences: Array<{
                      id: string;
                      value: string;
                      definition: {
                        type: SchemaTypes.PreferenceType;
                        id: string;
                        displayName: string;
                        description: string;
                        group: string;
                      };
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              profile?:
                | {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  }
                | undefined;
            }>
          | undefined;
        associates?:
          | Array<{
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          visuals: Array<{ id: string; name: string; uri: string }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        verification: {
          id: string;
          status: SchemaTypes.OrganizationVerificationEnum;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
        };
        preferences: Array<{
          id: string;
          value: string;
          definition: {
            type: SchemaTypes.PreferenceType;
            id: string;
            displayName: string;
            description: string;
            group: string;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
    collaboration: {
      id: string;
      relations?:
        | Array<{
            id: string;
            actorName: string;
            actorRole: string;
            actorType: string;
            description: string;
            type: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      callouts: Array<{
        id: string;
        activity: number;
        nameID: string;
        publishedDate?: number | undefined;
        sortOrder: number;
        type: SchemaTypes.CalloutType;
        visibility: SchemaTypes.CalloutVisibility;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        comments?:
          | {
              id: string;
              messagesCount: number;
              messages: Array<{ message: any }>;
            }
          | undefined;
        contributionPolicy: {
          allowedContributionTypes: Array<SchemaTypes.CalloutContributionType>;
          id: string;
          state: SchemaTypes.CalloutState;
        };
        contributions: Array<{
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          createdBy?: { email: string } | undefined;
          link?:
            | {
                id: string;
                uri: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                };
              }
            | undefined;
          post?:
            | {
                id: string;
                nameID: string;
                type: string;
                createdDate: Date;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  visual?:
                    | {
                        __typename: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                comments: {
                  id: string;
                  messagesCount: number;
                  messages: Array<{
                    id: any;
                    message: any;
                    sender?: { id: string } | {} | undefined;
                  }>;
                };
                createdBy?: { email: string } | undefined;
              }
            | undefined;
          whiteboard?:
            | {
                id: string;
                nameID: string;
                content: any;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  visual?:
                    | {
                        __typename: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        }>;
        createdBy?: { email: string } | undefined;
        framing: {
          id: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
          whiteboard?:
            | {
                nameID: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  visual?:
                    | {
                        __typename: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        };
        publishedBy?: { email: string } | undefined;
      }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      innovationFlow: {
        id: string;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        currentState: { description: any; displayName: string };
        states: Array<{ description: any; displayName: string }>;
      };
    };
    subspaces: Array<{
      id: string;
      nameID: string;
      metrics?: Array<{ id: string; name: string; value: string }> | undefined;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        storageBucket: {
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          parentEntity?:
            | { displayName: string; type: SchemaTypes.ProfileType }
            | undefined;
          documents: Array<{
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        };
      };
      collaboration: {
        id: string;
        relations?:
          | Array<{
              id: string;
              actorName: string;
              actorRole: string;
              actorType: string;
              description: string;
              type: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        callouts: Array<{
          id: string;
          activity: number;
          nameID: string;
          publishedDate?: number | undefined;
          sortOrder: number;
          type: SchemaTypes.CalloutType;
          visibility: SchemaTypes.CalloutVisibility;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          comments?:
            | {
                id: string;
                messagesCount: number;
                messages: Array<{ message: any }>;
              }
            | undefined;
          contributionPolicy: {
            allowedContributionTypes: Array<
              SchemaTypes.CalloutContributionType
            >;
            id: string;
            state: SchemaTypes.CalloutState;
          };
          contributions: Array<{
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            createdBy?: { email: string } | undefined;
            link?:
              | {
                  id: string;
                  uri: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  };
                }
              | undefined;
            post?:
              | {
                  id: string;
                  nameID: string;
                  type: string;
                  createdDate: Date;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  comments: {
                    id: string;
                    messagesCount: number;
                    messages: Array<{
                      id: any;
                      message: any;
                      sender?: { id: string } | {} | undefined;
                    }>;
                  };
                  createdBy?: { email: string } | undefined;
                }
              | undefined;
            whiteboard?:
              | {
                  id: string;
                  nameID: string;
                  content: any;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          }>;
          createdBy?: { email: string } | undefined;
          framing: {
            id: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            whiteboard?:
              | {
                  nameID: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          };
          publishedBy?: { email: string } | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        innovationFlow: {
          id: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          currentState: { description: any; displayName: string };
          states: Array<{ description: any; displayName: string }>;
        };
      };
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      community: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        groups: Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>;
        applications: Array<{
          id: string;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
          questions: Array<{ id: string }>;
          contributor:
            | {
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }
            | {};
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        communication: {
          id: string;
          updates: {
            id: string;
            messages: Array<{
              id: any;
              message: any;
              threadID?: string | undefined;
              sender?: { id: string } | {} | undefined;
              reactions: Array<{
                id: any;
                emoji: any;
                sender?: { email: string } | undefined;
              }>;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        memberUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        leadUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        adminUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        memberOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        leadOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        adminOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
      context: {
        id: string;
        vision?: any | undefined;
        impact?: any | undefined;
        who?: any | undefined;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
    }>;
    settings: {
      privacy: {
        mode: SchemaTypes.SpacePrivacyMode;
        allowPlatformSupportAsAdmin: boolean;
      };
      membership: {
        allowSubspaceAdminsToInviteMembers: boolean;
        policy: SchemaTypes.CommunityMembershipPolicy;
        trustedOrganizations: Array<string>;
      };
      collaboration: {
        allowMembersToCreateCallouts: boolean;
        allowMembersToCreateSubspaces: boolean;
        inheritMembershipRights: boolean;
      };
    };
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      storageBucket: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        parentEntity?:
          | { displayName: string; type: SchemaTypes.ProfileType }
          | undefined;
        documents: Array<{
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
    };
  };
};

export type GetSpaceDocumentAndStorageDataQueryVariables = SchemaTypes.Exact<{
  ID: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetSpaceDocumentAndStorageDataQuery = {
  space: {
    profile: {
      storageBucket: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        parentEntity?:
          | {
              displayName: string;
              id: string;
              type: SchemaTypes.ProfileType;
              url: string;
            }
          | undefined;
        documents: Array<{
          id: string;
          displayName: string;
          url: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          createdBy?: { email: string } | undefined;
        }>;
      };
      visuals: Array<{
        id: string;
        name: string;
        uri: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
  };
};

export type GetSpacesDataQueryVariables = SchemaTypes.Exact<{
  [key: string]: never;
}>;

export type GetSpacesDataQuery = { spaces: Array<{ id: string }> };

export type GetSpacesFilteredByVisibilityWithAccessQueryVariables = SchemaTypes.Exact<{
  spaceIDs?: SchemaTypes.InputMaybe<
    Array<SchemaTypes.Scalars['UUID']> | SchemaTypes.Scalars['UUID']
  >;
  spaceFilter?: SchemaTypes.InputMaybe<SchemaTypes.SpaceFilterInput>;
}>;

export type GetSpacesFilteredByVisibilityWithAccessQuery = {
  spaces: Array<{
    nameID: string;
    account: {
      license: {
        visibility: SchemaTypes.SpaceVisibility;
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
    };
    subspaces: Array<{ id: string }>;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  }>;
};

export type GetSubspacePageQueryVariables = SchemaTypes.Exact<{
  spaceId: SchemaTypes.Scalars['UUID_NAMEID'];
  subspaceId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetSubspacePageQuery = {
  space: {
    subspace: {
      id: string;
      nameID: string;
      metrics?: Array<{ id: string; name: string; value: string }> | undefined;
      account: {
        id: string;
        spaceID: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        host?:
          | {
              id: string;
              nameID: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }
          | {
              id: string;
              nameID: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }
          | {
              id: string;
              nameID: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }
          | undefined;
        license: {
          visibility: SchemaTypes.SpaceVisibility;
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        library?:
          | {
              id: string;
              innovationFlowTemplates: Array<{
                id: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                };
                states: Array<{ description: any; displayName: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              postTemplates: Array<{
                id: string;
                defaultDescription: any;
                type: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              whiteboardTemplates: Array<{
                id: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }
          | undefined;
        defaults?:
          | {
              id: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              innovationFlowTemplate?:
                | {
                    id: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    };
                    states: Array<{ description: any; displayName: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }
                | undefined;
            }
          | undefined;
      };
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      context: {
        id: string;
        vision?: any | undefined;
        impact?: any | undefined;
        who?: any | undefined;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      community: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        groups: Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>;
        applications: Array<{
          id: string;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
          questions: Array<{ id: string }>;
          contributor:
            | {
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }
            | {};
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        communication: {
          id: string;
          updates: {
            id: string;
            messages: Array<{
              id: any;
              message: any;
              threadID?: string | undefined;
              sender?: { id: string } | {} | undefined;
              reactions: Array<{
                id: any;
                emoji: any;
                sender?: { email: string } | undefined;
              }>;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        memberUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        leadUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        adminUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        memberOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        leadOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        adminOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
      collaboration: {
        id: string;
        relations?:
          | Array<{
              id: string;
              actorName: string;
              actorRole: string;
              actorType: string;
              description: string;
              type: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        callouts: Array<{
          id: string;
          activity: number;
          nameID: string;
          publishedDate?: number | undefined;
          sortOrder: number;
          type: SchemaTypes.CalloutType;
          visibility: SchemaTypes.CalloutVisibility;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          comments?:
            | {
                id: string;
                messagesCount: number;
                messages: Array<{ message: any }>;
              }
            | undefined;
          contributionPolicy: {
            allowedContributionTypes: Array<
              SchemaTypes.CalloutContributionType
            >;
            id: string;
            state: SchemaTypes.CalloutState;
          };
          contributions: Array<{
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            createdBy?: { email: string } | undefined;
            link?:
              | {
                  id: string;
                  uri: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  };
                }
              | undefined;
            post?:
              | {
                  id: string;
                  nameID: string;
                  type: string;
                  createdDate: Date;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  comments: {
                    id: string;
                    messagesCount: number;
                    messages: Array<{
                      id: any;
                      message: any;
                      sender?: { id: string } | {} | undefined;
                    }>;
                  };
                  createdBy?: { email: string } | undefined;
                }
              | undefined;
            whiteboard?:
              | {
                  id: string;
                  nameID: string;
                  content: any;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          }>;
          createdBy?: { email: string } | undefined;
          framing: {
            id: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            whiteboard?:
              | {
                  nameID: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          };
          publishedBy?: { email: string } | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        innovationFlow: {
          id: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          currentState: { description: any; displayName: string };
          states: Array<{ description: any; displayName: string }>;
        };
      };
      subspaces: Array<{
        id: string;
        nameID: string;
        metrics?:
          | Array<{ id: string; name: string; value: string }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
        };
        collaboration: {
          id: string;
          relations?:
            | Array<{
                id: string;
                actorName: string;
                actorRole: string;
                actorType: string;
                description: string;
                type: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          callouts: Array<{
            id: string;
            activity: number;
            nameID: string;
            publishedDate?: number | undefined;
            sortOrder: number;
            type: SchemaTypes.CalloutType;
            visibility: SchemaTypes.CalloutVisibility;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            comments?:
              | {
                  id: string;
                  messagesCount: number;
                  messages: Array<{ message: any }>;
                }
              | undefined;
            contributionPolicy: {
              allowedContributionTypes: Array<
                SchemaTypes.CalloutContributionType
              >;
              id: string;
              state: SchemaTypes.CalloutState;
            };
            contributions: Array<{
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              createdBy?: { email: string } | undefined;
              link?:
                | {
                    id: string;
                    uri: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    };
                  }
                | undefined;
              post?:
                | {
                    id: string;
                    nameID: string;
                    type: string;
                    createdDate: Date;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      visual?:
                        | {
                            __typename: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            authorization?:
                              | {
                                  anonymousReadAccess: boolean;
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    comments: {
                      id: string;
                      messagesCount: number;
                      messages: Array<{
                        id: any;
                        message: any;
                        sender?: { id: string } | {} | undefined;
                      }>;
                    };
                    createdBy?: { email: string } | undefined;
                  }
                | undefined;
              whiteboard?:
                | {
                    id: string;
                    nameID: string;
                    content: any;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      visual?:
                        | {
                            __typename: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            authorization?:
                              | {
                                  anonymousReadAccess: boolean;
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                  }
                | undefined;
            }>;
            createdBy?: { email: string } | undefined;
            framing: {
              id: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
              whiteboard?:
                | {
                    nameID: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      visual?:
                        | {
                            __typename: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            authorization?:
                              | {
                                  anonymousReadAccess: boolean;
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                  }
                | undefined;
            };
            publishedBy?: { email: string } | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          innovationFlow: {
            id: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            currentState: { description: any; displayName: string };
            states: Array<{ description: any; displayName: string }>;
          };
        };
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        community: {
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          groups: Array<{
            id: string;
            members?:
              | Array<{
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            profile?:
              | {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                }
              | undefined;
          }>;
          applications: Array<{
            id: string;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
            questions: Array<{ id: string }>;
            contributor:
              | {
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }
              | {};
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          communication: {
            id: string;
            updates: {
              id: string;
              messages: Array<{
                id: any;
                message: any;
                threadID?: string | undefined;
                sender?: { id: string } | {} | undefined;
                reactions: Array<{
                  id: any;
                  emoji: any;
                  sender?: { email: string } | undefined;
                }>;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          memberUsers: Array<{
            id: string;
            nameID: string;
            firstName: string;
            lastName: string;
            email: string;
            phone: string;
            accountUpn: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            agent: {
              credentials?:
                | Array<{
                    resourceID: string;
                    type: SchemaTypes.CredentialType;
                  }>
                | undefined;
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          leadUsers: Array<{
            id: string;
            nameID: string;
            firstName: string;
            lastName: string;
            email: string;
            phone: string;
            accountUpn: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            agent: {
              credentials?:
                | Array<{
                    resourceID: string;
                    type: SchemaTypes.CredentialType;
                  }>
                | undefined;
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          adminUsers: Array<{
            id: string;
            nameID: string;
            firstName: string;
            lastName: string;
            email: string;
            phone: string;
            accountUpn: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            agent: {
              credentials?:
                | Array<{
                    resourceID: string;
                    type: SchemaTypes.CredentialType;
                  }>
                | undefined;
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          memberOrganizations: Array<{
            id: string;
            nameID: string;
            legalEntityName?: string | undefined;
            domain?: string | undefined;
            website?: string | undefined;
            contactEmail?: string | undefined;
            groups?:
              | Array<{
                  id: string;
                  members?:
                    | Array<{
                        id: string;
                        nameID: string;
                        firstName: string;
                        lastName: string;
                        email: string;
                        phone: string;
                        accountUpn: string;
                        profile: {
                          id: string;
                          displayName: string;
                          description?: any | undefined;
                          tagline: string;
                          references?:
                            | Array<{
                                id: string;
                                name: string;
                                uri: string;
                                authorization?:
                                  | {
                                      myPrivileges?:
                                        | Array<
                                            SchemaTypes.AuthorizationPrivilege
                                          >
                                        | undefined;
                                    }
                                  | undefined;
                              }>
                            | undefined;
                          tagsets?:
                            | Array<{
                                id: string;
                                name: string;
                                tags: Array<string>;
                                authorization?:
                                  | {
                                      myPrivileges?:
                                        | Array<
                                            SchemaTypes.AuthorizationPrivilege
                                          >
                                        | undefined;
                                    }
                                  | undefined;
                              }>
                            | undefined;
                          location?:
                            | { country: string; city: string }
                            | undefined;
                          visuals: Array<{
                            id: string;
                            name: string;
                            uri: string;
                          }>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        };
                        agent: {
                          credentials?:
                            | Array<{
                                resourceID: string;
                                type: SchemaTypes.CredentialType;
                              }>
                            | undefined;
                        };
                        preferences: Array<{
                          id: string;
                          value: string;
                          definition: {
                            type: SchemaTypes.PreferenceType;
                            id: string;
                            displayName: string;
                            description: string;
                            group: string;
                          };
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  profile?:
                    | {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        storageBucket: {
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                          parentEntity?:
                            | {
                                displayName: string;
                                type: SchemaTypes.ProfileType;
                              }
                            | undefined;
                          documents: Array<{
                            id: string;
                            authorization?:
                              | {
                                  anonymousReadAccess: boolean;
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>;
                        };
                      }
                    | undefined;
                }>
              | undefined;
            associates?:
              | Array<{
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            verification: {
              id: string;
              status: SchemaTypes.OrganizationVerificationEnum;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              lifecycle: {
                id: string;
                state?: string | undefined;
                nextEvents?: Array<string> | undefined;
                stateIsFinal: boolean;
                templateName?: string | undefined;
              };
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          leadOrganizations: Array<{
            id: string;
            nameID: string;
            legalEntityName?: string | undefined;
            domain?: string | undefined;
            website?: string | undefined;
            contactEmail?: string | undefined;
            groups?:
              | Array<{
                  id: string;
                  members?:
                    | Array<{
                        id: string;
                        nameID: string;
                        firstName: string;
                        lastName: string;
                        email: string;
                        phone: string;
                        accountUpn: string;
                        profile: {
                          id: string;
                          displayName: string;
                          description?: any | undefined;
                          tagline: string;
                          references?:
                            | Array<{
                                id: string;
                                name: string;
                                uri: string;
                                authorization?:
                                  | {
                                      myPrivileges?:
                                        | Array<
                                            SchemaTypes.AuthorizationPrivilege
                                          >
                                        | undefined;
                                    }
                                  | undefined;
                              }>
                            | undefined;
                          tagsets?:
                            | Array<{
                                id: string;
                                name: string;
                                tags: Array<string>;
                                authorization?:
                                  | {
                                      myPrivileges?:
                                        | Array<
                                            SchemaTypes.AuthorizationPrivilege
                                          >
                                        | undefined;
                                    }
                                  | undefined;
                              }>
                            | undefined;
                          location?:
                            | { country: string; city: string }
                            | undefined;
                          visuals: Array<{
                            id: string;
                            name: string;
                            uri: string;
                          }>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        };
                        agent: {
                          credentials?:
                            | Array<{
                                resourceID: string;
                                type: SchemaTypes.CredentialType;
                              }>
                            | undefined;
                        };
                        preferences: Array<{
                          id: string;
                          value: string;
                          definition: {
                            type: SchemaTypes.PreferenceType;
                            id: string;
                            displayName: string;
                            description: string;
                            group: string;
                          };
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  profile?:
                    | {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        storageBucket: {
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                          parentEntity?:
                            | {
                                displayName: string;
                                type: SchemaTypes.ProfileType;
                              }
                            | undefined;
                          documents: Array<{
                            id: string;
                            authorization?:
                              | {
                                  anonymousReadAccess: boolean;
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>;
                        };
                      }
                    | undefined;
                }>
              | undefined;
            associates?:
              | Array<{
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            verification: {
              id: string;
              status: SchemaTypes.OrganizationVerificationEnum;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              lifecycle: {
                id: string;
                state?: string | undefined;
                nextEvents?: Array<string> | undefined;
                stateIsFinal: boolean;
                templateName?: string | undefined;
              };
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          adminOrganizations: Array<{
            id: string;
            nameID: string;
            legalEntityName?: string | undefined;
            domain?: string | undefined;
            website?: string | undefined;
            contactEmail?: string | undefined;
            groups?:
              | Array<{
                  id: string;
                  members?:
                    | Array<{
                        id: string;
                        nameID: string;
                        firstName: string;
                        lastName: string;
                        email: string;
                        phone: string;
                        accountUpn: string;
                        profile: {
                          id: string;
                          displayName: string;
                          description?: any | undefined;
                          tagline: string;
                          references?:
                            | Array<{
                                id: string;
                                name: string;
                                uri: string;
                                authorization?:
                                  | {
                                      myPrivileges?:
                                        | Array<
                                            SchemaTypes.AuthorizationPrivilege
                                          >
                                        | undefined;
                                    }
                                  | undefined;
                              }>
                            | undefined;
                          tagsets?:
                            | Array<{
                                id: string;
                                name: string;
                                tags: Array<string>;
                                authorization?:
                                  | {
                                      myPrivileges?:
                                        | Array<
                                            SchemaTypes.AuthorizationPrivilege
                                          >
                                        | undefined;
                                    }
                                  | undefined;
                              }>
                            | undefined;
                          location?:
                            | { country: string; city: string }
                            | undefined;
                          visuals: Array<{
                            id: string;
                            name: string;
                            uri: string;
                          }>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        };
                        agent: {
                          credentials?:
                            | Array<{
                                resourceID: string;
                                type: SchemaTypes.CredentialType;
                              }>
                            | undefined;
                        };
                        preferences: Array<{
                          id: string;
                          value: string;
                          definition: {
                            type: SchemaTypes.PreferenceType;
                            id: string;
                            displayName: string;
                            description: string;
                            group: string;
                          };
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  profile?:
                    | {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        storageBucket: {
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                          parentEntity?:
                            | {
                                displayName: string;
                                type: SchemaTypes.ProfileType;
                              }
                            | undefined;
                          documents: Array<{
                            id: string;
                            authorization?:
                              | {
                                  anonymousReadAccess: boolean;
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>;
                        };
                      }
                    | undefined;
                }>
              | undefined;
            associates?:
              | Array<{
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            verification: {
              id: string;
              status: SchemaTypes.OrganizationVerificationEnum;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              lifecycle: {
                id: string;
                state?: string | undefined;
                nextEvents?: Array<string> | undefined;
                stateIsFinal: boolean;
                templateName?: string | undefined;
              };
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        };
        context: {
          id: string;
          vision?: any | undefined;
          impact?: any | undefined;
          who?: any | undefined;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
      }>;
      settings: {
        privacy: {
          mode: SchemaTypes.SpacePrivacyMode;
          allowPlatformSupportAsAdmin: boolean;
        };
        membership: {
          allowSubspaceAdminsToInviteMembers: boolean;
          policy: SchemaTypes.CommunityMembershipPolicy;
          trustedOrganizations: Array<string>;
        };
        collaboration: {
          allowMembersToCreateCallouts: boolean;
          allowMembersToCreateSubspaces: boolean;
          inheritMembershipRights: boolean;
        };
      };
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        storageBucket: {
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          parentEntity?:
            | { displayName: string; type: SchemaTypes.ProfileType }
            | undefined;
          documents: Array<{
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        };
      };
    };
  };
};

export type GetSubspacesDataQueryVariables = SchemaTypes.Exact<{
  spaceId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetSubspacesDataQuery = {
  space: {
    id: string;
    subspaces: Array<{
      id: string;
      nameID: string;
      metrics?: Array<{ id: string; name: string; value: string }> | undefined;
      account: {
        id: string;
        spaceID: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        host?:
          | {
              id: string;
              nameID: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }
          | {
              id: string;
              nameID: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }
          | {
              id: string;
              nameID: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }
          | undefined;
        license: {
          visibility: SchemaTypes.SpaceVisibility;
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        library?:
          | {
              id: string;
              innovationFlowTemplates: Array<{
                id: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                };
                states: Array<{ description: any; displayName: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              postTemplates: Array<{
                id: string;
                defaultDescription: any;
                type: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              whiteboardTemplates: Array<{
                id: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }
          | undefined;
        defaults?:
          | {
              id: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              innovationFlowTemplate?:
                | {
                    id: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    };
                    states: Array<{ description: any; displayName: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }
                | undefined;
            }
          | undefined;
      };
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      context: {
        id: string;
        vision?: any | undefined;
        impact?: any | undefined;
        who?: any | undefined;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      community: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        groups: Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>;
        applications: Array<{
          id: string;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
          questions: Array<{ id: string }>;
          contributor:
            | {
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }
            | {};
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        communication: {
          id: string;
          updates: {
            id: string;
            messages: Array<{
              id: any;
              message: any;
              threadID?: string | undefined;
              sender?: { id: string } | {} | undefined;
              reactions: Array<{
                id: any;
                emoji: any;
                sender?: { email: string } | undefined;
              }>;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
        memberUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        leadUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        adminUsers: Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        memberOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        leadOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
        adminOrganizations: Array<{
          id: string;
          nameID: string;
          legalEntityName?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          contactEmail?: string | undefined;
          groups?:
            | Array<{
                id: string;
                members?:
                  | Array<{
                      id: string;
                      nameID: string;
                      firstName: string;
                      lastName: string;
                      email: string;
                      phone: string;
                      accountUpn: string;
                      profile: {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        visuals: Array<{
                          id: string;
                          name: string;
                          uri: string;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      };
                      agent: {
                        credentials?:
                          | Array<{
                              resourceID: string;
                              type: SchemaTypes.CredentialType;
                            }>
                          | undefined;
                      };
                      preferences: Array<{
                        id: string;
                        value: string;
                        definition: {
                          type: SchemaTypes.PreferenceType;
                          id: string;
                          displayName: string;
                          description: string;
                          group: string;
                        };
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                profile?:
                  | {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    }
                  | undefined;
              }>
            | undefined;
          associates?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          verification: {
            id: string;
            status: SchemaTypes.OrganizationVerificationEnum;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
      collaboration: {
        id: string;
        relations?:
          | Array<{
              id: string;
              actorName: string;
              actorRole: string;
              actorType: string;
              description: string;
              type: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        callouts: Array<{
          id: string;
          activity: number;
          nameID: string;
          publishedDate?: number | undefined;
          sortOrder: number;
          type: SchemaTypes.CalloutType;
          visibility: SchemaTypes.CalloutVisibility;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          comments?:
            | {
                id: string;
                messagesCount: number;
                messages: Array<{ message: any }>;
              }
            | undefined;
          contributionPolicy: {
            allowedContributionTypes: Array<
              SchemaTypes.CalloutContributionType
            >;
            id: string;
            state: SchemaTypes.CalloutState;
          };
          contributions: Array<{
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            createdBy?: { email: string } | undefined;
            link?:
              | {
                  id: string;
                  uri: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                  };
                }
              | undefined;
            post?:
              | {
                  id: string;
                  nameID: string;
                  type: string;
                  createdDate: Date;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  comments: {
                    id: string;
                    messagesCount: number;
                    messages: Array<{
                      id: any;
                      message: any;
                      sender?: { id: string } | {} | undefined;
                    }>;
                  };
                  createdBy?: { email: string } | undefined;
                }
              | undefined;
            whiteboard?:
              | {
                  id: string;
                  nameID: string;
                  content: any;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          }>;
          createdBy?: { email: string } | undefined;
          framing: {
            id: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            whiteboard?:
              | {
                  nameID: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    visual?:
                      | {
                          __typename: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    storageBucket: {
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      parentEntity?:
                        | { displayName: string; type: SchemaTypes.ProfileType }
                        | undefined;
                      documents: Array<{
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>;
                    };
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          };
          publishedBy?: { email: string } | undefined;
        }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        innovationFlow: {
          id: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            storageBucket: {
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              parentEntity?:
                | { displayName: string; type: SchemaTypes.ProfileType }
                | undefined;
              documents: Array<{
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
            };
          };
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          currentState: { description: any; displayName: string };
          states: Array<{ description: any; displayName: string }>;
        };
      };
      subspaces: Array<{
        id: string;
        nameID: string;
        metrics?:
          | Array<{ id: string; name: string; value: string }>
          | undefined;
        profile: {
          id: string;
          displayName: string;
          description?: any | undefined;
          tagline: string;
          references?:
            | Array<{
                id: string;
                name: string;
                uri: string;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          tagsets?:
            | Array<{
                id: string;
                name: string;
                tags: Array<string>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          location?: { country: string; city: string } | undefined;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | { displayName: string; type: SchemaTypes.ProfileType }
              | undefined;
            documents: Array<{
              id: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
          };
        };
        collaboration: {
          id: string;
          relations?:
            | Array<{
                id: string;
                actorName: string;
                actorRole: string;
                actorType: string;
                description: string;
                type: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          callouts: Array<{
            id: string;
            activity: number;
            nameID: string;
            publishedDate?: number | undefined;
            sortOrder: number;
            type: SchemaTypes.CalloutType;
            visibility: SchemaTypes.CalloutVisibility;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            comments?:
              | {
                  id: string;
                  messagesCount: number;
                  messages: Array<{ message: any }>;
                }
              | undefined;
            contributionPolicy: {
              allowedContributionTypes: Array<
                SchemaTypes.CalloutContributionType
              >;
              id: string;
              state: SchemaTypes.CalloutState;
            };
            contributions: Array<{
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              createdBy?: { email: string } | undefined;
              link?:
                | {
                    id: string;
                    uri: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                    };
                  }
                | undefined;
              post?:
                | {
                    id: string;
                    nameID: string;
                    type: string;
                    createdDate: Date;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      visual?:
                        | {
                            __typename: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            authorization?:
                              | {
                                  anonymousReadAccess: boolean;
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                    comments: {
                      id: string;
                      messagesCount: number;
                      messages: Array<{
                        id: any;
                        message: any;
                        sender?: { id: string } | {} | undefined;
                      }>;
                    };
                    createdBy?: { email: string } | undefined;
                  }
                | undefined;
              whiteboard?:
                | {
                    id: string;
                    nameID: string;
                    content: any;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      visual?:
                        | {
                            __typename: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            authorization?:
                              | {
                                  anonymousReadAccess: boolean;
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                  }
                | undefined;
            }>;
            createdBy?: { email: string } | undefined;
            framing: {
              id: string;
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              };
              whiteboard?:
                | {
                    nameID: string;
                    profile: {
                      id: string;
                      displayName: string;
                      description?: any | undefined;
                      tagline: string;
                      visual?:
                        | {
                            __typename: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            authorization?:
                              | {
                                  anonymousReadAccess: boolean;
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      storageBucket: {
                        id: string;
                        authorization?:
                          | {
                              anonymousReadAccess: boolean;
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        parentEntity?:
                          | {
                              displayName: string;
                              type: SchemaTypes.ProfileType;
                            }
                          | undefined;
                        documents: Array<{
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                      };
                      references?:
                        | Array<{
                            id: string;
                            name: string;
                            uri: string;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      tagsets?:
                        | Array<{
                            id: string;
                            name: string;
                            tags: Array<string>;
                            authorization?:
                              | {
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>
                        | undefined;
                      location?: { country: string; city: string } | undefined;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    };
                  }
                | undefined;
            };
            publishedBy?: { email: string } | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          innovationFlow: {
            id: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              storageBucket: {
                id: string;
                authorization?:
                  | {
                      anonymousReadAccess: boolean;
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                parentEntity?:
                  | { displayName: string; type: SchemaTypes.ProfileType }
                  | undefined;
                documents: Array<{
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
              };
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            currentState: { description: any; displayName: string };
            states: Array<{ description: any; displayName: string }>;
          };
        };
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        community: {
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          groups: Array<{
            id: string;
            members?:
              | Array<{
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            profile?:
              | {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                }
              | undefined;
          }>;
          applications: Array<{
            id: string;
            lifecycle: {
              id: string;
              state?: string | undefined;
              nextEvents?: Array<string> | undefined;
              stateIsFinal: boolean;
              templateName?: string | undefined;
            };
            questions: Array<{ id: string }>;
            contributor:
              | {
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }
              | {};
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          communication: {
            id: string;
            updates: {
              id: string;
              messages: Array<{
                id: any;
                message: any;
                threadID?: string | undefined;
                sender?: { id: string } | {} | undefined;
                reactions: Array<{
                  id: any;
                  emoji: any;
                  sender?: { email: string } | undefined;
                }>;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          memberUsers: Array<{
            id: string;
            nameID: string;
            firstName: string;
            lastName: string;
            email: string;
            phone: string;
            accountUpn: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            agent: {
              credentials?:
                | Array<{
                    resourceID: string;
                    type: SchemaTypes.CredentialType;
                  }>
                | undefined;
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          leadUsers: Array<{
            id: string;
            nameID: string;
            firstName: string;
            lastName: string;
            email: string;
            phone: string;
            accountUpn: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            agent: {
              credentials?:
                | Array<{
                    resourceID: string;
                    type: SchemaTypes.CredentialType;
                  }>
                | undefined;
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          adminUsers: Array<{
            id: string;
            nameID: string;
            firstName: string;
            lastName: string;
            email: string;
            phone: string;
            accountUpn: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            agent: {
              credentials?:
                | Array<{
                    resourceID: string;
                    type: SchemaTypes.CredentialType;
                  }>
                | undefined;
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          memberOrganizations: Array<{
            id: string;
            nameID: string;
            legalEntityName?: string | undefined;
            domain?: string | undefined;
            website?: string | undefined;
            contactEmail?: string | undefined;
            groups?:
              | Array<{
                  id: string;
                  members?:
                    | Array<{
                        id: string;
                        nameID: string;
                        firstName: string;
                        lastName: string;
                        email: string;
                        phone: string;
                        accountUpn: string;
                        profile: {
                          id: string;
                          displayName: string;
                          description?: any | undefined;
                          tagline: string;
                          references?:
                            | Array<{
                                id: string;
                                name: string;
                                uri: string;
                                authorization?:
                                  | {
                                      myPrivileges?:
                                        | Array<
                                            SchemaTypes.AuthorizationPrivilege
                                          >
                                        | undefined;
                                    }
                                  | undefined;
                              }>
                            | undefined;
                          tagsets?:
                            | Array<{
                                id: string;
                                name: string;
                                tags: Array<string>;
                                authorization?:
                                  | {
                                      myPrivileges?:
                                        | Array<
                                            SchemaTypes.AuthorizationPrivilege
                                          >
                                        | undefined;
                                    }
                                  | undefined;
                              }>
                            | undefined;
                          location?:
                            | { country: string; city: string }
                            | undefined;
                          visuals: Array<{
                            id: string;
                            name: string;
                            uri: string;
                          }>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        };
                        agent: {
                          credentials?:
                            | Array<{
                                resourceID: string;
                                type: SchemaTypes.CredentialType;
                              }>
                            | undefined;
                        };
                        preferences: Array<{
                          id: string;
                          value: string;
                          definition: {
                            type: SchemaTypes.PreferenceType;
                            id: string;
                            displayName: string;
                            description: string;
                            group: string;
                          };
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  profile?:
                    | {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        storageBucket: {
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                          parentEntity?:
                            | {
                                displayName: string;
                                type: SchemaTypes.ProfileType;
                              }
                            | undefined;
                          documents: Array<{
                            id: string;
                            authorization?:
                              | {
                                  anonymousReadAccess: boolean;
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>;
                        };
                      }
                    | undefined;
                }>
              | undefined;
            associates?:
              | Array<{
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            verification: {
              id: string;
              status: SchemaTypes.OrganizationVerificationEnum;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              lifecycle: {
                id: string;
                state?: string | undefined;
                nextEvents?: Array<string> | undefined;
                stateIsFinal: boolean;
                templateName?: string | undefined;
              };
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          leadOrganizations: Array<{
            id: string;
            nameID: string;
            legalEntityName?: string | undefined;
            domain?: string | undefined;
            website?: string | undefined;
            contactEmail?: string | undefined;
            groups?:
              | Array<{
                  id: string;
                  members?:
                    | Array<{
                        id: string;
                        nameID: string;
                        firstName: string;
                        lastName: string;
                        email: string;
                        phone: string;
                        accountUpn: string;
                        profile: {
                          id: string;
                          displayName: string;
                          description?: any | undefined;
                          tagline: string;
                          references?:
                            | Array<{
                                id: string;
                                name: string;
                                uri: string;
                                authorization?:
                                  | {
                                      myPrivileges?:
                                        | Array<
                                            SchemaTypes.AuthorizationPrivilege
                                          >
                                        | undefined;
                                    }
                                  | undefined;
                              }>
                            | undefined;
                          tagsets?:
                            | Array<{
                                id: string;
                                name: string;
                                tags: Array<string>;
                                authorization?:
                                  | {
                                      myPrivileges?:
                                        | Array<
                                            SchemaTypes.AuthorizationPrivilege
                                          >
                                        | undefined;
                                    }
                                  | undefined;
                              }>
                            | undefined;
                          location?:
                            | { country: string; city: string }
                            | undefined;
                          visuals: Array<{
                            id: string;
                            name: string;
                            uri: string;
                          }>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        };
                        agent: {
                          credentials?:
                            | Array<{
                                resourceID: string;
                                type: SchemaTypes.CredentialType;
                              }>
                            | undefined;
                        };
                        preferences: Array<{
                          id: string;
                          value: string;
                          definition: {
                            type: SchemaTypes.PreferenceType;
                            id: string;
                            displayName: string;
                            description: string;
                            group: string;
                          };
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  profile?:
                    | {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        storageBucket: {
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                          parentEntity?:
                            | {
                                displayName: string;
                                type: SchemaTypes.ProfileType;
                              }
                            | undefined;
                          documents: Array<{
                            id: string;
                            authorization?:
                              | {
                                  anonymousReadAccess: boolean;
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>;
                        };
                      }
                    | undefined;
                }>
              | undefined;
            associates?:
              | Array<{
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            verification: {
              id: string;
              status: SchemaTypes.OrganizationVerificationEnum;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              lifecycle: {
                id: string;
                state?: string | undefined;
                nextEvents?: Array<string> | undefined;
                stateIsFinal: boolean;
                templateName?: string | undefined;
              };
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          adminOrganizations: Array<{
            id: string;
            nameID: string;
            legalEntityName?: string | undefined;
            domain?: string | undefined;
            website?: string | undefined;
            contactEmail?: string | undefined;
            groups?:
              | Array<{
                  id: string;
                  members?:
                    | Array<{
                        id: string;
                        nameID: string;
                        firstName: string;
                        lastName: string;
                        email: string;
                        phone: string;
                        accountUpn: string;
                        profile: {
                          id: string;
                          displayName: string;
                          description?: any | undefined;
                          tagline: string;
                          references?:
                            | Array<{
                                id: string;
                                name: string;
                                uri: string;
                                authorization?:
                                  | {
                                      myPrivileges?:
                                        | Array<
                                            SchemaTypes.AuthorizationPrivilege
                                          >
                                        | undefined;
                                    }
                                  | undefined;
                              }>
                            | undefined;
                          tagsets?:
                            | Array<{
                                id: string;
                                name: string;
                                tags: Array<string>;
                                authorization?:
                                  | {
                                      myPrivileges?:
                                        | Array<
                                            SchemaTypes.AuthorizationPrivilege
                                          >
                                        | undefined;
                                    }
                                  | undefined;
                              }>
                            | undefined;
                          location?:
                            | { country: string; city: string }
                            | undefined;
                          visuals: Array<{
                            id: string;
                            name: string;
                            uri: string;
                          }>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        };
                        agent: {
                          credentials?:
                            | Array<{
                                resourceID: string;
                                type: SchemaTypes.CredentialType;
                              }>
                            | undefined;
                        };
                        preferences: Array<{
                          id: string;
                          value: string;
                          definition: {
                            type: SchemaTypes.PreferenceType;
                            id: string;
                            displayName: string;
                            description: string;
                            group: string;
                          };
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  profile?:
                    | {
                        id: string;
                        displayName: string;
                        description?: any | undefined;
                        tagline: string;
                        references?:
                          | Array<{
                              id: string;
                              name: string;
                              uri: string;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        tagsets?:
                          | Array<{
                              id: string;
                              name: string;
                              tags: Array<string>;
                              authorization?:
                                | {
                                    myPrivileges?:
                                      | Array<
                                          SchemaTypes.AuthorizationPrivilege
                                        >
                                      | undefined;
                                  }
                                | undefined;
                            }>
                          | undefined;
                        location?:
                          | { country: string; city: string }
                          | undefined;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                        storageBucket: {
                          id: string;
                          authorization?:
                            | {
                                anonymousReadAccess: boolean;
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                          parentEntity?:
                            | {
                                displayName: string;
                                type: SchemaTypes.ProfileType;
                              }
                            | undefined;
                          documents: Array<{
                            id: string;
                            authorization?:
                              | {
                                  anonymousReadAccess: boolean;
                                  myPrivileges?:
                                    | Array<SchemaTypes.AuthorizationPrivilege>
                                    | undefined;
                                }
                              | undefined;
                          }>;
                        };
                      }
                    | undefined;
                }>
              | undefined;
            associates?:
              | Array<{
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            verification: {
              id: string;
              status: SchemaTypes.OrganizationVerificationEnum;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              lifecycle: {
                id: string;
                state?: string | undefined;
                nextEvents?: Array<string> | undefined;
                stateIsFinal: boolean;
                templateName?: string | undefined;
              };
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        };
        context: {
          id: string;
          vision?: any | undefined;
          impact?: any | undefined;
          who?: any | undefined;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        };
      }>;
      settings: {
        privacy: {
          mode: SchemaTypes.SpacePrivacyMode;
          allowPlatformSupportAsAdmin: boolean;
        };
        membership: {
          allowSubspaceAdminsToInviteMembers: boolean;
          policy: SchemaTypes.CommunityMembershipPolicy;
          trustedOrganizations: Array<string>;
        };
        collaboration: {
          allowMembersToCreateCallouts: boolean;
          allowMembersToCreateSubspaces: boolean;
          inheritMembershipRights: boolean;
        };
      };
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        storageBucket: {
          id: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          parentEntity?:
            | { displayName: string; type: SchemaTypes.ProfileType }
            | undefined;
          documents: Array<{
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        };
      };
    }>;
  };
};

export type GetUserRolesQueryVariables = SchemaTypes.Exact<{
  rolesData: SchemaTypes.RolesUserInput;
}>;

export type GetUserRolesQuery = {
  rolesUser: {
    spaces: Array<{
      nameID: string;
      id: string;
      roles: Array<string>;
      visibility: SchemaTypes.SpaceVisibility;
      subspaces: Array<{ nameID: string; id: string; roles: Array<string> }>;
    }>;
    organizations: Array<{ nameID: string; id: string; roles: Array<string> }>;
  };
};

export type LookupProfileVisualsQueryVariables = SchemaTypes.Exact<{
  ID: SchemaTypes.Scalars['UUID'];
}>;

export type LookupProfileVisualsQuery = {
  lookup: {
    profile?:
      | {
          description?: any | undefined;
          displayName: string;
          storageBucket: {
            id: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
            parentEntity?:
              | {
                  displayName: string;
                  id: string;
                  type: SchemaTypes.ProfileType;
                  url: string;
                }
              | undefined;
            documents: Array<{
              id: string;
              displayName: string;
              url: string;
              authorization?:
                | {
                    anonymousReadAccess: boolean;
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
              createdBy?: { email: string } | undefined;
            }>;
          };
          visuals: Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  anonymousReadAccess: boolean;
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
        }
      | undefined;
  };
};

export type GetOrgReferenceUriQueryVariables = SchemaTypes.Exact<{
  organizationId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetOrgReferenceUriQuery = {
  organization: {
    nameID: string;
    profile: {
      references?:
        | Array<{
            id: string;
            description?: string | undefined;
            uri: string;
            name: string;
          }>
        | undefined;
    };
  };
};

export type GetOrgVisualUriQueryVariables = SchemaTypes.Exact<{
  organizationId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetOrgVisualUriQuery = {
  organization: {
    nameID: string;
    profile: { visuals: Array<{ id: string; name: string; uri: string }> };
  };
};

export type GetOrganizationDataQueryVariables = SchemaTypes.Exact<{
  organizationId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetOrganizationDataQuery = {
  organization: {
    id: string;
    nameID: string;
    legalEntityName?: string | undefined;
    domain?: string | undefined;
    website?: string | undefined;
    contactEmail?: string | undefined;
    groups?:
      | Array<{
          id: string;
          members?:
            | Array<{
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>
            | undefined;
          profile?:
            | {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
                storageBucket: {
                  id: string;
                  authorization?:
                    | {
                        anonymousReadAccess: boolean;
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  parentEntity?:
                    | { displayName: string; type: SchemaTypes.ProfileType }
                    | undefined;
                  documents: Array<{
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                };
              }
            | undefined;
        }>
      | undefined;
    associates?:
      | Array<{
          id: string;
          nameID: string;
          firstName: string;
          lastName: string;
          email: string;
          phone: string;
          accountUpn: string;
          profile: {
            id: string;
            displayName: string;
            description?: any | undefined;
            tagline: string;
            references?:
              | Array<{
                  id: string;
                  name: string;
                  uri: string;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  id: string;
                  name: string;
                  tags: Array<string>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            location?: { country: string; city: string } | undefined;
            visuals: Array<{ id: string; name: string; uri: string }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          };
          agent: {
            credentials?:
              | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
              | undefined;
          };
          preferences: Array<{
            id: string;
            value: string;
            definition: {
              type: SchemaTypes.PreferenceType;
              id: string;
              displayName: string;
              description: string;
              group: string;
            };
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>;
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>
      | undefined;
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    verification: {
      id: string;
      status: SchemaTypes.OrganizationVerificationEnum;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
      lifecycle: {
        id: string;
        state?: string | undefined;
        nextEvents?: Array<string> | undefined;
        stateIsFinal: boolean;
        templateName?: string | undefined;
      };
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | {
          anonymousReadAccess: boolean;
          myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined;
        }
      | undefined;
  };
};

export type GetOrganizationDocumentAndStorageDataQueryVariables = SchemaTypes.Exact<{
  ID: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetOrganizationDocumentAndStorageDataQuery = {
  organization: {
    profile: {
      storageBucket: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        parentEntity?:
          | {
              displayName: string;
              id: string;
              type: SchemaTypes.ProfileType;
              url: string;
            }
          | undefined;
        documents: Array<{
          id: string;
          displayName: string;
          url: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          createdBy?: { email: string } | undefined;
        }>;
      };
      visuals: Array<{
        id: string;
        name: string;
        uri: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
  };
};

export type GetRolesOrganizationQueryVariables = SchemaTypes.Exact<{
  organizationID: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetRolesOrganizationQuery = {
  rolesOrganization: {
    spaces: Array<{
      id: string;
      nameID: string;
      roles: Array<string>;
      subspaces: Array<{
        displayName: string;
        nameID: string;
        id: string;
        roles: Array<string>;
      }>;
    }>;
    organizations: Array<{ nameID: string; id: string; roles: Array<string> }>;
  };
};

export type OrganizationsPaginatedQueryVariables = SchemaTypes.Exact<{
  first?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['Int']>;
  last?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['Int']>;
  before?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['UUID']>;
  after?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['UUID']>;
  filter?: SchemaTypes.InputMaybe<SchemaTypes.OrganizationFilterInput>;
}>;

export type OrganizationsPaginatedQuery = {
  organizationsPaginated: {
    organization: Array<{
      id: string;
      nameID: string;
      legalEntityName?: string | undefined;
      domain?: string | undefined;
      website?: string | undefined;
      contactEmail?: string | undefined;
      groups?:
        | Array<{
            id: string;
            members?:
              | Array<{
                  id: string;
                  nameID: string;
                  firstName: string;
                  lastName: string;
                  email: string;
                  phone: string;
                  accountUpn: string;
                  profile: {
                    id: string;
                    displayName: string;
                    description?: any | undefined;
                    tagline: string;
                    references?:
                      | Array<{
                          id: string;
                          name: string;
                          uri: string;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    tagsets?:
                      | Array<{
                          id: string;
                          name: string;
                          tags: Array<string>;
                          authorization?:
                            | {
                                myPrivileges?:
                                  | Array<SchemaTypes.AuthorizationPrivilege>
                                  | undefined;
                              }
                            | undefined;
                        }>
                      | undefined;
                    location?: { country: string; city: string } | undefined;
                    visuals: Array<{ id: string; name: string; uri: string }>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  };
                  agent: {
                    credentials?:
                      | Array<{
                          resourceID: string;
                          type: SchemaTypes.CredentialType;
                        }>
                      | undefined;
                  };
                  preferences: Array<{
                    id: string;
                    value: string;
                    definition: {
                      type: SchemaTypes.PreferenceType;
                      id: string;
                      displayName: string;
                      description: string;
                      group: string;
                    };
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>
              | undefined;
            profile?:
              | {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                  storageBucket: {
                    id: string;
                    authorization?:
                      | {
                          anonymousReadAccess: boolean;
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                    parentEntity?:
                      | { displayName: string; type: SchemaTypes.ProfileType }
                      | undefined;
                    documents: Array<{
                      id: string;
                      authorization?:
                        | {
                            anonymousReadAccess: boolean;
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>;
                  };
                }
              | undefined;
          }>
        | undefined;
      associates?:
        | Array<{
            id: string;
            nameID: string;
            firstName: string;
            lastName: string;
            email: string;
            phone: string;
            accountUpn: string;
            profile: {
              id: string;
              displayName: string;
              description?: any | undefined;
              tagline: string;
              references?:
                | Array<{
                    id: string;
                    name: string;
                    uri: string;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              tagsets?:
                | Array<{
                    id: string;
                    name: string;
                    tags: Array<string>;
                    authorization?:
                      | {
                          myPrivileges?:
                            | Array<SchemaTypes.AuthorizationPrivilege>
                            | undefined;
                        }
                      | undefined;
                  }>
                | undefined;
              location?: { country: string; city: string } | undefined;
              visuals: Array<{ id: string; name: string; uri: string }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            };
            agent: {
              credentials?:
                | Array<{
                    resourceID: string;
                    type: SchemaTypes.CredentialType;
                  }>
                | undefined;
            };
            preferences: Array<{
              id: string;
              value: string;
              definition: {
                type: SchemaTypes.PreferenceType;
                id: string;
                displayName: string;
                description: string;
                group: string;
              };
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        visuals: Array<{ id: string; name: string; uri: string }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      verification: {
        id: string;
        status: SchemaTypes.OrganizationVerificationEnum;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        lifecycle: {
          id: string;
          state?: string | undefined;
          nextEvents?: Array<string> | undefined;
          stateIsFinal: boolean;
          templateName?: string | undefined;
        };
      };
      preferences: Array<{
        id: string;
        value: string;
        definition: {
          type: SchemaTypes.PreferenceType;
          id: string;
          displayName: string;
          description: string;
          group: string;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      authorization?:
        | {
            anonymousReadAccess: boolean;
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    pageInfo: {
      startCursor?: string | undefined;
      endCursor?: string | undefined;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
    };
  };
};

export type UsersPaginatedQueryVariables = SchemaTypes.Exact<{
  first?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['Int']>;
  last?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['Int']>;
  before?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['UUID']>;
  after?: SchemaTypes.InputMaybe<SchemaTypes.Scalars['UUID']>;
  filter?: SchemaTypes.InputMaybe<SchemaTypes.UserFilterInput>;
}>;

export type UsersPaginatedQuery = {
  usersPaginated: {
    users: Array<{
      id: string;
      nameID: string;
      firstName: string;
      lastName: string;
      email: string;
      phone: string;
      accountUpn: string;
      agent: {
        credentials?:
          | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
          | undefined;
      };
      profile: {
        id: string;
        displayName: string;
        description?: any | undefined;
        tagline: string;
        references?:
          | Array<{
              id: string;
              name: string;
              uri: string;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        tagsets?:
          | Array<{
              id: string;
              name: string;
              tags: Array<string>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }>
          | undefined;
        location?: { country: string; city: string } | undefined;
        visuals: Array<{ id: string; name: string; uri: string }>;
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      };
      preferences: Array<{
        id: string;
        value: string;
        definition: {
          type: SchemaTypes.PreferenceType;
          id: string;
          displayName: string;
          description: string;
          group: string;
        };
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    pageInfo: {
      startCursor?: string | undefined;
      endCursor?: string | undefined;
      hasNextPage: boolean;
      hasPreviousPage: boolean;
    };
  };
};

export type GetOrgVisualUriInnovationHubQueryVariables = SchemaTypes.Exact<{
  ID: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetOrgVisualUriInnovationHubQuery = {
  platform: {
    innovationHub?:
      | { profile: { visuals: Array<{ uri: string }> } }
      | undefined;
  };
};

export type SearchContributorQueryVariables = SchemaTypes.Exact<{
  searchData: SchemaTypes.SearchInput;
}>;

export type SearchContributorQuery = {
  search: {
    contributorResultsCount: number;
    contributorResults: Array<
      | {
          score: number;
          terms: Array<string>;
          type: SchemaTypes.SearchResultType;
        }
      | {
          type: SchemaTypes.SearchResultType;
          score: number;
          terms: Array<string>;
          organization: { id: string; profile: { displayName: string } };
        }
      | {
          score: number;
          terms: Array<string>;
          type: SchemaTypes.SearchResultType;
        }
      | {
          score: number;
          terms: Array<string>;
          type: SchemaTypes.SearchResultType;
        }
      | {
          type: SchemaTypes.SearchResultType;
          score: number;
          terms: Array<string>;
          user: { id: string; profile: { displayName: string } };
        }
      | {
          score: number;
          terms: Array<string>;
          type: SchemaTypes.SearchResultType;
        }
    >;
  };
};

export type SearchJourneyQueryVariables = SchemaTypes.Exact<{
  searchData: SchemaTypes.SearchInput;
}>;

export type SearchJourneyQuery = {
  search: {
    journeyResultsCount: number;
    journeyResults: Array<
      | {
          score: number;
          terms: Array<string>;
          type: SchemaTypes.SearchResultType;
        }
      | {
          score: number;
          terms: Array<string>;
          type: SchemaTypes.SearchResultType;
        }
      | {
          score: number;
          terms: Array<string>;
          type: SchemaTypes.SearchResultType;
        }
      | {
          type: SchemaTypes.SearchResultType;
          score: number;
          terms: Array<string>;
          space: { id: string; profile: { displayName: string } };
        }
      | {
          score: number;
          terms: Array<string>;
          type: SchemaTypes.SearchResultType;
        }
      | {
          score: number;
          terms: Array<string>;
          type: SchemaTypes.SearchResultType;
        }
    >;
  };
};

export type SearchContributionsQueryVariables = SchemaTypes.Exact<{
  searchData: SchemaTypes.SearchInput;
}>;

export type SearchContributionsQuery = {
  search: {
    contributionResultsCount: number;
    contributionResults: Array<
      | {
          id: string;
          score: number;
          terms: Array<string>;
          type: SchemaTypes.SearchResultType;
        }
      | {
          id: string;
          score: number;
          terms: Array<string>;
          type: SchemaTypes.SearchResultType;
        }
      | {
          id: string;
          score: number;
          terms: Array<string>;
          type: SchemaTypes.SearchResultType;
          space: { id: string; profile: { displayName: string } };
          callout: {
            id: string;
            framing: { profile: { displayName: string } };
          };
          post: { id: string; profile: { displayName: string } };
        }
      | {
          id: string;
          score: number;
          terms: Array<string>;
          type: SchemaTypes.SearchResultType;
        }
      | {
          id: string;
          score: number;
          terms: Array<string>;
          type: SchemaTypes.SearchResultType;
        }
      | {
          id: string;
          score: number;
          terms: Array<string>;
          type: SchemaTypes.SearchResultType;
        }
    >;
  };
};

export type GetChallengeApplicationsQueryVariables = SchemaTypes.Exact<{
  spaceId: SchemaTypes.Scalars['UUID_NAMEID'];
  subspaceId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetChallengeApplicationsQuery = {
  space: {
    id: string;
    subspace: {
      community: {
        applications: Array<{
          id: string;
          lifecycle: {
            id: string;
            state?: string | undefined;
            nextEvents?: Array<string> | undefined;
            stateIsFinal: boolean;
            templateName?: string | undefined;
          };
          questions: Array<{ id: string }>;
          contributor:
            | {
                id: string;
                nameID: string;
                firstName: string;
                lastName: string;
                email: string;
                phone: string;
                accountUpn: string;
                agent: {
                  credentials?:
                    | Array<{
                        resourceID: string;
                        type: SchemaTypes.CredentialType;
                      }>
                    | undefined;
                };
                profile: {
                  id: string;
                  displayName: string;
                  description?: any | undefined;
                  tagline: string;
                  references?:
                    | Array<{
                        id: string;
                        name: string;
                        uri: string;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  tagsets?:
                    | Array<{
                        id: string;
                        name: string;
                        tags: Array<string>;
                        authorization?:
                          | {
                              myPrivileges?:
                                | Array<SchemaTypes.AuthorizationPrivilege>
                                | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                  location?: { country: string; city: string } | undefined;
                  visuals: Array<{ id: string; name: string; uri: string }>;
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                };
                preferences: Array<{
                  id: string;
                  value: string;
                  definition: {
                    type: SchemaTypes.PreferenceType;
                    id: string;
                    displayName: string;
                    description: string;
                    group: string;
                  };
                  authorization?:
                    | {
                        myPrivileges?:
                          | Array<SchemaTypes.AuthorizationPrivilege>
                          | undefined;
                      }
                    | undefined;
                }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }
            | {};
          authorization?:
            | {
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
        }>;
      };
    };
  };
};

export type GetSpaceApplicationsQueryVariables = SchemaTypes.Exact<{
  spaceId: SchemaTypes.Scalars['UUID_NAMEID'];
}>;

export type GetSpaceApplicationsQuery = {
  space: {
    id: string;
    community: {
      applications: Array<{
        id: string;
        lifecycle: {
          id: string;
          state?: string | undefined;
          nextEvents?: Array<string> | undefined;
          stateIsFinal: boolean;
          templateName?: string | undefined;
        };
        questions: Array<{ id: string }>;
        contributor:
          | {
              id: string;
              nameID: string;
              firstName: string;
              lastName: string;
              email: string;
              phone: string;
              accountUpn: string;
              agent: {
                credentials?:
                  | Array<{
                      resourceID: string;
                      type: SchemaTypes.CredentialType;
                    }>
                  | undefined;
              };
              profile: {
                id: string;
                displayName: string;
                description?: any | undefined;
                tagline: string;
                references?:
                  | Array<{
                      id: string;
                      name: string;
                      uri: string;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                tagsets?:
                  | Array<{
                      id: string;
                      name: string;
                      tags: Array<string>;
                      authorization?:
                        | {
                            myPrivileges?:
                              | Array<SchemaTypes.AuthorizationPrivilege>
                              | undefined;
                          }
                        | undefined;
                    }>
                  | undefined;
                location?: { country: string; city: string } | undefined;
                visuals: Array<{ id: string; name: string; uri: string }>;
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              };
              preferences: Array<{
                id: string;
                value: string;
                definition: {
                  type: SchemaTypes.PreferenceType;
                  id: string;
                  displayName: string;
                  description: string;
                  group: string;
                };
                authorization?:
                  | {
                      myPrivileges?:
                        | Array<SchemaTypes.AuthorizationPrivilege>
                        | undefined;
                    }
                  | undefined;
              }>;
              authorization?:
                | {
                    myPrivileges?:
                      | Array<SchemaTypes.AuthorizationPrivilege>
                      | undefined;
                  }
                | undefined;
            }
          | {};
        authorization?:
          | {
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
  };
};

export type GetUserDataQueryVariables = SchemaTypes.Exact<{
  userId: SchemaTypes.Scalars['UUID_NAMEID_EMAIL'];
}>;

export type GetUserDataQuery = {
  user: {
    id: string;
    nameID: string;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    accountUpn: string;
    agent: {
      credentials?:
        | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
        | undefined;
    };
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type GetUserDocumentAndStorageDataQueryVariables = SchemaTypes.Exact<{
  ID: SchemaTypes.Scalars['UUID_NAMEID_EMAIL'];
}>;

export type GetUserDocumentAndStorageDataQuery = {
  user: {
    profile: {
      storageBucket: {
        id: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
        parentEntity?:
          | {
              displayName: string;
              id: string;
              type: SchemaTypes.ProfileType;
              url: string;
            }
          | undefined;
        documents: Array<{
          id: string;
          displayName: string;
          url: string;
          authorization?:
            | {
                anonymousReadAccess: boolean;
                myPrivileges?:
                  | Array<SchemaTypes.AuthorizationPrivilege>
                  | undefined;
              }
            | undefined;
          createdBy?: { email: string } | undefined;
        }>;
      };
      visuals: Array<{
        id: string;
        name: string;
        uri: string;
        authorization?:
          | {
              anonymousReadAccess: boolean;
              myPrivileges?:
                | Array<SchemaTypes.AuthorizationPrivilege>
                | undefined;
            }
          | undefined;
      }>;
    };
  };
};

export type GetUserReferenceUriQueryVariables = SchemaTypes.Exact<{
  userId: SchemaTypes.Scalars['UUID_NAMEID_EMAIL'];
}>;

export type GetUserReferenceUriQuery = {
  user: {
    nameID: string;
    profile: {
      references?:
        | Array<{
            id: string;
            description?: string | undefined;
            uri: string;
            name: string;
          }>
        | undefined;
    };
  };
};

export type GetUsersDataQueryVariables = SchemaTypes.Exact<{
  [key: string]: never;
}>;

export type GetUsersDataQuery = {
  users: Array<{
    id: string;
    nameID: string;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    accountUpn: string;
    agent: {
      credentials?:
        | Array<{ resourceID: string; type: SchemaTypes.CredentialType }>
        | undefined;
    };
    profile: {
      id: string;
      displayName: string;
      description?: any | undefined;
      tagline: string;
      references?:
        | Array<{
            id: string;
            name: string;
            uri: string;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      tagsets?:
        | Array<{
            id: string;
            name: string;
            tags: Array<string>;
            authorization?:
              | {
                  myPrivileges?:
                    | Array<SchemaTypes.AuthorizationPrivilege>
                    | undefined;
                }
              | undefined;
          }>
        | undefined;
      location?: { country: string; city: string } | undefined;
      visuals: Array<{ id: string; name: string; uri: string }>;
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    };
    preferences: Array<{
      id: string;
      value: string;
      definition: {
        type: SchemaTypes.PreferenceType;
        id: string;
        displayName: string;
        description: string;
        group: string;
      };
      authorization?:
        | {
            myPrivileges?:
              | Array<SchemaTypes.AuthorizationPrivilege>
              | undefined;
          }
        | undefined;
    }>;
    authorization?:
      | { myPrivileges?: Array<SchemaTypes.AuthorizationPrivilege> | undefined }
      | undefined;
  }>;
};

export type MeQueryVariables = SchemaTypes.Exact<{ [key: string]: never }>;

export type MeQuery = {
  me: {
    communityApplications: Array<{
      application: { id: string; lifecycle: { state?: string | undefined } };
      space: { id: string };
    }>;
    communityInvitations: Array<{
      invitation: { id: string; lifecycle: { state?: string | undefined } };
      space: { id: string };
    }>;
    spaceMemberships: Array<{ id: string; nameID: string }>;
  };
};

export const ActorDataFragmentDoc = gql`
  fragment ActorData on Actor {
    id
    name
    description
    value
    impact
  }
`;
export const ActorGroupDataFragmentDoc = gql`
  fragment ActorGroupData on ActorGroup {
    id
    name
    description
    actors {
      ...ActorData
    }
  }
  ${ActorDataFragmentDoc}
`;
export const ReferenceDataFragmentDoc = gql`
  fragment ReferenceData on Reference {
    id
    name
    uri
  }
`;
export const TagsetDataFragmentDoc = gql`
  fragment TagsetData on Tagset {
    id
    name
    tags
    authorization {
      myPrivileges
    }
  }
`;
export const ProfileStorageConfigFragmentDoc = gql`
  fragment ProfileStorageConfig on Profile {
    id
    storageBucket {
      id
      authorization {
        anonymousReadAccess
        myPrivileges
      }
      parentEntity {
        displayName
        type
      }
      documents {
        id
        authorization {
          anonymousReadAccess
          myPrivileges
        }
      }
    }
  }
`;
export const ProfileDataFragmentDoc = gql`
  fragment ProfileData on Profile {
    id
    displayName
    description
    references {
      authorization {
        myPrivileges
      }
      ...ReferenceData
    }
    tagline
    tagsets {
      authorization {
        myPrivileges
      }
      ...TagsetData
    }
    location {
      country
      city
    }
    authorization {
      myPrivileges
    }
    ...ProfileStorageConfig
  }
  ${ReferenceDataFragmentDoc}
  ${TagsetDataFragmentDoc}
  ${ProfileStorageConfigFragmentDoc}
`;
export const LinkDataFragmentDoc = gql`
  fragment LinkData on Link {
    id
    uri
    profile {
      ...ProfileData
    }
  }
  ${ProfileDataFragmentDoc}
`;
export const VisualUriFragmentDoc = gql`
  fragment VisualUri on Visual {
    id
    uri
    name
    authorization {
      anonymousReadAccess
      myPrivileges
    }
  }
`;
export const CommentsDataFragmentDoc = gql`
  fragment CommentsData on Room {
    id
    messagesCount
    messages {
      id
      message
      sender {
        ... on User {
          id
        }
      }
    }
  }
`;
export const PostDataFragmentDoc = gql`
  fragment PostData on Post {
    authorization {
      myPrivileges
    }
    id
    nameID
    type
    profile {
      ...ProfileStorageConfig
      ...ProfileData
      references {
        ...ReferenceData
      }
      visual(type: CARD) {
        ...VisualUri
        __typename
      }
    }
    comments {
      ...CommentsData
    }
    createdBy {
      email
    }
    createdDate
  }
  ${ProfileStorageConfigFragmentDoc}
  ${ProfileDataFragmentDoc}
  ${ReferenceDataFragmentDoc}
  ${VisualUriFragmentDoc}
  ${CommentsDataFragmentDoc}
`;
export const WhiteboardDataFragmentDoc = gql`
  fragment WhiteboardData on Whiteboard {
    authorization {
      myPrivileges
    }
    id
    nameID
    profile {
      ...ProfileStorageConfig
      ...ProfileData
      visual(type: CARD) {
        ...VisualUri
        __typename
      }
    }
    content
  }
  ${ProfileStorageConfigFragmentDoc}
  ${ProfileDataFragmentDoc}
  ${VisualUriFragmentDoc}
`;
export const ContributionsDataFragmentDoc = gql`
  fragment ContributionsData on CalloutContribution {
    authorization {
      myPrivileges
    }
    createdBy {
      email
    }
    link {
      authorization {
        anonymousReadAccess
        myPrivileges
      }
      ...LinkData
    }
    post {
      ...PostData
    }
    whiteboard {
      ...WhiteboardData
    }
  }
  ${LinkDataFragmentDoc}
  ${PostDataFragmentDoc}
  ${WhiteboardDataFragmentDoc}
`;
export const CalloutContributionDataFragmentDoc = gql`
  fragment CalloutContributionData on CalloutContribution {
    ...ContributionsData
  }
  ${ContributionsDataFragmentDoc}
`;
export const CalloutOnCollaborationWithStorageConfigFragmentDoc = gql`
  fragment CalloutOnCollaborationWithStorageConfig on Collaboration {
    id
    callouts(IDs: [$calloutId]) {
      id
      framing {
        profile {
          ...ProfileStorageConfig
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
  ${ProfileStorageConfigFragmentDoc}
`;
export const LinkContributionInCalloutOnCollaborationWithStorageConfigFragmentDoc = gql`
  fragment LinkContributionInCalloutOnCollaborationWithStorageConfig on Collaboration {
    id
    callouts(IDs: [$calloutId]) {
      id
      contributions(filter: { linkIDs: [$linkId] }) {
        link {
          id
          profile {
            ...ProfileStorageConfig
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
  ${ProfileStorageConfigFragmentDoc}
`;
export const PostCardInCalloutOnCollaborationWithStorageConfigFragmentDoc = gql`
  fragment PostCardInCalloutOnCollaborationWithStorageConfig on Collaboration {
    id
    callouts(IDs: [$calloutId]) {
      id
      contributions(filter: { postIDs: [$postId] }) {
        post {
          id
          profile {
            ...ProfileStorageConfig
            references {
              ...ReferenceData
            }
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
  ${ProfileStorageConfigFragmentDoc}
  ${ReferenceDataFragmentDoc}
`;
export const WhiteboardInCalloutOnCollaborationWithStorageConfigFragmentDoc = gql`
  fragment WhiteboardInCalloutOnCollaborationWithStorageConfig on Collaboration {
    id
    callouts(IDs: [$calloutId]) {
      id
      contributions(filter: { whiteboardIDs: [$whiteboardId] }) {
        whiteboard {
          id
          profile {
            ...ProfileStorageConfig
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
  ${ProfileStorageConfigFragmentDoc}
`;
export const WhiteboardCalloutWithStorageConfigFragmentDoc = gql`
  fragment WhiteboardCalloutWithStorageConfig on Collaboration {
    id
    callouts(IDs: [$calloutId]) {
      id
      framing {
        whiteboard {
          profile {
            ...ProfileStorageConfig
            __typename
          }
        }
        __typename
      }
      __typename
    }
    __typename
  }
  ${ProfileStorageConfigFragmentDoc}
`;
export const ReactionDataFragmentDoc = gql`
  fragment ReactionData on Reaction {
    id
    emoji
    sender {
      email
    }
  }
`;
export const MessageDataFragmentDoc = gql`
  fragment MessageData on Message {
    id
    message
    threadID
    sender {
      ... on User {
        id
      }
    }
    reactions {
      ...ReactionData
    }
  }
  ${ReactionDataFragmentDoc}
`;
export const CommunicationsDiscussionDataFragmentDoc = gql`
  fragment CommunicationsDiscussionData on Discussion {
    id
    profile {
      displayName
      description
    }
    category
    createdBy
    comments {
      id
      messagesCount
      messages {
        ...MessageData
      }
    }
    authorization {
      myPrivileges
    }
  }
  ${MessageDataFragmentDoc}
`;
export const FeatureFlagRulesFragmentDoc = gql`
  fragment featureFlagRules on LicensePolicyCredentialRule {
    name
    grantedPrivileges
  }
`;
export const LifecycleDataFragmentDoc = gql`
  fragment LifecycleData on Lifecycle {
    id
    state
    nextEvents
    stateIsFinal
    templateName
  }
`;
export const AgentDataFragmentDoc = gql`
  fragment AgentData on Agent {
    credentials {
      resourceID
      type
    }
  }
`;
export const ProfileDataUserFragmentDoc = gql`
  fragment ProfileDataUser on Profile {
    id
    displayName
    description
    references {
      authorization {
        myPrivileges
      }
      ...ReferenceData
    }
    tagline
    tagsets {
      authorization {
        myPrivileges
      }
      ...TagsetData
    }
    location {
      country
      city
    }
    visuals {
      id
      name
      uri
    }
    authorization {
      myPrivileges
    }
  }
  ${ReferenceDataFragmentDoc}
  ${TagsetDataFragmentDoc}
`;
export const PreferenceDataFragmentDoc = gql`
  fragment PreferenceData on Preference {
    id
    value
    definition {
      type
      id
      displayName
      description
      group
    }
    authorization {
      myPrivileges
    }
  }
`;
export const UserDataFragmentDoc = gql`
  fragment UserData on User {
    id
    nameID
    firstName
    lastName
    email
    phone
    accountUpn
    agent {
      ...AgentData
    }
    profile {
      ...ProfileDataUser
    }
    preferences {
      ...PreferenceData
    }
    authorization {
      myPrivileges
    }
  }
  ${AgentDataFragmentDoc}
  ${ProfileDataUserFragmentDoc}
  ${PreferenceDataFragmentDoc}
`;
export const InvitationDataFragmentDoc = gql`
  fragment InvitationData on Invitation {
    id
    lifecycle {
      ...LifecycleData
    }
    createdBy {
      ...UserData
    }
    contributor {
      ...UserData
    }
    authorization {
      myPrivileges
    }
  }
  ${LifecycleDataFragmentDoc}
  ${UserDataFragmentDoc}
`;
export const InvitationDataExternalFragmentDoc = gql`
  fragment InvitationDataExternal on InvitationExternal {
    id
    email
    authorization {
      myPrivileges
    }
    profileCreated
    firstName
    lastName
  }
`;
export const AuthorizationDataFragmentDoc = gql`
  fragment AuthorizationData on Authorization {
    anonymousReadAccess
    myPrivileges
  }
`;
export const ContributorDataFragmentDoc = gql`
  fragment ContributorData on Contributor {
    id
    nameID
    profile {
      ...ProfileData
    }
    authorization {
      ...AuthorizationData
    }
  }
  ${ProfileDataFragmentDoc}
  ${AuthorizationDataFragmentDoc}
`;
export const LicenseDataFragmentDoc = gql`
  fragment LicenseData on License {
    visibility
    id
    authorization {
      ...AuthorizationData
    }
  }
  ${AuthorizationDataFragmentDoc}
`;
export const InnovationFlowStateDataFragmentDoc = gql`
  fragment InnovationFlowStateData on InnovationFlowState {
    description
    displayName
  }
`;
export const InnovationFlowTemplateDataFragmentDoc = gql`
  fragment InnovationFlowTemplateData on InnovationFlowTemplate {
    id
    profile {
      ...ProfileData
    }
    states {
      ...InnovationFlowStateData
    }
    authorization {
      myPrivileges
    }
  }
  ${ProfileDataFragmentDoc}
  ${InnovationFlowStateDataFragmentDoc}
`;
export const PostTemplateDataFragmentDoc = gql`
  fragment PostTemplateData on PostTemplate {
    id
    defaultDescription
    type
    profile {
      ...ProfileData
    }
    authorization {
      myPrivileges
    }
  }
  ${ProfileDataFragmentDoc}
`;
export const TemplatesSetDataFragmentDoc = gql`
  fragment TemplatesSetData on TemplatesSet {
    id
    innovationFlowTemplates {
      ...InnovationFlowTemplateData
    }
    postTemplates {
      ...PostTemplateData
    }
    whiteboardTemplates {
      id
      authorization {
        myPrivileges
      }
    }
    authorization {
      myPrivileges
    }
  }
  ${InnovationFlowTemplateDataFragmentDoc}
  ${PostTemplateDataFragmentDoc}
`;
export const DefaultDataFragmentDoc = gql`
  fragment DefaultData on SpaceDefaults {
    id
    authorization {
      myPrivileges
    }
    innovationFlowTemplate {
      ...InnovationFlowTemplateData
    }
  }
  ${InnovationFlowTemplateDataFragmentDoc}
`;
export const AccountDataFragmentDoc = gql`
  fragment AccountData on Account {
    id
    spaceID
    authorization {
      ...AuthorizationData
    }
    host {
      ...ContributorData
    }
    license {
      ...LicenseData
    }
    library {
      ...TemplatesSetData
    }
    defaults {
      ...DefaultData
    }
  }
  ${AuthorizationDataFragmentDoc}
  ${ContributorDataFragmentDoc}
  ${LicenseDataFragmentDoc}
  ${TemplatesSetDataFragmentDoc}
  ${DefaultDataFragmentDoc}
`;
export const ContextDataFragmentDoc = gql`
  fragment ContextData on Context {
    id
    vision
    impact
    who
    authorization {
      ...AuthorizationData
    }
  }
  ${AuthorizationDataFragmentDoc}
`;
export const MemberDataFragmentDoc = gql`
  fragment MemberData on User {
    ...UserData
    profile {
      ...ProfileDataUser
    }
  }
  ${UserDataFragmentDoc}
  ${ProfileDataUserFragmentDoc}
`;
export const GroupDataFragmentDoc = gql`
  fragment GroupData on UserGroup {
    id
    members {
      ...MemberData
    }
    profile {
      ...ProfileData
    }
  }
  ${MemberDataFragmentDoc}
  ${ProfileDataFragmentDoc}
`;
export const OrganizationDataFragmentDoc = gql`
  fragment OrganizationData on Organization {
    id
    nameID
    legalEntityName
    domain
    website
    contactEmail
    groups {
      ...GroupData
    }
    associates {
      ...MemberData
    }
    profile {
      ...ProfileDataUser
    }
    verification {
      authorization {
        ...AuthorizationData
      }
      id
      status
      lifecycle {
        ...LifecycleData
      }
    }
    preferences {
      ...PreferenceData
    }
    authorization {
      ...AuthorizationData
    }
  }
  ${GroupDataFragmentDoc}
  ${MemberDataFragmentDoc}
  ${ProfileDataUserFragmentDoc}
  ${AuthorizationDataFragmentDoc}
  ${LifecycleDataFragmentDoc}
  ${PreferenceDataFragmentDoc}
`;
export const MembersAndLeadsDataFragmentDoc = gql`
  fragment MembersAndLeadsData on Community {
    memberUsers: usersInRole(role: MEMBER) {
      ...MemberData
    }
    leadUsers: usersInRole(role: LEAD) {
      ...MemberData
    }
    adminUsers: usersInRole(role: ADMIN) {
      ...MemberData
    }
    memberOrganizations: organizationsInRole(role: MEMBER) {
      ...OrganizationData
    }
    leadOrganizations: organizationsInRole(role: LEAD) {
      ...OrganizationData
    }
    adminOrganizations: organizationsInRole(role: ADMIN) {
      ...OrganizationData
    }
  }
  ${MemberDataFragmentDoc}
  ${OrganizationDataFragmentDoc}
`;
export const ApplicationDataFragmentDoc = gql`
  fragment ApplicationData on Application {
    id
    lifecycle {
      ...LifecycleData
    }
    questions {
      id
    }
    contributor {
      ...UserData
    }
    authorization {
      myPrivileges
    }
  }
  ${LifecycleDataFragmentDoc}
  ${UserDataFragmentDoc}
`;
export const CommunityDataFragmentDoc = gql`
  fragment CommunityData on Community {
    id
    authorization {
      ...AuthorizationData
    }
    ...MembersAndLeadsData
    groups {
      ...GroupData
    }
    applications {
      ...ApplicationData
    }
    communication {
      id
      updates {
        id
        messages {
          ...MessageData
        }
        authorization {
          myPrivileges
        }
      }
      authorization {
        myPrivileges
      }
    }
  }
  ${AuthorizationDataFragmentDoc}
  ${MembersAndLeadsDataFragmentDoc}
  ${GroupDataFragmentDoc}
  ${ApplicationDataFragmentDoc}
  ${MessageDataFragmentDoc}
`;
export const CalloutDataFragmentDoc = gql`
  fragment CalloutData on Callout {
    id
    activity
    authorization {
      myPrivileges
    }
    comments {
      id
      messages {
        message
      }
      messagesCount
    }
    contributionPolicy {
      allowedContributionTypes
      id
      state
    }
    contributions {
      ...ContributionsData
    }
    createdBy {
      email
    }
    framing {
      id
      profile {
        ...ProfileData
      }
      whiteboard {
        nameID
        profile {
          ...ProfileStorageConfig
          ...ProfileData
          visual(type: CARD) {
            ...VisualUri
            __typename
          }
        }
      }
    }
    nameID
    publishedBy {
      email
    }
    publishedDate
    sortOrder
    type
    visibility
  }
  ${ContributionsDataFragmentDoc}
  ${ProfileDataFragmentDoc}
  ${ProfileStorageConfigFragmentDoc}
  ${VisualUriFragmentDoc}
`;
export const InnovationFlowDataFragmentDoc = gql`
  fragment InnovationFlowData on InnovationFlow {
    id
    profile {
      ...ProfileData
    }
    authorization {
      myPrivileges
    }
    currentState {
      ...InnovationFlowStateData
    }
    states {
      ...InnovationFlowStateData
    }
  }
  ${ProfileDataFragmentDoc}
  ${InnovationFlowStateDataFragmentDoc}
`;
export const CollaborationDataFragmentDoc = gql`
  fragment CollaborationData on Collaboration {
    id
    relations {
      id
      actorName
      actorRole
      actorType
      description
      type
      authorization {
        ...AuthorizationData
      }
    }
    callouts {
      ...CalloutData
    }
    authorization {
      myPrivileges
    }
    innovationFlow {
      ...InnovationFlowData
    }
  }
  ${AuthorizationDataFragmentDoc}
  ${CalloutDataFragmentDoc}
  ${InnovationFlowDataFragmentDoc}
`;
export const SubspaceDataFragmentDoc = gql`
  fragment SubspaceData on Space {
    id
    nameID
    metrics {
      id
      name
      value
    }
    profile {
      ...ProfileData
    }
    collaboration {
      ...CollaborationData
    }
    authorization {
      ...AuthorizationData
    }
    community {
      ...CommunityData
    }
    context {
      ...ContextData
    }
  }
  ${ProfileDataFragmentDoc}
  ${CollaborationDataFragmentDoc}
  ${AuthorizationDataFragmentDoc}
  ${CommunityDataFragmentDoc}
  ${ContextDataFragmentDoc}
`;
export const SettingsDataFragmentDoc = gql`
  fragment SettingsData on SpaceSettings {
    privacy {
      mode
      allowPlatformSupportAsAdmin
    }
    membership {
      allowSubspaceAdminsToInviteMembers
      policy
      trustedOrganizations
    }
    collaboration {
      allowMembersToCreateCallouts
      allowMembersToCreateSubspaces
      inheritMembershipRights
    }
  }
`;
export const SpaceDataFragmentDoc = gql`
  fragment SpaceData on Space {
    id
    nameID
    metrics {
      id
      name
      value
    }
    account {
      ...AccountData
    }
    authorization {
      ...AuthorizationData
    }
    context {
      ...ContextData
    }
    community {
      ...CommunityData
    }
    collaboration {
      ...CollaborationData
    }
    subspaces {
      ...SubspaceData
    }
    settings {
      ...SettingsData
    }
    profile {
      ...ProfileData
    }
  }
  ${AccountDataFragmentDoc}
  ${AuthorizationDataFragmentDoc}
  ${ContextDataFragmentDoc}
  ${CommunityDataFragmentDoc}
  ${CollaborationDataFragmentDoc}
  ${SubspaceDataFragmentDoc}
  ${SettingsDataFragmentDoc}
  ${ProfileDataFragmentDoc}
`;
export const LicensePlanDataFragmentDoc = gql`
  fragment LicensePlanData on LicensePlan {
    id
    name
    enabled
    isFree
    licenseCredential
    pricePerMonth
    requiresContactSupport
    requiresPaymentMethod
    sortOrder
    trialEnabled
  }
`;
export const LicensePolicyDataFragmentDoc = gql`
  fragment LicensePolicyData on LicensePolicy {
    id
    authorization {
      ...AuthorizationData
    }
  }
  ${AuthorizationDataFragmentDoc}
`;
export const LicensingDataFragmentDoc = gql`
  fragment LicensingData on Licensing {
    id
    plans {
      ...LicensePlanData
    }
    policy {
      ...LicensePolicyData
    }
    authorization {
      ...AuthorizationData
    }
  }
  ${LicensePlanDataFragmentDoc}
  ${LicensePolicyDataFragmentDoc}
  ${AuthorizationDataFragmentDoc}
`;
export const RelationDataFragmentDoc = gql`
  fragment RelationData on Relation {
    id
    actorName
    actorRole
    actorType
    description
    type
    authorization {
      myPrivileges
    }
  }
`;
export const TagsetDetailsFragmentDoc = gql`
  fragment TagsetDetails on Tagset {
    id
    name
    tags
    allowedValues
    type
    __typename
  }
`;
export const ReferenceDetailsFragmentDoc = gql`
  fragment ReferenceDetails on Reference {
    id
    name
    uri
    description
    __typename
  }
`;
export const VisualFullFragmentDoc = gql`
  fragment VisualFull on Visual {
    id
    uri
    name
    allowedTypes
    aspectRatio
    maxHeight
    maxWidth
    minHeight
    minWidth
    alternativeText
    __typename
  }
`;
export const WhiteboardProfileFragmentDoc = gql`
  fragment WhiteboardProfile on Profile {
    id
    displayName
    description
    visual(type: CARD) {
      ...VisualFull
      __typename
    }
    preview: visual(type: BANNER) {
      ...VisualFull
      __typename
    }
    tagset {
      ...TagsetDetails
      __typename
    }
    storageBucket {
      id
      __typename
    }
    __typename
  }
  ${VisualFullFragmentDoc}
  ${TagsetDetailsFragmentDoc}
`;
export const WhiteboardDetailsFragmentDoc = gql`
  fragment WhiteboardDetails on Whiteboard {
    id
    nameID
    createdDate
    profile {
      ...WhiteboardProfile
      __typename
    }
    authorization {
      id
      myPrivileges
      anonymousReadAccess
      __typename
    }
    contentUpdatePolicy
    createdBy {
      id
      profile {
        id
        displayName
        url
        location {
          id
          country
          city
          __typename
        }
        avatar: visual(type: AVATAR) {
          id
          uri
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
  ${WhiteboardProfileFragmentDoc}
`;
export const LinkDetailsWithAuthorizationFragmentDoc = gql`
  fragment LinkDetailsWithAuthorization on Link {
    id
    uri
    profile {
      id
      displayName
      description
    }
    authorization {
      id
      myPrivileges
    }
  }
`;
export const ReactionDetailsFragmentDoc = gql`
  fragment ReactionDetails on Reaction {
    id
    emoji
    sender {
      id
      firstName
      lastName
    }
  }
`;
export const MessageDetailsFragmentDoc = gql`
  fragment MessageDetails on Message {
    id
    message
    timestamp
    reactions {
      ...ReactionDetails
    }
    threadID
    sender {
      ...UserData
    }
  }
  ${ReactionDetailsFragmentDoc}
  ${UserDataFragmentDoc}
`;
export const CommentsWithMessagesFragmentDoc = gql`
  fragment CommentsWithMessages on Room {
    id
    messagesCount
    authorization {
      id
      myPrivileges
      anonymousReadAccess
    }
    messages {
      ...MessageDetails
    }
  }
  ${MessageDetailsFragmentDoc}
`;
export const CalloutDetailsFragmentDoc = gql`
  fragment CalloutDetails on Callout {
    id
    nameID
    type
    framing {
      profile {
        id
        displayName
        description
        tagset {
          ...TagsetDetails
          __typename
        }
        tagsets {
          ...TagsetDetails
          __typename
        }
        references {
          ...ReferenceDetails
          __typename
        }
        __typename
      }
      whiteboard {
        ...WhiteboardDetails
        __typename
      }
      __typename
    }
    contributionPolicy {
      state
      __typename
    }
    contributionDefaults {
      id
      postDescription
      whiteboardContent
      __typename
    }
    sortOrder
    activity
    contributions {
      link {
        ...LinkDetailsWithAuthorization
        __typename
      }
      __typename
    }
    comments {
      ...CommentsWithMessages
      __typename
    }
    authorization {
      id
      myPrivileges
      __typename
    }
    visibility
    __typename
  }
  ${TagsetDetailsFragmentDoc}
  ${ReferenceDetailsFragmentDoc}
  ${WhiteboardDetailsFragmentDoc}
  ${LinkDetailsWithAuthorizationFragmentDoc}
  ${CommentsWithMessagesFragmentDoc}
`;
export const PostCardFragmentDoc = gql`
  fragment PostCard on Post {
    id
    type
    createdBy {
      id
      profile {
        id
        displayName
        __typename
      }
      __typename
    }
    createdDate
    comments {
      id
      messagesCount
      __typename
    }
    profile {
      id
      url
      displayName
      description
      visuals {
        ...VisualFull
        __typename
      }
      tagset {
        ...TagsetDetails
        __typename
      }
      references {
        id
        name
        uri
        description
        __typename
      }
      __typename
    }
    __typename
  }
  ${VisualFullFragmentDoc}
  ${TagsetDetailsFragmentDoc}
`;
export const ContributeTabPostFragmentDoc = gql`
  fragment ContributeTabPost on Post {
    ...PostCard
    authorization {
      id
      myPrivileges
      __typename
    }
    __typename
  }
  ${PostCardFragmentDoc}
`;
export const CalloutFragmentDoc = gql`
  fragment Callout on Callout {
    id
    nameID
    type
    sortOrder
    activity
    authorization {
      id
      myPrivileges
      __typename
    }
    framing {
      id
      profile {
        id
        url
        displayName
        tagsets {
          ...TagsetDetails
          __typename
        }
        __typename
      }
      __typename
    }
    visibility
    __typename
  }
  ${TagsetDetailsFragmentDoc}
`;
export const CollaborationWithCalloutsFragmentDoc = gql`
  fragment CollaborationWithCallouts on Collaboration {
    id
    authorization {
      id
      myPrivileges
      __typename
    }
    callouts(groups: $groups, IDs: $calloutIds) {
      ...Callout
      __typename
    }
    __typename
  }
  ${CalloutFragmentDoc}
`;
export const AvailableUserFragmentDoc = gql`
  fragment AvailableUser on User {
    id
    profile {
      id
      displayName
      __typename
    }
    email
    __typename
  }
`;
export const PageInfoFragmentDoc = gql`
  fragment PageInfo on PageInfo {
    startCursor
    endCursor
    hasNextPage
    __typename
  }
`;
export const CommunityAvailableMemberUsersFragmentDoc = gql`
  fragment CommunityAvailableMemberUsers on Community {
    id
    availableMemberUsers(first: $first, after: $after, filter: $filter) {
      users {
        ...AvailableUser
        __typename
      }
      pageInfo {
        ...PageInfo
        __typename
      }
      __typename
    }
    __typename
  }
  ${AvailableUserFragmentDoc}
  ${PageInfoFragmentDoc}
`;
export const CommunityMemberUserFragmentDoc = gql`
  fragment CommunityMemberUser on User {
    id
    nameID
    profile {
      id
      displayName
    }
    email
    firstName
    lastName
    __typename
  }
`;
export const OrganizationDetailsFragmentDoc = gql`
  fragment OrganizationDetails on Organization {
    id
    nameID
    profile {
      id
      displayName
      __typename
    }
    __typename
  }
`;
export const CommunityMemberVirtualContributorFragmentDoc = gql`
  fragment CommunityMemberVirtualContributor on VirtualContributor {
    id
    nameID
    profile {
      id
      displayName
    }
    __typename
  }
`;
export const CommunityMembersDetailsFragmentDoc = gql`
  fragment CommunityMembersDetails on Community {
    id
    memberUsers {
      ...CommunityMemberUser
      __typename
    }
    leadUsers: usersInRole(role: LEAD) {
      ...CommunityMemberUser
      __typename
    }
    memberOrganizations: organizationsInRole(role: MEMBER) {
      ...OrganizationDetails
      __typename
    }
    leadOrganizations: organizationsInRole(role: LEAD) {
      ...OrganizationDetails
      __typename
    }
    virtualContributorsInRole(role: MEMBER) {
      ...CommunityMemberVirtualContributor
      __typename
    }
    __typename
  }
  ${CommunityMemberUserFragmentDoc}
  ${OrganizationDetailsFragmentDoc}
  ${CommunityMemberVirtualContributorFragmentDoc}
`;
export const CommunityDetailsFragmentDoc = gql`
  fragment CommunityDetails on Community {
    id
    myMembershipStatus
    authorization {
      myPrivileges
    }
    communication {
      id
      authorization {
        myPrivileges
      }
    }
  }
`;
export const PendingMembershipsJourneyProfileFragmentDoc = gql`
  fragment PendingMembershipsJourneyProfile on Profile {
    id
    displayName
    ... on Profile @include(if: $fetchDetails) {
      tagline
      tagset {
        id
        tags
      }
      cardBanner: visual(type: CARD) {
        id
        uri
      }
    }
  }
`;
export const AssignLicensePlanToAccountDocument = gql`
  mutation AssignLicensePlanToAccount($planData: AssignLicensePlanToAccount!) {
    assignLicensePlanToAccount(planData: $planData) {
      id
      spaceID
      activeSubscription {
        expires
        name
      }
      subscriptions {
        expires
        name
      }
      virtualContributors {
        account {
          id
          spaceID
          host {
            nameID
            id
          }
        }
      }
      agent {
        id
      }
      defaults {
        id
      }
      host {
        id
        nameID
      }
      library {
        id
      }
      license {
        id
        visibility
      }
    }
  }
`;
export const RevokeLicensePlanFromAccountDocument = gql`
  mutation RevokeLicensePlanFromAccount(
    $planData: RevokeLicensePlanFromAccount!
  ) {
    revokeLicensePlanFromAccount(planData: $planData) {
      id
      spaceID
      activeSubscription {
        expires
        name
      }
      subscriptions {
        expires
        name
      }
      virtualContributors {
        account {
          id
          spaceID
          host {
            nameID
            id
          }
        }
      }
      agent {
        id
      }
      defaults {
        id
      }
      host {
        id
        nameID
      }
      library {
        id
      }
      license {
        id
        visibility
      }
    }
  }
`;
export const CreateAccountDocument = gql`
  mutation CreateAccount($accountData: CreateAccountInput!) {
    createAccount(accountData: $accountData) {
      id
      spaceID
    }
  }
`;
export const AssignOrganizationRoleToUserDocument = gql`
  mutation assignOrganizationRoleToUser(
    $membershipData: AssignOrganizationRoleToUserInput!
  ) {
    assignOrganizationRoleToUser(membershipData: $membershipData) {
      id
      email
      agent {
        ...AgentData
      }
    }
  }
  ${AgentDataFragmentDoc}
`;
export const AssignPlatformRoleToUserDocument = gql`
  mutation assignPlatformRoleToUser($input: AssignPlatformRoleToUserInput!) {
    assignPlatformRoleToUser(membershipData: $input) {
      id
      email
    }
  }
`;
export const RemoveOrganizationRoleFromUserDocument = gql`
  mutation removeOrganizationRoleFromUser(
    $membershipData: RemoveOrganizationRoleFromUserInput!
  ) {
    removeOrganizationRoleFromUser(membershipData: $membershipData) {
      id
      email
      agent {
        ...AgentData
      }
    }
  }
  ${AgentDataFragmentDoc}
`;
export const RemovePlatformRoleFromUserDocument = gql`
  mutation removePlatformRoleFromUser(
    $input: RemovePlatformRoleFromUserInput!
  ) {
    removePlatformRoleFromUser(membershipData: $input) {
      id
      email
    }
  }
`;
export const CreateCalloutOnCollaborationDocument = gql`
  mutation CreateCalloutOnCollaboration(
    $calloutData: CreateCalloutOnCollaborationInput!
  ) {
    createCalloutOnCollaboration(calloutData: $calloutData) {
      ...CalloutData
    }
  }
  ${CalloutDataFragmentDoc}
`;
export const DeleteCalloutDocument = gql`
  mutation deleteCallout($calloutId: UUID!) {
    deleteCallout(deleteData: { ID: $calloutId }) {
      id
    }
  }
`;
export const DeletePostDocument = gql`
  mutation DeletePost($deleteData: DeletePostInput!) {
    deletePost(deleteData: $deleteData) {
      id
    }
  }
`;
export const DeleteWhiteboardDocument = gql`
  mutation DeleteWhiteboard($input: DeleteWhiteboardInput!) {
    deleteWhiteboard(whiteboardData: $input) {
      id
    }
  }
`;
export const UpdateCalloutDocument = gql`
  mutation UpdateCallout($calloutData: UpdateCalloutInput!) {
    updateCallout(calloutData: $calloutData) {
      ...CalloutData
    }
  }
  ${CalloutDataFragmentDoc}
`;
export const UpdateCalloutVisibilityDocument = gql`
  mutation UpdateCalloutVisibility(
    $calloutData: UpdateCalloutVisibilityInput!
  ) {
    updateCalloutVisibility(calloutData: $calloutData) {
      ...CalloutData
    }
  }
  ${CalloutDataFragmentDoc}
`;
export const CreateContributionOnCalloutDocument = gql`
  mutation CreateContributionOnCallout(
    $contributionData: CreateContributionOnCalloutInput!
  ) {
    createContributionOnCallout(contributionData: $contributionData) {
      ...ContributionsData
    }
  }
  ${ContributionsDataFragmentDoc}
`;
export const CreatePostTemplateDocument = gql`
  mutation CreatePostTemplate(
    $postTemplateInput: CreatePostTemplateOnTemplatesSetInput!
  ) {
    createPostTemplate(postTemplateInput: $postTemplateInput) {
      ...PostTemplateData
    }
  }
  ${PostTemplateDataFragmentDoc}
`;
export const CreateWhiteboardTemplateDocument = gql`
  mutation CreateWhiteboardTemplate(
    $whiteboardTemplateInput: CreateWhiteboardTemplateOnTemplatesSetInput!
  ) {
    createWhiteboardTemplate(
      whiteboardTemplateInput: $whiteboardTemplateInput
    ) {
      profile {
        id
        displayName
        description
      }
    }
  }
`;
export const DeletePostTemplateDocument = gql`
  mutation DeletePostTemplate($deleteData: DeletePostTemplateInput!) {
    deletePostTemplate(deleteData: $deleteData) {
      type
    }
  }
`;
export const UpdatePostTemplateDocument = gql`
  mutation UpdatePostTemplate($postTemplateInput: UpdatePostTemplateInput!) {
    updatePostTemplate(postTemplateInput: $postTemplateInput) {
      ...PostTemplateData
    }
  }
  ${PostTemplateDataFragmentDoc}
`;
export const AddReactionToMessageInRoomDocument = gql`
  mutation AddReactionToMessageInRoom(
    $reactionData: RoomAddReactionToMessageInput!
  ) {
    addReactionToMessageInRoom(reactionData: $reactionData) {
      id
      emoji
      sender {
        email
      }
    }
  }
`;
export const CreateDiscussionDocument = gql`
  mutation CreateDiscussion($createData: ForumCreateDiscussionInput!) {
    createDiscussion(createData: $createData) {
      ...CommunicationsDiscussionData
    }
  }
  ${CommunicationsDiscussionDataFragmentDoc}
`;
export const DeleteDiscussionDocument = gql`
  mutation DeleteDiscussion($deleteData: DeleteDiscussionInput!) {
    deleteDiscussion(deleteData: $deleteData) {
      id
    }
  }
`;
export const RemoveMessageOnRoomDocument = gql`
  mutation RemoveMessageOnRoom($messageData: RoomRemoveMessageInput!) {
    removeMessageOnRoom(messageData: $messageData)
  }
`;
export const RemoveReactionToMessageInRoomDocument = gql`
  mutation RemoveReactionToMessageInRoom(
    $reactionData: RoomRemoveReactionToMessageInput!
  ) {
    removeReactionToMessageInRoom(reactionData: $reactionData)
  }
`;
export const SendMessageReplyToRoomDocument = gql`
  mutation SendMessageReplyToRoom($messageData: RoomSendMessageReplyInput!) {
    sendMessageReplyToRoom(messageData: $messageData) {
      ...MessageData
    }
  }
  ${MessageDataFragmentDoc}
`;
export const SendMessageToCommunityLeadsDocument = gql`
  mutation SendMessageToCommunityLeads(
    $messageData: CommunicationSendMessageToCommunityLeadsInput!
  ) {
    sendMessageToCommunityLeads(messageData: $messageData)
  }
`;
export const SendMessageToOrganizationDocument = gql`
  mutation SendMessageToOrganization(
    $messageData: CommunicationSendMessageToOrganizationInput!
  ) {
    sendMessageToOrganization(messageData: $messageData)
  }
`;
export const SendMessageToRoomDocument = gql`
  mutation SendMessageToRoom($messageData: RoomSendMessageInput!) {
    sendMessageToRoom(messageData: $messageData) {
      ...MessageData
    }
  }
  ${MessageDataFragmentDoc}
`;
export const SendMessageToUserDocument = gql`
  mutation SendMessageToUser(
    $messageData: CommunicationSendMessageToUserInput!
  ) {
    sendMessageToUser(messageData: $messageData)
  }
`;
export const UpdateDiscussionDocument = gql`
  mutation UpdateDiscussion($updateData: UpdateDiscussionInput!) {
    updateDiscussion(updateData: $updateData) {
      ...CommunicationsDiscussionData
    }
  }
  ${CommunicationsDiscussionDataFragmentDoc}
`;
export const AssignCommunityRoleToUserDocument = gql`
  mutation AssignCommunityRoleToUser(
    $roleData: AssignCommunityRoleToUserInput!
  ) {
    assignCommunityRoleToUser(roleData: $roleData) {
      ...UserData
    }
  }
  ${UserDataFragmentDoc}
`;
export const RemoveCommunityRoleFromUserDocument = gql`
  mutation removeCommunityRoleFromUser(
    $roleData: RemoveCommunityRoleFromUserInput!
  ) {
    removeCommunityRoleFromUser(roleData: $roleData) {
      ...UserData
    }
  }
  ${UserDataFragmentDoc}
`;
export const JoinCommunityDocument = gql`
  mutation JoinCommunity($joinCommunityData: CommunityJoinInput!) {
    joinCommunity(joinCommunityData: $joinCommunityData) {
      id
    }
  }
`;
export const UpdatePostDocument = gql`
  mutation UpdatePost($postData: UpdatePostInput!) {
    updatePost(postData: $postData) {
      ...PostData
    }
  }
  ${PostDataFragmentDoc}
`;
export const ConvertChallengeToSpaceDocument = gql`
  mutation convertChallengeToSpace($convertData: ConvertSubspaceToSpaceInput!) {
    convertChallengeToSpace(convertData: $convertData) {
      ...SpaceData
    }
  }
  ${SpaceDataFragmentDoc}
`;
export const DeleteDocumentDocument = gql`
  mutation DeleteDocument($deleteData: DeleteDocumentInput!) {
    deleteDocument(deleteData: $deleteData) {
      id
    }
  }
`;
export const CreateSubspaceDocument = gql`
  mutation CreateSubspace($subspaceData: CreateSubspaceInput!) {
    createSubspace(subspaceData: $subspaceData) {
      ...SpaceData
    }
  }
  ${SpaceDataFragmentDoc}
`;
export const DeleteSpaceDocument = gql`
  mutation deleteSpace($deleteData: DeleteSpaceInput!) {
    deleteSpace(deleteData: $deleteData) {
      id
    }
  }
`;
export const UpdateSpaceDocument = gql`
  mutation updateSpace($spaceData: UpdateSpaceInput!) {
    updateSpace(spaceData: $spaceData) {
      ...SpaceData
    }
  }
  ${SpaceDataFragmentDoc}
`;
export const CreateLicensePlanDocument = gql`
  mutation CreateLicensePlan($LicensePlan: CreateLicensePlanOnLicensingInput!) {
    createLicensePlan(planData: $LicensePlan) {
      ...LicensePlanData
    }
  }
  ${LicensePlanDataFragmentDoc}
`;
export const DeleteLicensePlanDocument = gql`
  mutation DeleteLicensePlan($LicensePlan: DeleteLicensePlanInput!) {
    deleteLicensePlan(deleteData: $LicensePlan) {
      ...LicensePlanData
    }
  }
  ${LicensePlanDataFragmentDoc}
`;
export const UpdateLicensePlanDocument = gql`
  mutation UpdateLicensePlan($LicensePlan: UpdateLicensePlanInput!) {
    updateLicensePlan(updateData: $LicensePlan) {
      ...LicensePlanData
    }
  }
  ${LicensePlanDataFragmentDoc}
`;
export const CreateInnovationFlowTemplateDocument = gql`
  mutation CreateInnovationFlowTemplate(
    $templatesSetId: UUID!
    $profile: CreateProfileInput!
    $states: [UpdateInnovationFlowStateInput!]
    $tags: [String!]
  ) {
    createInnovationFlowTemplate(
      innovationFlowTemplateInput: {
        templatesSetID: $templatesSetId
        profile: $profile
        states: $states
        tags: $tags
      }
    ) {
      ...InnovationFlowTemplateData
    }
  }
  ${InnovationFlowTemplateDataFragmentDoc}
`;
export const EventOnApplicationDocument = gql`
  mutation eventOnApplication($input: ApplicationEventInput!) {
    eventOnApplication(applicationEventData: $input) {
      id
      lifecycle {
        ...LifecycleData
      }
    }
  }
  ${LifecycleDataFragmentDoc}
`;
export const InvitationStateEventDocument = gql`
  mutation InvitationStateEvent($input: InvitationEventInput!) {
    eventOnCommunityInvitation(invitationEventData: $input) {
      id
      authorization {
        myPrivileges
      }
      id
      lifecycle {
        ...LifecycleData
      }
    }
  }
  ${LifecycleDataFragmentDoc}
`;
export const EventOnOrganizationVerificationDocument = gql`
  mutation eventOnOrganizationVerification(
    $organizationVerificationEventData: OrganizationVerificationEventInput!
  ) {
    eventOnOrganizationVerification(
      organizationVerificationEventData: $organizationVerificationEventData
    ) {
      id
      lifecycle {
        ...LifecycleData
      }
    }
  }
  ${LifecycleDataFragmentDoc}
`;
export const UpdateInnovationFlowSelectedStateDocument = gql`
  mutation UpdateInnovationFlowSelectedState(
    $innovationFlowId: UUID!
    $selectedState: String!
  ) {
    updateInnovationFlowSelectedState(
      innovationFlowStateData: {
        innovationFlowID: $innovationFlowId
        selectedState: $selectedState
      }
    ) {
      ...InnovationFlowData
    }
  }
  ${InnovationFlowDataFragmentDoc}
`;
export const UpdateInnovationFlowStatesFromTemplateDocument = gql`
  mutation UpdateInnovationFlowStatesFromTemplate(
    $input: UpdateInnovationFlowFromTemplateInput!
  ) {
    updateInnovationFlowStatesFromTemplate(innovationFlowData: $input) {
      id
      currentState {
        displayName
      }
    }
  }
`;
export const UpdateInnovationFlowTemplateDocument = gql`
  mutation UpdateInnovationFlowTemplate(
    $templateId: UUID!
    $profile: UpdateProfileInput!
    $states: [UpdateInnovationFlowStateInput!]
  ) {
    updateInnovationFlowTemplate(
      innovationFlowTemplateInput: {
        ID: $templateId
        profile: $profile
        states: $states
      }
    ) {
      ...InnovationFlowTemplateData
    }
  }
  ${InnovationFlowTemplateDataFragmentDoc}
`;
export const ApplyForCommunityMembershipDocument = gql`
  mutation applyForCommunityMembership($applicationData: CommunityApplyInput!) {
    applyForCommunityMembership(applicationData: $applicationData) {
      ...ApplicationData
    }
  }
  ${ApplicationDataFragmentDoc}
`;
export const DeleteUserApplicationDocument = gql`
  mutation deleteUserApplication($deleteData: DeleteApplicationInput!) {
    deleteUserApplication(deleteData: $deleteData) {
      id
    }
  }
`;
export const DeleteExternalInvitationDocument = gql`
  mutation DeleteExternalInvitation($invitationId: UUID!) {
    deleteInvitationExternal(deleteData: { ID: $invitationId }) {
      id
    }
  }
`;
export const DeleteInvitationDocument = gql`
  mutation deleteInvitation($deleteData: DeleteInvitationInput!) {
    deleteInvitation(deleteData: $deleteData) {
      id
    }
  }
`;
export const InviteContributorsDocument = gql`
  mutation InviteContributors(
    $communityId: UUID!
    $contributorIds: [UUID!]!
    $message: String
  ) {
    inviteContributorsForCommunityMembership(
      invitationData: {
        communityID: $communityId
        invitedContributors: $contributorIds
        welcomeMessage: $message
      }
    ) {
      id
      lifecycle {
        state
      }
      __typename
    }
  }
`;
export const InviteExternalUserDocument = gql`
  mutation InviteExternalUser(
    $communityId: UUID!
    $email: String!
    $message: String
  ) {
    inviteForCommunityMembershipByEmail(
      invitationData: {
        email: $email
        communityID: $communityId
        welcomeMessage: $message
      }
    ) {
      ... on InvitationExternal {
        id
        __typename
      }
      ... on Invitation {
        id
        __typename
      }
      __typename
    }
  }
`;
export const AssignCommunityRoleToOrganizationDocument = gql`
  mutation AssignCommunityRoleToOrganization(
    $roleData: AssignCommunityRoleToOrganizationInput!
  ) {
    assignCommunityRoleToOrganization(roleData: $roleData) {
      ...OrganizationData
    }
  }
  ${OrganizationDataFragmentDoc}
`;
export const AssignOrganizationAsCommunityLeadDocument = gql`
  mutation AssignOrganizationAsCommunityLead(
    $roleData: AssignCommunityRoleToOrganizationInput!
  ) {
    assignCommunityRoleToOrganization(roleData: $roleData) {
      ...OrganizationData
    }
  }
  ${OrganizationDataFragmentDoc}
`;
export const AssignOrganizationAsCommunityMemberDocument = gql`
  mutation AssignOrganizationAsCommunityMember(
    $roleData: AssignCommunityRoleToOrganizationInput!
  ) {
    assignCommunityRoleToOrganization(roleData: $roleData) {
      ...OrganizationData
    }
  }
  ${OrganizationDataFragmentDoc}
`;
export const CreateOrganizationDocument = gql`
  mutation CreateOrganization($organizationData: CreateOrganizationInput!) {
    createOrganization(organizationData: $organizationData) {
      ...OrganizationData
    }
  }
  ${OrganizationDataFragmentDoc}
`;
export const DeleteOrganizationDocument = gql`
  mutation deleteOrganization($deleteData: DeleteOrganizationInput!) {
    deleteOrganization(deleteData: $deleteData) {
      id
    }
  }
`;
export const RemoveCommunityRoleFromOrganizationDocument = gql`
  mutation RemoveCommunityRoleFromOrganization(
    $roleData: RemoveCommunityRoleFromOrganizationInput!
  ) {
    removeCommunityRoleFromOrganization(roleData: $roleData) {
      ...OrganizationData
    }
  }
  ${OrganizationDataFragmentDoc}
`;
export const UpdateOrganizationDocument = gql`
  mutation updateOrganization($organizationData: UpdateOrganizationInput!) {
    updateOrganization(organizationData: $organizationData) {
      ...OrganizationData
    }
  }
  ${OrganizationDataFragmentDoc}
`;
export const CreateInnovationHubDocument = gql`
  mutation CreateInnovationHub($input: CreateInnovationHubInput!) {
    createInnovationHub(createData: $input) {
      id
      nameID
      profile {
        displayName
        visuals {
          id
        }
      }
      type
      spaceListFilter {
        id
        nameID
        profile {
          displayName
        }
      }
      spaceVisibilityFilter
    }
  }
`;
export const CreateInnovationPackOnLibraryDocument = gql`
  mutation CreateInnovationPackOnLibrary(
    $data: CreateInnovationPackOnLibraryInput!
  ) {
    createInnovationPackOnLibrary(packData: $data) {
      id
      nameID
      provider {
        id
        nameID
      }
      templates {
        id
        postTemplates {
          id
        }
        whiteboardTemplates {
          id
        }
        whiteboardTemplates {
          id
        }
      }
    }
  }
`;
export const DeleteInnovationFlowTemplateDocument = gql`
  mutation DeleteInnovationFlowTemplate(
    $deleteData: DeleteInnovationFlowTemplateInput!
  ) {
    deleteInnovationFlowTemplate(deleteData: $deleteData) {
      id
    }
  }
`;
export const DeleteInnovationHubDocument = gql`
  mutation DeleteInnovationHub($input: DeleteInnovationHubInput!) {
    deleteInnovationHub(deleteData: $input) {
      id
    }
  }
`;
export const UpdateAccountPlatformSettingsDocument = gql`
  mutation UpdateAccountPlatformSettings(
    $accountID: UUID!
    $hostID: UUID_NAMEID
    $license: UpdateLicenseInput
  ) {
    updateAccountPlatformSettings(
      updateData: { hostID: $hostID, license: $license, accountID: $accountID }
    ) {
      id
      spaceID
      license {
        id
        visibility
      }
      host {
        id
      }
    }
  }
`;
export const UpdateSpacePlatformSettingsDocument = gql`
  mutation UpdateSpacePlatformSettings($spaceID: UUID!, $nameID: NameID!) {
    updateSpacePlatformSettings(
      updateData: { spaceID: $spaceID, nameID: $nameID }
    ) {
      id
      nameID
    }
  }
`;
export const UpdatePreferenceOnOrganizationDocument = gql`
  mutation updatePreferenceOnOrganization(
    $preferenceData: UpdateOrganizationPreferenceInput!
  ) {
    updatePreferenceOnOrganization(preferenceData: $preferenceData) {
      ...PreferenceData
    }
  }
  ${PreferenceDataFragmentDoc}
`;
export const UpdatePreferenceOnUserDocument = gql`
  mutation UpdatePreferenceOnUser($preferenceData: UpdateUserPreferenceInput!) {
    updatePreferenceOnUser(preferenceData: $preferenceData) {
      ...PreferenceData
    }
  }
  ${PreferenceDataFragmentDoc}
`;
export const CreateReferenceOnProfileDocument = gql`
  mutation CreateReferenceOnProfile(
    $referenceInput: CreateReferenceOnProfileInput!
  ) {
    createReferenceOnProfile(referenceInput: $referenceInput) {
      ...ReferenceData
    }
  }
  ${ReferenceDataFragmentDoc}
`;
export const DeleteReferenceDocument = gql`
  mutation DeleteReference($deleteData: DeleteReferenceInput!) {
    deleteReference(deleteData: $deleteData) {
      id
    }
  }
`;
export const CreateRelationOnCollaborationDocument = gql`
  mutation CreateRelationOnCollaboration(
    $data: CreateRelationOnCollaborationInput!
  ) {
    createRelationOnCollaboration(relationData: $data) {
      ...RelationData
    }
  }
  ${RelationDataFragmentDoc}
`;
export const DeleteRelationDocument = gql`
  mutation DeleteRelation($deleteData: DeleteRelationInput!) {
    deleteRelation(deleteData: $deleteData) {
      id
    }
  }
`;
export const UpdateSpaceSettingsDocument = gql`
  mutation UpdateSpaceSettings($settingsData: UpdateSpaceSettingsInput!) {
    updateSpaceSettings(settingsData: $settingsData) {
      id
      settings {
        ...SettingsData
      }
    }
  }
  ${SettingsDataFragmentDoc}
`;
export const CreateUserDocument = gql`
  mutation CreateUser($userData: CreateUserInput!) {
    createUser(userData: $userData) {
      ...UserData
    }
  }
  ${UserDataFragmentDoc}
`;
export const DeleteUserDocument = gql`
  mutation deleteUser($deleteData: DeleteUserInput!) {
    deleteUser(deleteData: $deleteData) {
      id
    }
  }
`;
export const UpdateUserDocument = gql`
  mutation updateUser($userData: UpdateUserInput!) {
    updateUser(userData: $userData) {
      ...UserData
    }
  }
  ${UserDataFragmentDoc}
`;
export const GetActivityLogOnCollaborationDocument = gql`
  query GetActivityLogOnCollaboration($queryData: ActivityLogInput!) {
    activityLogOnCollaboration(queryData: $queryData) {
      collaborationID
      triggeredBy {
        id
      }
      description
      type
    }
  }
`;
export const SpaceCalloutDocument = gql`
  query SpaceCallout($spaceNameId: UUID_NAMEID!, $calloutId: UUID_NAMEID!) {
    space(ID: $spaceNameId) {
      id
      collaboration {
        callouts(IDs: [$calloutId]) {
          ...CalloutData
        }
      }
    }
  }
  ${CalloutDataFragmentDoc}
`;
export const CalloutDetailsDocument = gql`
  query CalloutDetails($calloutId: UUID!) {
    lookup {
      callout(ID: $calloutId) {
        ...CalloutDetails
        __typename
      }
      __typename
    }
  }
  ${CalloutDetailsFragmentDoc}
`;
export const CalloutStorageConfigDocument = gql`
  query CalloutStorageConfig($calloutId: UUID!) {
    lookup {
      callout(ID: $calloutId) {
        id
        framing {
          id
          profile {
            ...ProfileStorageConfig
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
  }
  ${ProfileStorageConfigFragmentDoc}
`;
export const CalloutLinkContributionStorageConfigDocument = gql`
  query CalloutLinkContributionStorageConfig(
    $linkId: UUID!
    $calloutId: UUID!
  ) {
    lookup {
      callout(ID: $calloutId) {
        id
        contributions(filter: { linkIDs: [$linkId] }) {
          link {
            id
            profile {
              ...ProfileStorageConfig
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
  }
  ${ProfileStorageConfigFragmentDoc}
`;
export const CalloutPostStorageConfigDocument = gql`
  query CalloutPostStorageConfig($postId: UUID_NAMEID!, $calloutId: UUID!) {
    lookup {
      callout(ID: $calloutId) {
        id
        contributions(filter: { postIDs: [$postId] }) {
          post {
            id
            profile {
              ...ProfileStorageConfig
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
  }
  ${ProfileStorageConfigFragmentDoc}
`;
export const GetCalloutPostsDocument = gql`
  query GetCalloutPosts($calloutId: UUID!) {
    lookup {
      callout(ID: $calloutId) {
        id
        contributions {
          post {
            ...ContributeTabPost
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
  }
  ${ContributeTabPostFragmentDoc}
`;
export const CalloutWhiateboardStorageConfigDocument = gql`
  query CalloutWhiateboardStorageConfig(
    $whiteboardId: UUID_NAMEID!
    $calloutId: UUID!
  ) {
    lookup {
      callout(ID: $calloutId) {
        id
        contributions(filter: { whiteboardIDs: [$whiteboardId] }) {
          whiteboard {
            id
            profile {
              ...ProfileStorageConfig
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
  }
  ${ProfileStorageConfigFragmentDoc}
`;
export const GetCalloutsDocument = gql`
  query GetCallouts(
    $collaborationId: UUID!
    $groups: [String!]
    $calloutIds: [UUID_NAMEID!]
  ) {
    lookup {
      collaboration(ID: $collaborationId) {
        ...CollaborationWithCallouts
        __typename
      }
      __typename
    }
  }
  ${CollaborationWithCalloutsFragmentDoc}
`;
export const CalloutDocument = gql`
  query Callout(
    $collaborationId: UUID!
    $groups: [String!]
    $calloutIds: [UUID_NAMEID!]
  ) {
    lookup {
      collaboration(ID: $collaborationId) {
        ...CollaborationWithCallouts
        __typename
      }
      __typename
    }
  }
  ${CollaborationWithCalloutsFragmentDoc}
`;
export const GetPostDataDocument = gql`
  query GetPostData($postId: UUID!) {
    lookup {
      post(ID: $postId) {
        ...PostData
      }
    }
  }
  ${PostDataFragmentDoc}
`;
export const GetPostPerJourneyDocument = gql`
  query GetPostPerJourney($spaceId: UUID_NAMEID!) {
    space(ID: $spaceId) {
      collaboration {
        callouts {
          posts {
            ...PostData
          }
        }
      }
    }
  }
  ${PostDataFragmentDoc}
`;
export const WhiteboardCalloutStorageConfigDocument = gql`
  query WhiteboardCalloutStorageConfig($calloutId: UUID!) {
    lookup {
      callout(ID: $calloutId) {
        id
        framing {
          whiteboard {
            profile {
              ...ProfileStorageConfig
            }
          }
        }
      }
    }
  }
  ${ProfileStorageConfigFragmentDoc}
`;
export const GetPlatformDiscussionsDataDocument = gql`
  query GetPlatformDiscussionsData {
    platform {
      forum {
        id
        discussions {
          ...CommunicationsDiscussionData
        }
      }
    }
  }
  ${CommunicationsDiscussionDataFragmentDoc}
`;
export const GetPlatformDiscussionsDataByIdDocument = gql`
  query GetPlatformDiscussionsDataById($discussionId: String!) {
    platform {
      forum {
        id
        discussion(ID: $discussionId) {
          ...CommunicationsDiscussionData
        }
      }
    }
  }
  ${CommunicationsDiscussionDataFragmentDoc}
`;
export const GetPlatformForumDataDocument = gql`
  query GetPlatformForumData {
    platform {
      id
      forum {
        id
        discussions {
          id
          comments {
            id
            messages {
              message
              reactions {
                id
                emoji
                sender {
                  email
                }
              }
            }
          }
        }
      }
    }
  }
`;
export const GetSubspaceAvailableMembersDocument = gql`
  query GetSubspaceAvailableMembers(
    $spaceId: UUID_NAMEID!
    $subspaceId: UUID_NAMEID!
  ) {
    space(ID: $spaceId) {
      id
      subspace(ID: $subspaceId) {
        community {
          id
          ...MembersAndLeadsData
        }
      }
    }
  }
  ${MembersAndLeadsDataFragmentDoc}
`;
export const GetSubspaceCommunityDocument = gql`
  query getSubspaceCommunity(
    $spaceId: UUID_NAMEID!
    $subspaceId: UUID_NAMEID!
  ) {
    space(ID: $spaceId) {
      id
      subspace(ID: $subspaceId) {
        community {
          id
          ...MembersAndLeadsData
        }
      }
    }
  }
  ${MembersAndLeadsDataFragmentDoc}
`;
export const CommunityAvailableMembersDocument = gql`
  query CommunityAvailableMembers(
    $communityId: UUID!
    $first: Int!
    $after: UUID
    $filter: UserFilterInput
  ) {
    lookup {
      availableMembers: community(ID: $communityId) {
        ...CommunityAvailableMemberUsers
        __typename
      }
      __typename
    }
  }
  ${CommunityAvailableMemberUsersFragmentDoc}
`;
export const CommunityApplicationsInvitationsDocument = gql`
  query CommunityApplicationsInvitations($communityId: UUID!) {
    lookup {
      community(ID: $communityId) {
        id
        applications {
          ...ApplicationData
        }
        invitations {
          ...InvitationData
        }
        invitationsExternal {
          ...InvitationDataExternal
        }
      }
    }
  }
  ${ApplicationDataFragmentDoc}
  ${InvitationDataFragmentDoc}
  ${InvitationDataExternalFragmentDoc}
`;
export const CommunityMembersListDocument = gql`
  query CommunityMembersList(
    $communityId: UUID!
    $spaceId: UUID_NAMEID = "00000000-0000-0000-0000-000000000000"
    $includeSpaceHost: Boolean = false
  ) {
    space(ID: $spaceId) @include(if: $includeSpaceHost) {
      account {
        host {
          ...OrganizationDetails
          __typename
        }
        __typename
      }
      __typename
    }
    lookup {
      community(ID: $communityId) {
        ...CommunityMembersDetails
        __typename
      }
      __typename
    }
  }
  ${OrganizationDetailsFragmentDoc}
  ${CommunityMembersDetailsFragmentDoc}
`;
export const CommunityUserPrivilegesDocument = gql`
  query CommunityUserPrivileges($communityId: UUID!) {
    lookup {
      community(ID: $communityId) {
        id
        authorization {
          myPrivileges
        }
      }
    }
  }
`;
export const CommunityUserPrivilegesToChallengeDocument = gql`
  query CommunityUserPrivilegesToChallenge(
    $spaceId: UUID_NAMEID!
    $subspaceId: UUID_NAMEID!
    $includeDetails: Boolean = false
  ) {
    space(ID: $spaceId) {
      id
      subspace(ID: $subspaceId) {
        id
        authorization {
          myPrivileges
        }
        profile {
          id
          displayName
        }
        community {
          id
          ...CommunityDetails @include(if: $includeDetails)
        }
      }
    }
  }
  ${CommunityDetailsFragmentDoc}
`;
export const CommunityUserPrivilegesToOpportunityDocument = gql`
  query CommunityUserPrivilegesToOpportunity(
    $spaceId: UUID_NAMEID!
    $opportunityId: UUID_NAMEID!
    $includeDetails: Boolean = false
  ) {
    space(ID: $spaceId) {
      id
    }
  }
`;
export const CommunityUserPrivilegesToSpaceDocument = gql`
  query CommunityUserPrivilegesToSpace($spaceNameId: UUID_NAMEID!) {
    space(ID: $spaceNameId) {
      id
      spaceCommunity: community {
        id
        myMembershipStatus
        authorization {
          myPrivileges
        }
      }
    }
  }
`;
export const GetOpportunityAvailableMembersDocument = gql`
  query GetOpportunityAvailableMembers(
    $spaceId: UUID_NAMEID!
    $opportunityId: UUID_NAMEID!
  ) {
    space(ID: $spaceId) {
      id
    }
  }
`;
export const GetSpaceAvailableMembersDocument = gql`
  query GetSpaceAvailableMembers($spaceId: UUID_NAMEID!) {
    space(ID: $spaceId) {
      id
      community {
        id
        ...MembersAndLeadsData
      }
    }
  }
  ${MembersAndLeadsDataFragmentDoc}
`;
export const GetSpaceCommunityDocument = gql`
  query getSpaceCommunity($spaceId: UUID_NAMEID!) {
    space(ID: $spaceId) {
      id
      community {
        id
        ...MembersAndLeadsData
      }
    }
  }
  ${MembersAndLeadsDataFragmentDoc}
`;
export const GetSpaceInvitationsDocument = gql`
  query getSpaceInvitations($spaceId: UUID_NAMEID!) {
    space(ID: $spaceId) {
      id
      community {
        invitations {
          ...InvitationData
        }
        invitationsExternal {
          ...InvitationDataExternal
        }
      }
    }
  }
  ${InvitationDataFragmentDoc}
  ${InvitationDataExternalFragmentDoc}
`;
export const PendingMembershipsSpaceDocument = gql`
  query PendingMembershipsSpace(
    $spaceId: UUID_NAMEID!
    $fetchDetails: Boolean! = false
  ) {
    space(ID: $spaceId) {
      id
      nameID
      profile {
        ...PendingMembershipsJourneyProfile
      }
      __typename
    }
  }
  ${PendingMembershipsJourneyProfileFragmentDoc}
`;
export const ConfigurationDocument = gql`
  query configuration {
    platform {
      configuration {
        authentication {
          providers {
            name
            label
            icon
            enabled
            config {
              __typename
              ... on OryConfig {
                issuer
                kratosPublicBaseURL
              }
            }
          }
        }
      }
    }
  }
`;
export const GetContextDataDocument = gql`
  query GetContextData($spaceId: UUID_NAMEID!, $subspaceId: UUID_NAMEID!) {
    space(ID: $spaceId) {
      subspace(ID: $subspaceId) {
        ...SubspaceData
      }
    }
  }
  ${SubspaceDataFragmentDoc}
`;
export const GetChallengeDocumentAndStorageDataDocument = gql`
  query GetChallengeDocumentAndStorageData(
    $ID: UUID_NAMEID!
    $challengeID: UUID_NAMEID!
  ) {
    space(ID: $ID) {
      subspace(ID: $challengeID) {
        profile {
          storageBucket {
            id
            authorization {
              anonymousReadAccess
              myPrivileges
            }
            id
            parentEntity {
              displayName
              id
              type
              url
            }
            documents {
              id
              authorization {
                anonymousReadAccess
                myPrivileges
              }
              displayName
              url
              createdBy {
                email
              }
            }
          }
          visuals {
            id
            name
            uri
            authorization {
              anonymousReadAccess
              myPrivileges
            }
          }
        }
      }
    }
  }
`;
export const PrivateSpaceDataDocument = gql`
  query PrivateSpaceData($nameId: UUID_NAMEID!) {
    space(ID: $nameId) {
      nameID
      authorization {
        ...AuthorizationData
      }
    }
  }
  ${AuthorizationDataFragmentDoc}
`;
export const GetSpaceDataDocument = gql`
  query GetSpaceData($spaceId: UUID_NAMEID!) {
    space(ID: $spaceId) {
      ...SpaceData
    }
  }
  ${SpaceDataFragmentDoc}
`;
export const GetSpaceDocumentAndStorageDataDocument = gql`
  query getSpaceDocumentAndStorageData($ID: UUID_NAMEID!) {
    space(ID: $ID) {
      profile {
        storageBucket {
          id
          authorization {
            anonymousReadAccess
            myPrivileges
          }
          id
          parentEntity {
            displayName
            id
            type
            url
          }
          documents {
            id
            authorization {
              anonymousReadAccess
              myPrivileges
            }
            displayName
            url
            createdBy {
              email
            }
          }
        }
        visuals {
          id
          name
          uri
          authorization {
            anonymousReadAccess
            myPrivileges
          }
        }
      }
    }
  }
`;
export const GetSpacesDataDocument = gql`
  query GetSpacesData {
    spaces {
      id
    }
  }
`;
export const GetSpacesFilteredByVisibilityWithAccessDocument = gql`
  query GetSpacesFilteredByVisibilityWithAccess(
    $spaceIDs: [UUID!]
    $spaceFilter: SpaceFilterInput
  ) {
    spaces(IDs: $spaceIDs, filter: $spaceFilter) {
      nameID
      account {
        license {
          ...LicenseData
        }
      }
      subspaces {
        id
      }
      authorization {
        ...AuthorizationData
      }
    }
  }
  ${LicenseDataFragmentDoc}
  ${AuthorizationDataFragmentDoc}
`;
export const GetSubspacePageDocument = gql`
  query GetSubspacePage($spaceId: UUID_NAMEID!, $subspaceId: UUID_NAMEID!) {
    space(ID: $spaceId) {
      subspace(ID: $subspaceId) {
        ...SpaceData
      }
    }
  }
  ${SpaceDataFragmentDoc}
`;
export const GetSubspacesDataDocument = gql`
  query GetSubspacesData($spaceId: UUID_NAMEID!) {
    space(ID: $spaceId) {
      id
      subspaces {
        id
        ...SpaceData
      }
    }
  }
  ${SpaceDataFragmentDoc}
`;
export const GetUserRolesDocument = gql`
  query GetUserRoles($rolesData: RolesUserInput!) {
    rolesUser(rolesData: $rolesData) {
      spaces {
        nameID
        id
        roles
        subspaces {
          nameID
          id
          roles
        }
        visibility
      }
      organizations {
        nameID
        id
        roles
      }
    }
  }
`;
export const LookupProfileVisualsDocument = gql`
  query lookupProfileVisuals($ID: UUID!) {
    lookup {
      profile(ID: $ID) {
        description
        displayName
        storageBucket {
          authorization {
            anonymousReadAccess
            myPrivileges
          }
          id
          parentEntity {
            displayName
            id
            type
            url
          }
          documents {
            id
            authorization {
              anonymousReadAccess
              myPrivileges
            }
            displayName
            url
            createdBy {
              email
            }
          }
        }
        visuals {
          id
          name
          uri
          authorization {
            anonymousReadAccess
            myPrivileges
          }
        }
      }
    }
  }
`;
export const GetOrgReferenceUriDocument = gql`
  query GetOrgReferenceUri($organizationId: UUID_NAMEID!) {
    organization(ID: $organizationId) {
      nameID
      profile {
        references {
          id
          description
          uri
          name
        }
      }
    }
  }
`;
export const GetOrgVisualUriDocument = gql`
  query GetOrgVisualUri($organizationId: UUID_NAMEID!) {
    organization(ID: $organizationId) {
      nameID
      profile {
        visuals {
          id
          name
          uri
        }
      }
    }
  }
`;
export const GetOrganizationDataDocument = gql`
  query getOrganizationData($organizationId: UUID_NAMEID!) {
    organization(ID: $organizationId) {
      ...OrganizationData
    }
  }
  ${OrganizationDataFragmentDoc}
`;
export const GetOrganizationDocumentAndStorageDataDocument = gql`
  query GetOrganizationDocumentAndStorageData($ID: UUID_NAMEID!) {
    organization(ID: $ID) {
      profile {
        storageBucket {
          id
          authorization {
            anonymousReadAccess
            myPrivileges
          }
          id
          parentEntity {
            displayName
            id
            type
            url
          }
          documents {
            id
            authorization {
              anonymousReadAccess
              myPrivileges
            }
            displayName
            url
            createdBy {
              email
            }
          }
        }
        visuals {
          id
          name
          uri
          authorization {
            anonymousReadAccess
            myPrivileges
          }
        }
      }
    }
  }
`;
export const GetRolesOrganizationDocument = gql`
  query GetRolesOrganization($organizationID: UUID_NAMEID!) {
    rolesOrganization(rolesData: { organizationID: $organizationID }) {
      spaces {
        id
        nameID
        roles
        subspaces {
          displayName
          nameID
          id
          roles
        }
      }
      organizations {
        nameID
        id
        roles
      }
    }
  }
`;
export const OrganizationsPaginatedDocument = gql`
  query OrganizationsPaginated(
    $first: Int
    $last: Int
    $before: UUID
    $after: UUID
    $filter: OrganizationFilterInput
  ) {
    organizationsPaginated(
      first: $first
      last: $last
      before: $before
      after: $after
      filter: $filter
    ) {
      organization {
        ...OrganizationData
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
    }
  }
  ${OrganizationDataFragmentDoc}
`;
export const UsersPaginatedDocument = gql`
  query UsersPaginated(
    $first: Int
    $last: Int
    $before: UUID
    $after: UUID
    $filter: UserFilterInput
  ) {
    usersPaginated(
      first: $first
      last: $last
      before: $before
      after: $after
      filter: $filter
    ) {
      users {
        ...UserData
      }
      pageInfo {
        startCursor
        endCursor
        hasNextPage
        hasPreviousPage
      }
    }
  }
  ${UserDataFragmentDoc}
`;
export const GetOrgVisualUriInnovationHubDocument = gql`
  query GetOrgVisualUriInnovationHub($ID: UUID_NAMEID!) {
    platform {
      innovationHub(id: $ID) {
        profile {
          visuals {
            uri
          }
        }
      }
    }
  }
`;
export const SearchContributorDocument = gql`
  query searchContributor($searchData: SearchInput!) {
    search(searchData: $searchData) {
      contributorResultsCount
      contributorResults {
        score
        terms
        type
        ... on SearchResultUser {
          user {
            id
            profile {
              displayName
            }
          }
          type
        }
        ... on SearchResultOrganization {
          organization {
            id
            profile {
              displayName
            }
          }
          type
        }
      }
    }
  }
`;
export const SearchJourneyDocument = gql`
  query searchJourney($searchData: SearchInput!) {
    search(searchData: $searchData) {
      journeyResultsCount
      journeyResults {
        score
        terms
        type
        ... on SearchResultSpace {
          space {
            id
            profile {
              displayName
            }
          }
          type
        }
      }
    }
  }
`;
export const SearchContributionsDocument = gql`
  query searchContributions($searchData: SearchInput!) {
    search(searchData: $searchData) {
      contributionResultsCount
      contributionResults {
        id
        score
        terms
        type
        ... on SearchResultPost {
          space {
            id
            profile {
              displayName
            }
          }
          callout {
            id
            framing {
              profile {
                displayName
              }
            }
          }
          post {
            id
            profile {
              displayName
            }
          }
        }
      }
    }
  }
`;
export const GetChallengeApplicationsDocument = gql`
  query getChallengeApplications(
    $spaceId: UUID_NAMEID!
    $subspaceId: UUID_NAMEID!
  ) {
    space(ID: $spaceId) {
      id
      subspace(ID: $subspaceId) {
        community {
          applications {
            ...ApplicationData
          }
        }
      }
    }
  }
  ${ApplicationDataFragmentDoc}
`;
export const GetSpaceApplicationsDocument = gql`
  query getSpaceApplications($spaceId: UUID_NAMEID!) {
    space(ID: spaceId) {
      id
      community {
        applications {
          ...ApplicationData
        }
      }
    }
  }
  ${ApplicationDataFragmentDoc}
`;
export const GetUserDataDocument = gql`
  query getUserData($userId: UUID_NAMEID_EMAIL!) {
    user(ID: $userId) {
      ...UserData
    }
  }
  ${UserDataFragmentDoc}
`;
export const GetUserDocumentAndStorageDataDocument = gql`
  query GetUserDocumentAndStorageData($ID: UUID_NAMEID_EMAIL!) {
    user(ID: $ID) {
      profile {
        storageBucket {
          id
          authorization {
            anonymousReadAccess
            myPrivileges
          }
          id
          parentEntity {
            displayName
            id
            type
            url
          }
          documents {
            id
            authorization {
              anonymousReadAccess
              myPrivileges
            }
            displayName
            url
            createdBy {
              email
            }
          }
        }
        visuals {
          id
          name
          uri
          authorization {
            anonymousReadAccess
            myPrivileges
          }
        }
      }
    }
  }
`;
export const GetUserReferenceUriDocument = gql`
  query GetUserReferenceUri($userId: UUID_NAMEID_EMAIL!) {
    user(ID: $userId) {
      nameID
      profile {
        references {
          id
          description
          uri
          name
        }
      }
    }
  }
`;
export const GetUsersDataDocument = gql`
  query getUsersData {
    users {
      ...UserData
    }
  }
  ${UserDataFragmentDoc}
`;
export const MeDocument = gql`
  query me {
    me {
      communityApplications {
        application {
          id
          lifecycle {
            state
          }
        }
        space {
          id
        }
      }
      communityInvitations {
        invitation {
          id
          lifecycle {
            state
          }
        }
        space {
          id
        }
      }
      spaceMemberships {
        id
        nameID
      }
    }
  }
`;

export type SdkFunctionWrapper = <T>(
  action: (requestHeaders?: Record<string, string>) => Promise<T>,
  operationName: string,
  operationType?: string
) => Promise<T>;

const defaultWrapper: SdkFunctionWrapper = (
  action,
  _operationName,
  _operationType
) => action();
const AssignLicensePlanToAccountDocumentString = print(
  AssignLicensePlanToAccountDocument
);
const RevokeLicensePlanFromAccountDocumentString = print(
  RevokeLicensePlanFromAccountDocument
);
const CreateAccountDocumentString = print(CreateAccountDocument);
const AssignOrganizationRoleToUserDocumentString = print(
  AssignOrganizationRoleToUserDocument
);
const AssignPlatformRoleToUserDocumentString = print(
  AssignPlatformRoleToUserDocument
);
const RemoveOrganizationRoleFromUserDocumentString = print(
  RemoveOrganizationRoleFromUserDocument
);
const RemovePlatformRoleFromUserDocumentString = print(
  RemovePlatformRoleFromUserDocument
);
const CreateCalloutOnCollaborationDocumentString = print(
  CreateCalloutOnCollaborationDocument
);
const DeleteCalloutDocumentString = print(DeleteCalloutDocument);
const DeletePostDocumentString = print(DeletePostDocument);
const DeleteWhiteboardDocumentString = print(DeleteWhiteboardDocument);
const UpdateCalloutDocumentString = print(UpdateCalloutDocument);
const UpdateCalloutVisibilityDocumentString = print(
  UpdateCalloutVisibilityDocument
);
const CreateContributionOnCalloutDocumentString = print(
  CreateContributionOnCalloutDocument
);
const CreatePostTemplateDocumentString = print(CreatePostTemplateDocument);
const CreateWhiteboardTemplateDocumentString = print(
  CreateWhiteboardTemplateDocument
);
const DeletePostTemplateDocumentString = print(DeletePostTemplateDocument);
const UpdatePostTemplateDocumentString = print(UpdatePostTemplateDocument);
const AddReactionToMessageInRoomDocumentString = print(
  AddReactionToMessageInRoomDocument
);
const CreateDiscussionDocumentString = print(CreateDiscussionDocument);
const DeleteDiscussionDocumentString = print(DeleteDiscussionDocument);
const RemoveMessageOnRoomDocumentString = print(RemoveMessageOnRoomDocument);
const RemoveReactionToMessageInRoomDocumentString = print(
  RemoveReactionToMessageInRoomDocument
);
const SendMessageReplyToRoomDocumentString = print(
  SendMessageReplyToRoomDocument
);
const SendMessageToCommunityLeadsDocumentString = print(
  SendMessageToCommunityLeadsDocument
);
const SendMessageToOrganizationDocumentString = print(
  SendMessageToOrganizationDocument
);
const SendMessageToRoomDocumentString = print(SendMessageToRoomDocument);
const SendMessageToUserDocumentString = print(SendMessageToUserDocument);
const UpdateDiscussionDocumentString = print(UpdateDiscussionDocument);
const AssignCommunityRoleToUserDocumentString = print(
  AssignCommunityRoleToUserDocument
);
const RemoveCommunityRoleFromUserDocumentString = print(
  RemoveCommunityRoleFromUserDocument
);
const JoinCommunityDocumentString = print(JoinCommunityDocument);
const UpdatePostDocumentString = print(UpdatePostDocument);
const ConvertChallengeToSpaceDocumentString = print(
  ConvertChallengeToSpaceDocument
);
const DeleteDocumentDocumentString = print(DeleteDocumentDocument);
const CreateSubspaceDocumentString = print(CreateSubspaceDocument);
const DeleteSpaceDocumentString = print(DeleteSpaceDocument);
const UpdateSpaceDocumentString = print(UpdateSpaceDocument);
const CreateLicensePlanDocumentString = print(CreateLicensePlanDocument);
const DeleteLicensePlanDocumentString = print(DeleteLicensePlanDocument);
const UpdateLicensePlanDocumentString = print(UpdateLicensePlanDocument);
const CreateInnovationFlowTemplateDocumentString = print(
  CreateInnovationFlowTemplateDocument
);
const EventOnApplicationDocumentString = print(EventOnApplicationDocument);
const InvitationStateEventDocumentString = print(InvitationStateEventDocument);
const EventOnOrganizationVerificationDocumentString = print(
  EventOnOrganizationVerificationDocument
);
const UpdateInnovationFlowSelectedStateDocumentString = print(
  UpdateInnovationFlowSelectedStateDocument
);
const UpdateInnovationFlowStatesFromTemplateDocumentString = print(
  UpdateInnovationFlowStatesFromTemplateDocument
);
const UpdateInnovationFlowTemplateDocumentString = print(
  UpdateInnovationFlowTemplateDocument
);
const ApplyForCommunityMembershipDocumentString = print(
  ApplyForCommunityMembershipDocument
);
const DeleteUserApplicationDocumentString = print(
  DeleteUserApplicationDocument
);
const DeleteExternalInvitationDocumentString = print(
  DeleteExternalInvitationDocument
);
const DeleteInvitationDocumentString = print(DeleteInvitationDocument);
const InviteContributorsDocumentString = print(InviteContributorsDocument);
const InviteExternalUserDocumentString = print(InviteExternalUserDocument);
const AssignCommunityRoleToOrganizationDocumentString = print(
  AssignCommunityRoleToOrganizationDocument
);
const AssignOrganizationAsCommunityLeadDocumentString = print(
  AssignOrganizationAsCommunityLeadDocument
);
const AssignOrganizationAsCommunityMemberDocumentString = print(
  AssignOrganizationAsCommunityMemberDocument
);
const CreateOrganizationDocumentString = print(CreateOrganizationDocument);
const DeleteOrganizationDocumentString = print(DeleteOrganizationDocument);
const RemoveCommunityRoleFromOrganizationDocumentString = print(
  RemoveCommunityRoleFromOrganizationDocument
);
const UpdateOrganizationDocumentString = print(UpdateOrganizationDocument);
const CreateInnovationHubDocumentString = print(CreateInnovationHubDocument);
const CreateInnovationPackOnLibraryDocumentString = print(
  CreateInnovationPackOnLibraryDocument
);
const DeleteInnovationFlowTemplateDocumentString = print(
  DeleteInnovationFlowTemplateDocument
);
const DeleteInnovationHubDocumentString = print(DeleteInnovationHubDocument);
const UpdateAccountPlatformSettingsDocumentString = print(
  UpdateAccountPlatformSettingsDocument
);
const UpdateSpacePlatformSettingsDocumentString = print(
  UpdateSpacePlatformSettingsDocument
);
const UpdatePreferenceOnOrganizationDocumentString = print(
  UpdatePreferenceOnOrganizationDocument
);
const UpdatePreferenceOnUserDocumentString = print(
  UpdatePreferenceOnUserDocument
);
const CreateReferenceOnProfileDocumentString = print(
  CreateReferenceOnProfileDocument
);
const DeleteReferenceDocumentString = print(DeleteReferenceDocument);
const CreateRelationOnCollaborationDocumentString = print(
  CreateRelationOnCollaborationDocument
);
const DeleteRelationDocumentString = print(DeleteRelationDocument);
const UpdateSpaceSettingsDocumentString = print(UpdateSpaceSettingsDocument);
const CreateUserDocumentString = print(CreateUserDocument);
const DeleteUserDocumentString = print(DeleteUserDocument);
const UpdateUserDocumentString = print(UpdateUserDocument);
const GetActivityLogOnCollaborationDocumentString = print(
  GetActivityLogOnCollaborationDocument
);
const SpaceCalloutDocumentString = print(SpaceCalloutDocument);
const CalloutDetailsDocumentString = print(CalloutDetailsDocument);
const CalloutStorageConfigDocumentString = print(CalloutStorageConfigDocument);
const CalloutLinkContributionStorageConfigDocumentString = print(
  CalloutLinkContributionStorageConfigDocument
);
const CalloutPostStorageConfigDocumentString = print(
  CalloutPostStorageConfigDocument
);
const GetCalloutPostsDocumentString = print(GetCalloutPostsDocument);
const CalloutWhiateboardStorageConfigDocumentString = print(
  CalloutWhiateboardStorageConfigDocument
);
const GetCalloutsDocumentString = print(GetCalloutsDocument);
const CalloutDocumentString = print(CalloutDocument);
const GetPostDataDocumentString = print(GetPostDataDocument);
const GetPostPerJourneyDocumentString = print(GetPostPerJourneyDocument);
const WhiteboardCalloutStorageConfigDocumentString = print(
  WhiteboardCalloutStorageConfigDocument
);
const GetPlatformDiscussionsDataDocumentString = print(
  GetPlatformDiscussionsDataDocument
);
const GetPlatformDiscussionsDataByIdDocumentString = print(
  GetPlatformDiscussionsDataByIdDocument
);
const GetPlatformForumDataDocumentString = print(GetPlatformForumDataDocument);
const GetSubspaceAvailableMembersDocumentString = print(
  GetSubspaceAvailableMembersDocument
);
const GetSubspaceCommunityDocumentString = print(GetSubspaceCommunityDocument);
const CommunityAvailableMembersDocumentString = print(
  CommunityAvailableMembersDocument
);
const CommunityApplicationsInvitationsDocumentString = print(
  CommunityApplicationsInvitationsDocument
);
const CommunityMembersListDocumentString = print(CommunityMembersListDocument);
const CommunityUserPrivilegesDocumentString = print(
  CommunityUserPrivilegesDocument
);
const CommunityUserPrivilegesToChallengeDocumentString = print(
  CommunityUserPrivilegesToChallengeDocument
);
const CommunityUserPrivilegesToOpportunityDocumentString = print(
  CommunityUserPrivilegesToOpportunityDocument
);
const CommunityUserPrivilegesToSpaceDocumentString = print(
  CommunityUserPrivilegesToSpaceDocument
);
const GetOpportunityAvailableMembersDocumentString = print(
  GetOpportunityAvailableMembersDocument
);
const GetSpaceAvailableMembersDocumentString = print(
  GetSpaceAvailableMembersDocument
);
const GetSpaceCommunityDocumentString = print(GetSpaceCommunityDocument);
const GetSpaceInvitationsDocumentString = print(GetSpaceInvitationsDocument);
const PendingMembershipsSpaceDocumentString = print(
  PendingMembershipsSpaceDocument
);
const ConfigurationDocumentString = print(ConfigurationDocument);
const GetContextDataDocumentString = print(GetContextDataDocument);
const GetChallengeDocumentAndStorageDataDocumentString = print(
  GetChallengeDocumentAndStorageDataDocument
);
const PrivateSpaceDataDocumentString = print(PrivateSpaceDataDocument);
const GetSpaceDataDocumentString = print(GetSpaceDataDocument);
const GetSpaceDocumentAndStorageDataDocumentString = print(
  GetSpaceDocumentAndStorageDataDocument
);
const GetSpacesDataDocumentString = print(GetSpacesDataDocument);
const GetSpacesFilteredByVisibilityWithAccessDocumentString = print(
  GetSpacesFilteredByVisibilityWithAccessDocument
);
const GetSubspacePageDocumentString = print(GetSubspacePageDocument);
const GetSubspacesDataDocumentString = print(GetSubspacesDataDocument);
const GetUserRolesDocumentString = print(GetUserRolesDocument);
const LookupProfileVisualsDocumentString = print(LookupProfileVisualsDocument);
const GetOrgReferenceUriDocumentString = print(GetOrgReferenceUriDocument);
const GetOrgVisualUriDocumentString = print(GetOrgVisualUriDocument);
const GetOrganizationDataDocumentString = print(GetOrganizationDataDocument);
const GetOrganizationDocumentAndStorageDataDocumentString = print(
  GetOrganizationDocumentAndStorageDataDocument
);
const GetRolesOrganizationDocumentString = print(GetRolesOrganizationDocument);
const OrganizationsPaginatedDocumentString = print(
  OrganizationsPaginatedDocument
);
const UsersPaginatedDocumentString = print(UsersPaginatedDocument);
const GetOrgVisualUriInnovationHubDocumentString = print(
  GetOrgVisualUriInnovationHubDocument
);
const SearchContributorDocumentString = print(SearchContributorDocument);
const SearchJourneyDocumentString = print(SearchJourneyDocument);
const SearchContributionsDocumentString = print(SearchContributionsDocument);
const GetChallengeApplicationsDocumentString = print(
  GetChallengeApplicationsDocument
);
const GetSpaceApplicationsDocumentString = print(GetSpaceApplicationsDocument);
const GetUserDataDocumentString = print(GetUserDataDocument);
const GetUserDocumentAndStorageDataDocumentString = print(
  GetUserDocumentAndStorageDataDocument
);
const GetUserReferenceUriDocumentString = print(GetUserReferenceUriDocument);
const GetUsersDataDocumentString = print(GetUsersDataDocument);
const MeDocumentString = print(MeDocument);
export function getSdk(
  client: GraphQLClient,
  withWrapper: SdkFunctionWrapper = defaultWrapper
) {
  return {
    AssignLicensePlanToAccount(
      variables: SchemaTypes.AssignLicensePlanToAccountMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.AssignLicensePlanToAccountMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.AssignLicensePlanToAccountMutation>(
            AssignLicensePlanToAccountDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'AssignLicensePlanToAccount',
        'mutation'
      );
    },
    RevokeLicensePlanFromAccount(
      variables: SchemaTypes.RevokeLicensePlanFromAccountMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.RevokeLicensePlanFromAccountMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.RevokeLicensePlanFromAccountMutation>(
            RevokeLicensePlanFromAccountDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'RevokeLicensePlanFromAccount',
        'mutation'
      );
    },
    CreateAccount(
      variables: SchemaTypes.CreateAccountMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CreateAccountMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CreateAccountMutation>(
            CreateAccountDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CreateAccount',
        'mutation'
      );
    },
    assignOrganizationRoleToUser(
      variables: SchemaTypes.AssignOrganizationRoleToUserMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.AssignOrganizationRoleToUserMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.AssignOrganizationRoleToUserMutation>(
            AssignOrganizationRoleToUserDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'assignOrganizationRoleToUser',
        'mutation'
      );
    },
    assignPlatformRoleToUser(
      variables: SchemaTypes.AssignPlatformRoleToUserMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.AssignPlatformRoleToUserMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.AssignPlatformRoleToUserMutation>(
            AssignPlatformRoleToUserDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'assignPlatformRoleToUser',
        'mutation'
      );
    },
    removeOrganizationRoleFromUser(
      variables: SchemaTypes.RemoveOrganizationRoleFromUserMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.RemoveOrganizationRoleFromUserMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.RemoveOrganizationRoleFromUserMutation>(
            RemoveOrganizationRoleFromUserDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'removeOrganizationRoleFromUser',
        'mutation'
      );
    },
    removePlatformRoleFromUser(
      variables: SchemaTypes.RemovePlatformRoleFromUserMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.RemovePlatformRoleFromUserMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.RemovePlatformRoleFromUserMutation>(
            RemovePlatformRoleFromUserDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'removePlatformRoleFromUser',
        'mutation'
      );
    },
    CreateCalloutOnCollaboration(
      variables: SchemaTypes.CreateCalloutOnCollaborationMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CreateCalloutOnCollaborationMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CreateCalloutOnCollaborationMutation>(
            CreateCalloutOnCollaborationDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CreateCalloutOnCollaboration',
        'mutation'
      );
    },
    deleteCallout(
      variables: SchemaTypes.DeleteCalloutMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.DeleteCalloutMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.DeleteCalloutMutation>(
            DeleteCalloutDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'deleteCallout',
        'mutation'
      );
    },
    DeletePost(
      variables: SchemaTypes.DeletePostMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.DeletePostMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.DeletePostMutation>(
            DeletePostDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'DeletePost',
        'mutation'
      );
    },
    DeleteWhiteboard(
      variables: SchemaTypes.DeleteWhiteboardMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.DeleteWhiteboardMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.DeleteWhiteboardMutation>(
            DeleteWhiteboardDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'DeleteWhiteboard',
        'mutation'
      );
    },
    UpdateCallout(
      variables: SchemaTypes.UpdateCalloutMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.UpdateCalloutMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.UpdateCalloutMutation>(
            UpdateCalloutDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'UpdateCallout',
        'mutation'
      );
    },
    UpdateCalloutVisibility(
      variables: SchemaTypes.UpdateCalloutVisibilityMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.UpdateCalloutVisibilityMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.UpdateCalloutVisibilityMutation>(
            UpdateCalloutVisibilityDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'UpdateCalloutVisibility',
        'mutation'
      );
    },
    CreateContributionOnCallout(
      variables: SchemaTypes.CreateContributionOnCalloutMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CreateContributionOnCalloutMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CreateContributionOnCalloutMutation>(
            CreateContributionOnCalloutDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CreateContributionOnCallout',
        'mutation'
      );
    },
    CreatePostTemplate(
      variables: SchemaTypes.CreatePostTemplateMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CreatePostTemplateMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CreatePostTemplateMutation>(
            CreatePostTemplateDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CreatePostTemplate',
        'mutation'
      );
    },
    CreateWhiteboardTemplate(
      variables: SchemaTypes.CreateWhiteboardTemplateMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CreateWhiteboardTemplateMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CreateWhiteboardTemplateMutation>(
            CreateWhiteboardTemplateDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CreateWhiteboardTemplate',
        'mutation'
      );
    },
    DeletePostTemplate(
      variables: SchemaTypes.DeletePostTemplateMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.DeletePostTemplateMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.DeletePostTemplateMutation>(
            DeletePostTemplateDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'DeletePostTemplate',
        'mutation'
      );
    },
    UpdatePostTemplate(
      variables: SchemaTypes.UpdatePostTemplateMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.UpdatePostTemplateMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.UpdatePostTemplateMutation>(
            UpdatePostTemplateDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'UpdatePostTemplate',
        'mutation'
      );
    },
    AddReactionToMessageInRoom(
      variables: SchemaTypes.AddReactionToMessageInRoomMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.AddReactionToMessageInRoomMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.AddReactionToMessageInRoomMutation>(
            AddReactionToMessageInRoomDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'AddReactionToMessageInRoom',
        'mutation'
      );
    },
    CreateDiscussion(
      variables: SchemaTypes.CreateDiscussionMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CreateDiscussionMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CreateDiscussionMutation>(
            CreateDiscussionDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CreateDiscussion',
        'mutation'
      );
    },
    DeleteDiscussion(
      variables: SchemaTypes.DeleteDiscussionMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.DeleteDiscussionMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.DeleteDiscussionMutation>(
            DeleteDiscussionDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'DeleteDiscussion',
        'mutation'
      );
    },
    RemoveMessageOnRoom(
      variables: SchemaTypes.RemoveMessageOnRoomMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.RemoveMessageOnRoomMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.RemoveMessageOnRoomMutation>(
            RemoveMessageOnRoomDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'RemoveMessageOnRoom',
        'mutation'
      );
    },
    RemoveReactionToMessageInRoom(
      variables: SchemaTypes.RemoveReactionToMessageInRoomMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.RemoveReactionToMessageInRoomMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.RemoveReactionToMessageInRoomMutation>(
            RemoveReactionToMessageInRoomDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'RemoveReactionToMessageInRoom',
        'mutation'
      );
    },
    SendMessageReplyToRoom(
      variables: SchemaTypes.SendMessageReplyToRoomMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.SendMessageReplyToRoomMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.SendMessageReplyToRoomMutation>(
            SendMessageReplyToRoomDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'SendMessageReplyToRoom',
        'mutation'
      );
    },
    SendMessageToCommunityLeads(
      variables: SchemaTypes.SendMessageToCommunityLeadsMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.SendMessageToCommunityLeadsMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.SendMessageToCommunityLeadsMutation>(
            SendMessageToCommunityLeadsDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'SendMessageToCommunityLeads',
        'mutation'
      );
    },
    SendMessageToOrganization(
      variables: SchemaTypes.SendMessageToOrganizationMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.SendMessageToOrganizationMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.SendMessageToOrganizationMutation>(
            SendMessageToOrganizationDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'SendMessageToOrganization',
        'mutation'
      );
    },
    SendMessageToRoom(
      variables: SchemaTypes.SendMessageToRoomMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.SendMessageToRoomMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.SendMessageToRoomMutation>(
            SendMessageToRoomDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'SendMessageToRoom',
        'mutation'
      );
    },
    SendMessageToUser(
      variables: SchemaTypes.SendMessageToUserMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.SendMessageToUserMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.SendMessageToUserMutation>(
            SendMessageToUserDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'SendMessageToUser',
        'mutation'
      );
    },
    UpdateDiscussion(
      variables: SchemaTypes.UpdateDiscussionMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.UpdateDiscussionMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.UpdateDiscussionMutation>(
            UpdateDiscussionDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'UpdateDiscussion',
        'mutation'
      );
    },
    AssignCommunityRoleToUser(
      variables: SchemaTypes.AssignCommunityRoleToUserMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.AssignCommunityRoleToUserMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.AssignCommunityRoleToUserMutation>(
            AssignCommunityRoleToUserDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'AssignCommunityRoleToUser',
        'mutation'
      );
    },
    removeCommunityRoleFromUser(
      variables: SchemaTypes.RemoveCommunityRoleFromUserMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.RemoveCommunityRoleFromUserMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.RemoveCommunityRoleFromUserMutation>(
            RemoveCommunityRoleFromUserDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'removeCommunityRoleFromUser',
        'mutation'
      );
    },
    JoinCommunity(
      variables: SchemaTypes.JoinCommunityMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.JoinCommunityMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.JoinCommunityMutation>(
            JoinCommunityDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'JoinCommunity',
        'mutation'
      );
    },
    UpdatePost(
      variables: SchemaTypes.UpdatePostMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.UpdatePostMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.UpdatePostMutation>(
            UpdatePostDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'UpdatePost',
        'mutation'
      );
    },
    convertChallengeToSpace(
      variables: SchemaTypes.ConvertChallengeToSpaceMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.ConvertChallengeToSpaceMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.ConvertChallengeToSpaceMutation>(
            ConvertChallengeToSpaceDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'convertChallengeToSpace',
        'mutation'
      );
    },
    DeleteDocument(
      variables: SchemaTypes.DeleteDocumentMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.DeleteDocumentMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.DeleteDocumentMutation>(
            DeleteDocumentDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'DeleteDocument',
        'mutation'
      );
    },
    CreateSubspace(
      variables: SchemaTypes.CreateSubspaceMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CreateSubspaceMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CreateSubspaceMutation>(
            CreateSubspaceDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CreateSubspace',
        'mutation'
      );
    },
    deleteSpace(
      variables: SchemaTypes.DeleteSpaceMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.DeleteSpaceMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.DeleteSpaceMutation>(
            DeleteSpaceDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'deleteSpace',
        'mutation'
      );
    },
    updateSpace(
      variables: SchemaTypes.UpdateSpaceMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.UpdateSpaceMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.UpdateSpaceMutation>(
            UpdateSpaceDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'updateSpace',
        'mutation'
      );
    },
    CreateLicensePlan(
      variables: SchemaTypes.CreateLicensePlanMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CreateLicensePlanMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CreateLicensePlanMutation>(
            CreateLicensePlanDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CreateLicensePlan',
        'mutation'
      );
    },
    DeleteLicensePlan(
      variables: SchemaTypes.DeleteLicensePlanMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.DeleteLicensePlanMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.DeleteLicensePlanMutation>(
            DeleteLicensePlanDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'DeleteLicensePlan',
        'mutation'
      );
    },
    UpdateLicensePlan(
      variables: SchemaTypes.UpdateLicensePlanMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.UpdateLicensePlanMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.UpdateLicensePlanMutation>(
            UpdateLicensePlanDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'UpdateLicensePlan',
        'mutation'
      );
    },
    CreateInnovationFlowTemplate(
      variables: SchemaTypes.CreateInnovationFlowTemplateMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CreateInnovationFlowTemplateMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CreateInnovationFlowTemplateMutation>(
            CreateInnovationFlowTemplateDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CreateInnovationFlowTemplate',
        'mutation'
      );
    },
    eventOnApplication(
      variables: SchemaTypes.EventOnApplicationMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.EventOnApplicationMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.EventOnApplicationMutation>(
            EventOnApplicationDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'eventOnApplication',
        'mutation'
      );
    },
    InvitationStateEvent(
      variables: SchemaTypes.InvitationStateEventMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.InvitationStateEventMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.InvitationStateEventMutation>(
            InvitationStateEventDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'InvitationStateEvent',
        'mutation'
      );
    },
    eventOnOrganizationVerification(
      variables: SchemaTypes.EventOnOrganizationVerificationMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.EventOnOrganizationVerificationMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<
            SchemaTypes.EventOnOrganizationVerificationMutation
          >(EventOnOrganizationVerificationDocumentString, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'eventOnOrganizationVerification',
        'mutation'
      );
    },
    UpdateInnovationFlowSelectedState(
      variables: SchemaTypes.UpdateInnovationFlowSelectedStateMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.UpdateInnovationFlowSelectedStateMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<
            SchemaTypes.UpdateInnovationFlowSelectedStateMutation
          >(UpdateInnovationFlowSelectedStateDocumentString, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'UpdateInnovationFlowSelectedState',
        'mutation'
      );
    },
    UpdateInnovationFlowStatesFromTemplate(
      variables: SchemaTypes.UpdateInnovationFlowStatesFromTemplateMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.UpdateInnovationFlowStatesFromTemplateMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<
            SchemaTypes.UpdateInnovationFlowStatesFromTemplateMutation
          >(UpdateInnovationFlowStatesFromTemplateDocumentString, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'UpdateInnovationFlowStatesFromTemplate',
        'mutation'
      );
    },
    UpdateInnovationFlowTemplate(
      variables: SchemaTypes.UpdateInnovationFlowTemplateMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.UpdateInnovationFlowTemplateMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.UpdateInnovationFlowTemplateMutation>(
            UpdateInnovationFlowTemplateDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'UpdateInnovationFlowTemplate',
        'mutation'
      );
    },
    applyForCommunityMembership(
      variables: SchemaTypes.ApplyForCommunityMembershipMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.ApplyForCommunityMembershipMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.ApplyForCommunityMembershipMutation>(
            ApplyForCommunityMembershipDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'applyForCommunityMembership',
        'mutation'
      );
    },
    deleteUserApplication(
      variables: SchemaTypes.DeleteUserApplicationMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.DeleteUserApplicationMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.DeleteUserApplicationMutation>(
            DeleteUserApplicationDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'deleteUserApplication',
        'mutation'
      );
    },
    DeleteExternalInvitation(
      variables: SchemaTypes.DeleteExternalInvitationMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.DeleteExternalInvitationMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.DeleteExternalInvitationMutation>(
            DeleteExternalInvitationDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'DeleteExternalInvitation',
        'mutation'
      );
    },
    deleteInvitation(
      variables: SchemaTypes.DeleteInvitationMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.DeleteInvitationMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.DeleteInvitationMutation>(
            DeleteInvitationDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'deleteInvitation',
        'mutation'
      );
    },
    InviteContributors(
      variables: SchemaTypes.InviteContributorsMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.InviteContributorsMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.InviteContributorsMutation>(
            InviteContributorsDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'InviteContributors',
        'mutation'
      );
    },
    InviteExternalUser(
      variables: SchemaTypes.InviteExternalUserMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.InviteExternalUserMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.InviteExternalUserMutation>(
            InviteExternalUserDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'InviteExternalUser',
        'mutation'
      );
    },
    AssignCommunityRoleToOrganization(
      variables: SchemaTypes.AssignCommunityRoleToOrganizationMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.AssignCommunityRoleToOrganizationMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<
            SchemaTypes.AssignCommunityRoleToOrganizationMutation
          >(AssignCommunityRoleToOrganizationDocumentString, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'AssignCommunityRoleToOrganization',
        'mutation'
      );
    },
    AssignOrganizationAsCommunityLead(
      variables: SchemaTypes.AssignOrganizationAsCommunityLeadMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.AssignOrganizationAsCommunityLeadMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<
            SchemaTypes.AssignOrganizationAsCommunityLeadMutation
          >(AssignOrganizationAsCommunityLeadDocumentString, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'AssignOrganizationAsCommunityLead',
        'mutation'
      );
    },
    AssignOrganizationAsCommunityMember(
      variables: SchemaTypes.AssignOrganizationAsCommunityMemberMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.AssignOrganizationAsCommunityMemberMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<
            SchemaTypes.AssignOrganizationAsCommunityMemberMutation
          >(AssignOrganizationAsCommunityMemberDocumentString, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'AssignOrganizationAsCommunityMember',
        'mutation'
      );
    },
    CreateOrganization(
      variables: SchemaTypes.CreateOrganizationMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CreateOrganizationMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CreateOrganizationMutation>(
            CreateOrganizationDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CreateOrganization',
        'mutation'
      );
    },
    deleteOrganization(
      variables: SchemaTypes.DeleteOrganizationMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.DeleteOrganizationMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.DeleteOrganizationMutation>(
            DeleteOrganizationDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'deleteOrganization',
        'mutation'
      );
    },
    RemoveCommunityRoleFromOrganization(
      variables: SchemaTypes.RemoveCommunityRoleFromOrganizationMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.RemoveCommunityRoleFromOrganizationMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<
            SchemaTypes.RemoveCommunityRoleFromOrganizationMutation
          >(RemoveCommunityRoleFromOrganizationDocumentString, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'RemoveCommunityRoleFromOrganization',
        'mutation'
      );
    },
    updateOrganization(
      variables: SchemaTypes.UpdateOrganizationMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.UpdateOrganizationMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.UpdateOrganizationMutation>(
            UpdateOrganizationDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'updateOrganization',
        'mutation'
      );
    },
    CreateInnovationHub(
      variables: SchemaTypes.CreateInnovationHubMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CreateInnovationHubMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CreateInnovationHubMutation>(
            CreateInnovationHubDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CreateInnovationHub',
        'mutation'
      );
    },
    CreateInnovationPackOnLibrary(
      variables: SchemaTypes.CreateInnovationPackOnLibraryMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CreateInnovationPackOnLibraryMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CreateInnovationPackOnLibraryMutation>(
            CreateInnovationPackOnLibraryDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CreateInnovationPackOnLibrary',
        'mutation'
      );
    },
    DeleteInnovationFlowTemplate(
      variables: SchemaTypes.DeleteInnovationFlowTemplateMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.DeleteInnovationFlowTemplateMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.DeleteInnovationFlowTemplateMutation>(
            DeleteInnovationFlowTemplateDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'DeleteInnovationFlowTemplate',
        'mutation'
      );
    },
    DeleteInnovationHub(
      variables: SchemaTypes.DeleteInnovationHubMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.DeleteInnovationHubMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.DeleteInnovationHubMutation>(
            DeleteInnovationHubDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'DeleteInnovationHub',
        'mutation'
      );
    },
    UpdateAccountPlatformSettings(
      variables: SchemaTypes.UpdateAccountPlatformSettingsMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.UpdateAccountPlatformSettingsMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.UpdateAccountPlatformSettingsMutation>(
            UpdateAccountPlatformSettingsDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'UpdateAccountPlatformSettings',
        'mutation'
      );
    },
    UpdateSpacePlatformSettings(
      variables: SchemaTypes.UpdateSpacePlatformSettingsMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.UpdateSpacePlatformSettingsMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.UpdateSpacePlatformSettingsMutation>(
            UpdateSpacePlatformSettingsDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'UpdateSpacePlatformSettings',
        'mutation'
      );
    },
    updatePreferenceOnOrganization(
      variables: SchemaTypes.UpdatePreferenceOnOrganizationMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.UpdatePreferenceOnOrganizationMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.UpdatePreferenceOnOrganizationMutation>(
            UpdatePreferenceOnOrganizationDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'updatePreferenceOnOrganization',
        'mutation'
      );
    },
    UpdatePreferenceOnUser(
      variables: SchemaTypes.UpdatePreferenceOnUserMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.UpdatePreferenceOnUserMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.UpdatePreferenceOnUserMutation>(
            UpdatePreferenceOnUserDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'UpdatePreferenceOnUser',
        'mutation'
      );
    },
    CreateReferenceOnProfile(
      variables: SchemaTypes.CreateReferenceOnProfileMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CreateReferenceOnProfileMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CreateReferenceOnProfileMutation>(
            CreateReferenceOnProfileDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CreateReferenceOnProfile',
        'mutation'
      );
    },
    DeleteReference(
      variables: SchemaTypes.DeleteReferenceMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.DeleteReferenceMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.DeleteReferenceMutation>(
            DeleteReferenceDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'DeleteReference',
        'mutation'
      );
    },
    CreateRelationOnCollaboration(
      variables: SchemaTypes.CreateRelationOnCollaborationMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CreateRelationOnCollaborationMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CreateRelationOnCollaborationMutation>(
            CreateRelationOnCollaborationDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CreateRelationOnCollaboration',
        'mutation'
      );
    },
    DeleteRelation(
      variables: SchemaTypes.DeleteRelationMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.DeleteRelationMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.DeleteRelationMutation>(
            DeleteRelationDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'DeleteRelation',
        'mutation'
      );
    },
    UpdateSpaceSettings(
      variables: SchemaTypes.UpdateSpaceSettingsMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.UpdateSpaceSettingsMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.UpdateSpaceSettingsMutation>(
            UpdateSpaceSettingsDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'UpdateSpaceSettings',
        'mutation'
      );
    },
    CreateUser(
      variables: SchemaTypes.CreateUserMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CreateUserMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CreateUserMutation>(
            CreateUserDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CreateUser',
        'mutation'
      );
    },
    deleteUser(
      variables: SchemaTypes.DeleteUserMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.DeleteUserMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.DeleteUserMutation>(
            DeleteUserDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'deleteUser',
        'mutation'
      );
    },
    updateUser(
      variables: SchemaTypes.UpdateUserMutationVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.UpdateUserMutation;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.UpdateUserMutation>(
            UpdateUserDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'updateUser',
        'mutation'
      );
    },
    GetActivityLogOnCollaboration(
      variables: SchemaTypes.GetActivityLogOnCollaborationQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetActivityLogOnCollaborationQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetActivityLogOnCollaborationQuery>(
            GetActivityLogOnCollaborationDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetActivityLogOnCollaboration',
        'query'
      );
    },
    SpaceCallout(
      variables: SchemaTypes.SpaceCalloutQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.SpaceCalloutQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.SpaceCalloutQuery>(
            SpaceCalloutDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'SpaceCallout',
        'query'
      );
    },
    CalloutDetails(
      variables: SchemaTypes.CalloutDetailsQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CalloutDetailsQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CalloutDetailsQuery>(
            CalloutDetailsDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CalloutDetails',
        'query'
      );
    },
    CalloutStorageConfig(
      variables: SchemaTypes.CalloutStorageConfigQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CalloutStorageConfigQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CalloutStorageConfigQuery>(
            CalloutStorageConfigDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CalloutStorageConfig',
        'query'
      );
    },
    CalloutLinkContributionStorageConfig(
      variables: SchemaTypes.CalloutLinkContributionStorageConfigQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CalloutLinkContributionStorageConfigQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<
            SchemaTypes.CalloutLinkContributionStorageConfigQuery
          >(CalloutLinkContributionStorageConfigDocumentString, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'CalloutLinkContributionStorageConfig',
        'query'
      );
    },
    CalloutPostStorageConfig(
      variables: SchemaTypes.CalloutPostStorageConfigQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CalloutPostStorageConfigQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CalloutPostStorageConfigQuery>(
            CalloutPostStorageConfigDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CalloutPostStorageConfig',
        'query'
      );
    },
    GetCalloutPosts(
      variables: SchemaTypes.GetCalloutPostsQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetCalloutPostsQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetCalloutPostsQuery>(
            GetCalloutPostsDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetCalloutPosts',
        'query'
      );
    },
    CalloutWhiateboardStorageConfig(
      variables: SchemaTypes.CalloutWhiateboardStorageConfigQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CalloutWhiateboardStorageConfigQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CalloutWhiateboardStorageConfigQuery>(
            CalloutWhiateboardStorageConfigDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CalloutWhiateboardStorageConfig',
        'query'
      );
    },
    GetCallouts(
      variables: SchemaTypes.GetCalloutsQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetCalloutsQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetCalloutsQuery>(
            GetCalloutsDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetCallouts',
        'query'
      );
    },
    Callout(
      variables: SchemaTypes.CalloutQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CalloutQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CalloutQuery>(
            CalloutDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'Callout',
        'query'
      );
    },
    GetPostData(
      variables: SchemaTypes.GetPostDataQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetPostDataQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetPostDataQuery>(
            GetPostDataDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetPostData',
        'query'
      );
    },
    GetPostPerJourney(
      variables: SchemaTypes.GetPostPerJourneyQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetPostPerJourneyQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetPostPerJourneyQuery>(
            GetPostPerJourneyDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetPostPerJourney',
        'query'
      );
    },
    WhiteboardCalloutStorageConfig(
      variables: SchemaTypes.WhiteboardCalloutStorageConfigQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.WhiteboardCalloutStorageConfigQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.WhiteboardCalloutStorageConfigQuery>(
            WhiteboardCalloutStorageConfigDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'WhiteboardCalloutStorageConfig',
        'query'
      );
    },
    GetPlatformDiscussionsData(
      variables?: SchemaTypes.GetPlatformDiscussionsDataQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetPlatformDiscussionsDataQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetPlatformDiscussionsDataQuery>(
            GetPlatformDiscussionsDataDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetPlatformDiscussionsData',
        'query'
      );
    },
    GetPlatformDiscussionsDataById(
      variables: SchemaTypes.GetPlatformDiscussionsDataByIdQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetPlatformDiscussionsDataByIdQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetPlatformDiscussionsDataByIdQuery>(
            GetPlatformDiscussionsDataByIdDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetPlatformDiscussionsDataById',
        'query'
      );
    },
    GetPlatformForumData(
      variables?: SchemaTypes.GetPlatformForumDataQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetPlatformForumDataQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetPlatformForumDataQuery>(
            GetPlatformForumDataDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetPlatformForumData',
        'query'
      );
    },
    GetSubspaceAvailableMembers(
      variables: SchemaTypes.GetSubspaceAvailableMembersQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetSubspaceAvailableMembersQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetSubspaceAvailableMembersQuery>(
            GetSubspaceAvailableMembersDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetSubspaceAvailableMembers',
        'query'
      );
    },
    getSubspaceCommunity(
      variables: SchemaTypes.GetSubspaceCommunityQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetSubspaceCommunityQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetSubspaceCommunityQuery>(
            GetSubspaceCommunityDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'getSubspaceCommunity',
        'query'
      );
    },
    CommunityAvailableMembers(
      variables: SchemaTypes.CommunityAvailableMembersQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CommunityAvailableMembersQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CommunityAvailableMembersQuery>(
            CommunityAvailableMembersDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CommunityAvailableMembers',
        'query'
      );
    },
    CommunityApplicationsInvitations(
      variables: SchemaTypes.CommunityApplicationsInvitationsQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CommunityApplicationsInvitationsQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CommunityApplicationsInvitationsQuery>(
            CommunityApplicationsInvitationsDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CommunityApplicationsInvitations',
        'query'
      );
    },
    CommunityMembersList(
      variables: SchemaTypes.CommunityMembersListQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CommunityMembersListQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CommunityMembersListQuery>(
            CommunityMembersListDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CommunityMembersList',
        'query'
      );
    },
    CommunityUserPrivileges(
      variables: SchemaTypes.CommunityUserPrivilegesQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CommunityUserPrivilegesQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CommunityUserPrivilegesQuery>(
            CommunityUserPrivilegesDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CommunityUserPrivileges',
        'query'
      );
    },
    CommunityUserPrivilegesToChallenge(
      variables: SchemaTypes.CommunityUserPrivilegesToChallengeQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CommunityUserPrivilegesToChallengeQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<
            SchemaTypes.CommunityUserPrivilegesToChallengeQuery
          >(CommunityUserPrivilegesToChallengeDocumentString, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'CommunityUserPrivilegesToChallenge',
        'query'
      );
    },
    CommunityUserPrivilegesToOpportunity(
      variables: SchemaTypes.CommunityUserPrivilegesToOpportunityQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CommunityUserPrivilegesToOpportunityQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<
            SchemaTypes.CommunityUserPrivilegesToOpportunityQuery
          >(CommunityUserPrivilegesToOpportunityDocumentString, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'CommunityUserPrivilegesToOpportunity',
        'query'
      );
    },
    CommunityUserPrivilegesToSpace(
      variables: SchemaTypes.CommunityUserPrivilegesToSpaceQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.CommunityUserPrivilegesToSpaceQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.CommunityUserPrivilegesToSpaceQuery>(
            CommunityUserPrivilegesToSpaceDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'CommunityUserPrivilegesToSpace',
        'query'
      );
    },
    GetOpportunityAvailableMembers(
      variables: SchemaTypes.GetOpportunityAvailableMembersQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetOpportunityAvailableMembersQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetOpportunityAvailableMembersQuery>(
            GetOpportunityAvailableMembersDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetOpportunityAvailableMembers',
        'query'
      );
    },
    GetSpaceAvailableMembers(
      variables: SchemaTypes.GetSpaceAvailableMembersQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetSpaceAvailableMembersQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetSpaceAvailableMembersQuery>(
            GetSpaceAvailableMembersDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetSpaceAvailableMembers',
        'query'
      );
    },
    getSpaceCommunity(
      variables: SchemaTypes.GetSpaceCommunityQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetSpaceCommunityQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetSpaceCommunityQuery>(
            GetSpaceCommunityDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'getSpaceCommunity',
        'query'
      );
    },
    getSpaceInvitations(
      variables: SchemaTypes.GetSpaceInvitationsQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetSpaceInvitationsQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetSpaceInvitationsQuery>(
            GetSpaceInvitationsDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'getSpaceInvitations',
        'query'
      );
    },
    PendingMembershipsSpace(
      variables: SchemaTypes.PendingMembershipsSpaceQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.PendingMembershipsSpaceQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.PendingMembershipsSpaceQuery>(
            PendingMembershipsSpaceDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'PendingMembershipsSpace',
        'query'
      );
    },
    configuration(
      variables?: SchemaTypes.ConfigurationQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.ConfigurationQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.ConfigurationQuery>(
            ConfigurationDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'configuration',
        'query'
      );
    },
    GetContextData(
      variables: SchemaTypes.GetContextDataQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetContextDataQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetContextDataQuery>(
            GetContextDataDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetContextData',
        'query'
      );
    },
    GetChallengeDocumentAndStorageData(
      variables: SchemaTypes.GetChallengeDocumentAndStorageDataQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetChallengeDocumentAndStorageDataQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<
            SchemaTypes.GetChallengeDocumentAndStorageDataQuery
          >(GetChallengeDocumentAndStorageDataDocumentString, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'GetChallengeDocumentAndStorageData',
        'query'
      );
    },
    PrivateSpaceData(
      variables: SchemaTypes.PrivateSpaceDataQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.PrivateSpaceDataQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.PrivateSpaceDataQuery>(
            PrivateSpaceDataDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'PrivateSpaceData',
        'query'
      );
    },
    GetSpaceData(
      variables: SchemaTypes.GetSpaceDataQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetSpaceDataQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetSpaceDataQuery>(
            GetSpaceDataDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetSpaceData',
        'query'
      );
    },
    getSpaceDocumentAndStorageData(
      variables: SchemaTypes.GetSpaceDocumentAndStorageDataQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetSpaceDocumentAndStorageDataQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetSpaceDocumentAndStorageDataQuery>(
            GetSpaceDocumentAndStorageDataDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'getSpaceDocumentAndStorageData',
        'query'
      );
    },
    GetSpacesData(
      variables?: SchemaTypes.GetSpacesDataQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetSpacesDataQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetSpacesDataQuery>(
            GetSpacesDataDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetSpacesData',
        'query'
      );
    },
    GetSpacesFilteredByVisibilityWithAccess(
      variables?: SchemaTypes.GetSpacesFilteredByVisibilityWithAccessQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetSpacesFilteredByVisibilityWithAccessQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<
            SchemaTypes.GetSpacesFilteredByVisibilityWithAccessQuery
          >(GetSpacesFilteredByVisibilityWithAccessDocumentString, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'GetSpacesFilteredByVisibilityWithAccess',
        'query'
      );
    },
    GetSubspacePage(
      variables: SchemaTypes.GetSubspacePageQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetSubspacePageQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetSubspacePageQuery>(
            GetSubspacePageDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetSubspacePage',
        'query'
      );
    },
    GetSubspacesData(
      variables: SchemaTypes.GetSubspacesDataQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetSubspacesDataQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetSubspacesDataQuery>(
            GetSubspacesDataDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetSubspacesData',
        'query'
      );
    },
    GetUserRoles(
      variables: SchemaTypes.GetUserRolesQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetUserRolesQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetUserRolesQuery>(
            GetUserRolesDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetUserRoles',
        'query'
      );
    },
    lookupProfileVisuals(
      variables: SchemaTypes.LookupProfileVisualsQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.LookupProfileVisualsQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.LookupProfileVisualsQuery>(
            LookupProfileVisualsDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'lookupProfileVisuals',
        'query'
      );
    },
    GetOrgReferenceUri(
      variables: SchemaTypes.GetOrgReferenceUriQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetOrgReferenceUriQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetOrgReferenceUriQuery>(
            GetOrgReferenceUriDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetOrgReferenceUri',
        'query'
      );
    },
    GetOrgVisualUri(
      variables: SchemaTypes.GetOrgVisualUriQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetOrgVisualUriQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetOrgVisualUriQuery>(
            GetOrgVisualUriDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetOrgVisualUri',
        'query'
      );
    },
    getOrganizationData(
      variables: SchemaTypes.GetOrganizationDataQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetOrganizationDataQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetOrganizationDataQuery>(
            GetOrganizationDataDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'getOrganizationData',
        'query'
      );
    },
    GetOrganizationDocumentAndStorageData(
      variables: SchemaTypes.GetOrganizationDocumentAndStorageDataQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetOrganizationDocumentAndStorageDataQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<
            SchemaTypes.GetOrganizationDocumentAndStorageDataQuery
          >(GetOrganizationDocumentAndStorageDataDocumentString, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'GetOrganizationDocumentAndStorageData',
        'query'
      );
    },
    GetRolesOrganization(
      variables: SchemaTypes.GetRolesOrganizationQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetRolesOrganizationQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetRolesOrganizationQuery>(
            GetRolesOrganizationDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetRolesOrganization',
        'query'
      );
    },
    OrganizationsPaginated(
      variables?: SchemaTypes.OrganizationsPaginatedQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.OrganizationsPaginatedQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.OrganizationsPaginatedQuery>(
            OrganizationsPaginatedDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'OrganizationsPaginated',
        'query'
      );
    },
    UsersPaginated(
      variables?: SchemaTypes.UsersPaginatedQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.UsersPaginatedQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.UsersPaginatedQuery>(
            UsersPaginatedDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'UsersPaginated',
        'query'
      );
    },
    GetOrgVisualUriInnovationHub(
      variables: SchemaTypes.GetOrgVisualUriInnovationHubQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetOrgVisualUriInnovationHubQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetOrgVisualUriInnovationHubQuery>(
            GetOrgVisualUriInnovationHubDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetOrgVisualUriInnovationHub',
        'query'
      );
    },
    searchContributor(
      variables: SchemaTypes.SearchContributorQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.SearchContributorQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.SearchContributorQuery>(
            SearchContributorDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'searchContributor',
        'query'
      );
    },
    searchJourney(
      variables: SchemaTypes.SearchJourneyQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.SearchJourneyQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.SearchJourneyQuery>(
            SearchJourneyDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'searchJourney',
        'query'
      );
    },
    searchContributions(
      variables: SchemaTypes.SearchContributionsQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.SearchContributionsQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.SearchContributionsQuery>(
            SearchContributionsDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'searchContributions',
        'query'
      );
    },
    getChallengeApplications(
      variables: SchemaTypes.GetChallengeApplicationsQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetChallengeApplicationsQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetChallengeApplicationsQuery>(
            GetChallengeApplicationsDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'getChallengeApplications',
        'query'
      );
    },
    getSpaceApplications(
      variables: SchemaTypes.GetSpaceApplicationsQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetSpaceApplicationsQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetSpaceApplicationsQuery>(
            GetSpaceApplicationsDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'getSpaceApplications',
        'query'
      );
    },
    getUserData(
      variables: SchemaTypes.GetUserDataQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetUserDataQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetUserDataQuery>(
            GetUserDataDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'getUserData',
        'query'
      );
    },
    GetUserDocumentAndStorageData(
      variables: SchemaTypes.GetUserDocumentAndStorageDataQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetUserDocumentAndStorageDataQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetUserDocumentAndStorageDataQuery>(
            GetUserDocumentAndStorageDataDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetUserDocumentAndStorageData',
        'query'
      );
    },
    GetUserReferenceUri(
      variables: SchemaTypes.GetUserReferenceUriQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetUserReferenceUriQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetUserReferenceUriQuery>(
            GetUserReferenceUriDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'GetUserReferenceUri',
        'query'
      );
    },
    getUsersData(
      variables?: SchemaTypes.GetUsersDataQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.GetUsersDataQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.GetUsersDataQuery>(
            GetUsersDataDocumentString,
            variables,
            { ...requestHeaders, ...wrappedRequestHeaders }
          ),
        'getUsersData',
        'query'
      );
    },
    me(
      variables?: SchemaTypes.MeQueryVariables,
      requestHeaders?: Dom.RequestInit['headers']
    ): Promise<{
      data: SchemaTypes.MeQuery;
      extensions?: any;
      headers: Dom.Headers;
      status: number;
    }> {
      return withWrapper(
        wrappedRequestHeaders =>
          client.rawRequest<SchemaTypes.MeQuery>(MeDocumentString, variables, {
            ...requestHeaders,
            ...wrappedRequestHeaders,
          }),
        'me',
        'query'
      );
    },
  };
}
export type Sdk = ReturnType<typeof getSdk>;
